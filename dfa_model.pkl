ccopy_reg
_reconstructor
p0
(cmodels
theanoDFA
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'alphabet_size'
p6
I28
sS'L2_sqr'
p7
g0
(ctheano.tensor.var
TensorVariable
p8
g2
Ntp9
Rp10
(dp11
S'owner'
p12
g0
(ctheano.gof.graph
Apply
p13
g2
Ntp14
Rp15
(dp16
S'inputs'
p17
(lp18
g0
(g8
g2
Ntp19
Rp20
(dp21
g12
g0
(g13
g2
Ntp22
Rp23
(dp24
g17
(lp25
g0
(g8
g2
Ntp26
Rp27
(dp28
g12
g0
(g13
g2
Ntp29
Rp30
(dp31
g17
(lp32
g0
(ctheano.tensor.var
TensorConstant
p33
g2
Ntp34
Rp35
(dp36
S'index'
p37
NsS'name'
p38
NsS'cached'
p39
I01
sS'data'
p40
cnumpy.core.multiarray
_reconstruct
p41
(cnumpy
ndarray
p42
(I0
tp43
S'b'
p44
tp45
Rp46
(I1
(tcnumpy
dtype
p47
(S'i1'
p48
I0
I1
tp49
Rp50
(I3
S'|'
p51
NNNI-1
I-1
I0
tp52
bI00
S'\x00'
p53
tp54
bsS'tag'
p55
(itheano.gof.utils
scratchpad
p56
(dp57
S'unique_value'
p58
NsbsS'type'
p59
g0
(ctheano.tensor.type
TensorType
p60
g2
Ntp61
Rp62
(dp63
S'broadcastable'
p64
(tsS'dtype'
p65
S'int8'
p66
sS'numpy_dtype'
p67
g50
sS'sparse_grad'
p68
I00
sg38
Nsbsbag0
(g8
g2
Ntp69
Rp70
(dp71
g12
g0
(g13
g2
Ntp72
Rp73
(dp74
g17
(lp75
g0
(g8
g2
Ntp76
Rp77
(dp78
g12
g0
(g13
g2
Ntp79
Rp80
(dp81
g17
(lp82
g0
(ctheano.tensor.sharedvar
TensorSharedVariable
p83
g2
Ntp84
Rp85
(dp86
g37
NsS'container'
p87
g0
(ctheano.gof.link
Container
p88
g2
Ntp89
Rp90
(dp91
g38
NsS'storage'
p92
(lp93
g41
(g42
(I0
tp94
g44
tp95
Rp96
(I1
(I28
I15
I15
tp97
g47
(S'f8'
p98
I0
I1
tp99
Rp100
(I3
S'<'
p101
NNNI-1
I-1
I0
tp102
bI00
S'*\x9d4\xbfn\xf9\xbc?V\xb62[(\xd7\xb7?\x80#\xc6a\x05\x05\xbd?4\x90\xef\xe9]\xe6\xbc?|\xee\xad\x81w\xd4\xbc?5\xe9y\x13I\x17\xbd?P\xee\xe1\xab\xdc\xd7\xbc?qBuh\xa0O\xbd?\xb4\xde\xf1\x05\x02\xd4\xbc?\x93L\x10O\xa7\xfa\xbc?\x86\xbb7\xad\xa4\x18\xbd?\xa1\x97\x89\xda\x9dr\xbd?\xad\x8f!]_\xaf\xbc?\x8a\x01t\x16\\\xcd\xbb?j\n_o\x16\x02\xbd?6h\xdag\x8aR6?\x1d\xcf\x0b\xdf\\A#\xbf+w/\xbd\x06\xd5.?\xa3qD71U,?\x16\xd0U/\n\xcf8?\xecR\x9aD\x18,&?L&\x85<\xe0\xbc7?\x18\xf2K\x07T\x84*?\x7f\x07\x95L<\x035?\x86\xae\xc9\r1L\x16?\xb4\xd0\x10:\x9d\xf2\'?\x10dK\xe6\x00\xbd,?\x7f\x19bq\xa3\x99"?\x86\xb3K\xdb\x1ds\'?\xe2*j\xfe\xb5\xbf\'?\x19*\xd9\xa5\xea\x93E?\xf3\'%\x93i\x9aK?\xa3\xc9\x9dMz\xf7G?\xefR\xd7\xeb\xa7\xcaL?\xd0\x8c\x85\x9e\x08\xd2L?b"\xa4\x9ci\xccF?\x15,\xb7\xb4:/K?\x00\x87\x04}\xb5RJ?U\x05g\xb5JnH?\xe3N\x08\xd7\x85\x8fE?N\x1cm\xf7\x04\xe1G?s\x9c\xd0\xb3\xa8`H?\xf2\xad\xcb>\xe3\xd8I?~\xf8\xb8\x10\x9dJH?\x01\xb31\xdeG?I?Z\x874\x0f\xc4\xdd2?\x87\x00\x95\xa1.\xaa\x17?\xb9\x87E\x8em\xc8:?J\xcc\xd0\xf4\x0c\xc6B?e\xe2\xf5\xdb\xceL\x1d?w\n|\x06\xb6\xad<?&\xba?_;\xb62?:\xefE\xa5\x15z9?\x1c\x03\xa9\x1fV\xe1=?0.\xe1\'M\x84H?\x7f\x7fusf\x18??\r\xca\xae\xbcb\xd9:?\x8d\xb4\xae\x17\xc9\xca<?\xf2\x0b.\xc9U.\x17?\xb6y\x0c\xbe\xe9\xea8?\x81\xd4\xb1\xa4zHu\xbf\xf1\x95\xff\xed4l\x9d?\x0e\x16%\xc9j1t\xbf\x1ec\n\xf0\xc5\x80s\xbfW\xed\xfe\xa86\x00r\xbfG;Ph\x90bt\xbf\xa5\xc4\xd2\x9f>\xdas\xbf\xf7C\x0e\xfc\x8bM~\xbf\x9eS\x9aQ\x80_t\xbf\xe4\xd1)\xb0\xb2\x87v\xbf\xae\xa2\xd2o\xc8Jt\xbfZX\xe1q\xd9\x9cs\xbfoM\xd8\x8c pq\xbf\xb0N\x9c\xe8n\xc7t\xbf\x15\xb9\xd1\xa6\r\x7fs\xbf\x95\x92r\x07\x96(f?.\xb6\x8fs_\xbcI?\xeb\x14MAU\x86f?\xc2o\xb8`W\x86f?\xf4\x98\xe8\x1fZ\xd5f?\xc4\x93H\x99&nf?\xf8\xe5\xd7\xac2\xcaf?\x8cz\x9c\xea\x07\x94g?j\x02\xb9\xf2\xe5Qf?\x9f\xeb\x9c\xd8\xed\xd6e?\xba\x91\xdd\x05\xe3\xb2e?\xcae\xd2J\xe7\xe5f?\x92\x15\xbe\xbc\'=f?$.\x11C\xc6\xf2e?\xcc\xeb\x84\x86\x1c\x99f?\x91\xe7\xc8\xb4&Xd?9\x83\xd7G(\x87d?\x06\xad\xdc\x8a\xdbzd?_\x0e\x98\x0c\x82\x06e?C\xe11\xb1\xd5\re?\xfc\xde\xe1\x7f\xe3}d?\xf1F\xc0\x9c\xb4\xcbd?X\x90\\=\x8f\xbdd?p\xd1\xa6<\xe8\xa3d?\xde\x89a\xf0DXd?H\xc2\xb0\xb7\xda\x89d?\xe0\xe5\x8d\xfbi\x92d?\x8b\x8e\x82\x87/\xb1d?\x81_\x1f\xbf\x8d\x8ad?xv\xfa\xf3t\xa5d?\xb1_]6\xd1\xf56\xbf\xa7\x17\xd6\xf0\xfb\x85>\xbf~$\xbe\xc1^\xf0-\xbf\xfc\xba-0\xfa\xf8\x0b?\xe7\xc7\xc2\xa8\n\xc7\xfb\xbe=n\xc2d\xda\xf73\xbf=p2\xd3\x92*#\xbfOp\x0b\x00\xff;*\xbf\xc2PSp\xd8E3\xbfn\xc2\xc8\xce\x89\xf72\xbfgZ\x93O\xde\xf66\xbfAR*\xaf\x08\xb8/\xbfhe\'\xdc/*\x12\xbf]Q\xee\xc2s\xaf\'\xbf\x92\xf1|\xaa8\x8c*\xbf\xe2y\x00\xcd\xe8\x07P?\x1d\xab\xb8\x1bl\x94S?u\x16=K\xf8\xa7P?\xad\x8d\x00\xb9\x96\x86G?\xcc\xcd\x9e\xa4g\xdfD?\x8c\xe6o\x80<\x18P?\x04\xb2\x81-\x8c\xd7S?\xd2\xb6&\xaa\r\x16R?\xb3\x91\x1a\xac\x8dCS?H\xeec^u\xbfP?#7J\xe5^\x98Q?\xe9!8\x98\xe0\xe7I?5\xbc\x93\xa1\xbc;R?\x93\x84\x87\xdc\xcc\xc0T?\x82\x8e\xc6\n\xad\xdcQ?{\x83\x80\xc7\xfcG)?\xd3\xf1,\xe8a7<?\xaeZ\xdb\xd3\xae99?\x86\xa5\x15\x80r\x84"\xbf\x16@\xbdx\xcb\x83\x00\xbf:m\x17p\x00\xa33?\x8f;\x1b~\x91\xc7\x18?0\xb6\x9b\x01X\x10\x10?Y\'q:W\x88,?`\xd1\x95/\xc7\xa99?\xaeXSbvk0?\xab\xa4\xa3"k\xfb(?1\x11 \x1f\x0e\x94\x1c?kD?U-T+?iO\x9a\xc8\x0e\r#?\x836\xd3\x9c\\L\xa1\xbf\xcaP\xe6p~_\xa1\xbf8\xc1\x06\xfd/D\xa1\xbf\x9d\x8d\x83\xe6\x03a\xa0\xbfu\xe7\x06\xa8\xc2|\xa0\xbf\xc50\r\xe6l+\xa1\xbf\xb1+W7\xfac\xa1\xbf\x17\x9c\x9eT\x8aK\xa1\xbfD^>\x92\\u\xa1\xbfY\xf8\x0bA\xefS\xa1\xbfzZ\xfe\xa5\xb9a\xa1\xbf\xc6+`=\x18\xf4\xa0\xbf[\xa5/\xdb\xb0U\xa1\xbf\xb3mJ\xd6\xee\x16\xa1\xbf\x8d\xc6\xf9)\xedO\xa1\xbfm\x15\x82\xe22+:?I\xb56\xa2\xf7\xc7\xe2\xbe\x07jO\xe0\x05X:?\xe2\x0e\xa6<M\xdb\xc2\xbeV}\x1am\x06\xab\xe9\xbe\xe2>\xa3\xed8\xe35?\x8e\xbf\xda/ma(?\x98\x11lV2\x19\x17?\xa6\xfem\xb8\x16\xc69?\xfe/?W\xad\xc7??\xe2(F\xc4}\x8d7?\x9b n5\xbdV/?\xc1\xc7\x8c\x83\xa6\x9c\'?\xa2\x82\xf5\x16s\xee7?M*n\xc1P\xf2-?\xef\xe3g?\xec\x05J\xbf4\t\xf6@\xac:H\xbf\xe0=\xc2\xcb\xd5\xe4I\xbf\xe4j\xdd\xa0\xd8\xeeC\xbf\xb8)}\xc4\xf8\xa7A\xbfK\xa1\xb6\x9fR\x0fM\xbfN\x9c=\xb6\xa7\xf9C\xbf\x0fe\x16\xbeprE\xbf\xfd\x92\xd3\xc7\xcf1K\xbf\xd8\xef\xb9\xa8\x97\xf7O\xbfZ\x16\xae2FIK\xbf\xe3\xdc7\xac\xfb\xb2I\xbf\xe0\xa8\xdd\xcc\xc7wD\xbf\xf5\xa3\x9c\xdf\x18\xadH\xbfK\xfa\xbd\xf8l\xa6F\xbf\x1b\xcd\xca\xf5i\xfb\x83\xbf\x08\xf3\xd1J\xebr\x81\xbf\xb2\x1e\x92j\x88v\x83\xbfl\x97.\xc5\xc3&\x84\xbf\xa6.\x11\x15\x04/\x84\xbf;\x07\x9a\xb2\x1cg\x83\xbf\x01\xe1\xca\x12(K\x84\xbf\xee@\xa1\x82)E\x84\xbf\x95\xba\x1f\xe8\xe2X\x84\xbfg\xcf\xa9\xf2I\x93\x83\xbf|\x87\xb4kS?\x84\xbfd\x11b\xe9\xa8\x92\x81\xbfa\xdb\xa3S\x99\xea\x83\xbf\xc0\x94\xd5\xc31\x0e\x84\xbf\xdb\xd0u\xd7\xccW\x84\xbf1*A\x18xVv\xbf\xc6\xd8O}\xf1\xa2x\xbf9O\xbc\xa3]%w\xbfkD\x9eA\xcf\x9ev\xbf\xba\xde\x0fJk\x87v\xbfg\x1c\xfd%v/v\xbf\x06\x8b\x0b\xe1\x84\xc3v\xbf\'\xd7f\xbb\xd8\x80v\xbf\x8fT\x85\xe2a.v\xbfjbi\xb7\x9c\x82v\xbf]QF\xfc\x11\x86v\xbfU\xa6\x85Yq,w\xbf\x9c\xfe\x18\xdf\xf8\xd7w\xbfB\xb1\x03\xee\xfd\xaav\xbf\xd3I\xf9\x86\xd8\x8ev\xbf\'^\xd0]\xb3\xf6:\xbf\xa41g?\x1e\xc2@\xbf\xf6\x0e\xf2\x0fW\xbaD\xbf\xe7cJW\xd0|B\xbf\xff\x8d\x17au}E\xbf\xf7Bj^\x91\xac*\xbf31\xee\xbe\x9b\xa7-\xbf\xb4\xe6\x9d\x83\xcd\x01B\xbf\x01\x1b\xa7Om\xf4A\xbf\xc5v[/\x11\xbe<\xbfg\x06\xd3$\xbbH@\xbf\xd0\x11\xb1\xfd\xa0\x1c>\xbf\xd62\'\x11\x1a{A\xbf\x08G<\xcd\x9b]D\xbfh\xc2l\xd74d;\xbf\x91@\t^\x86\x16<?D5\xe0\xfdl\xd3-?\x16\x11\rK^u6?\x12\xfdY\xe5$Z\x15?\x0c\xc86y\xd3\x1f\x1d?J\xdf\xad\xcc\xe3~\x0e?\xda\x94\x16\x07\xf9.6?\xb1\x0f\xa5-\xbd\\#?#\xaa\x86\x8c\xa1\xd3(?\xd4f\n\x841\xfd@?\xda\xce\xb1\x83\xc7`5?\xb8\xa8\x150P\x014?\xb2\xfe\xb0\x1eQ\xbb1?\x97\xb7^\xdf\x1e\x009?C;q9\x86j.?\xee[\xdcL\x0f\x0e]\xbfD\xef\xe0\xc8;\xd9X\xbf\x8f\x9d\xe1\x98\xc4\xbd[\xbf\xc2\xb5\xe2\xf0\xb3\x93X\xbf\xc0\xe8\xf53\xbfrX\xbf\xc2r\x96\x11\xdeK^\xbf\xb0\xf8\x80\xfb\xb5\x03Z\xbfa\xf9>\xb5:\xb5Z\xbf\xa8\xd3:\xf7\xd5\xf5[\xbf\x0b3\xb9\x00\x1c\x8b]\xbf\x9cj0\xbc\x99\xea[\xbf\x81%\xf2@\xb6\x8d[\xbf\x7f\xadzE$\xfeY\xbf\xba\xf7\xcf1\xbf4\\\xbf\xd4\xf4C\xb9F\xebY\xbf\x18fG\x9f\xbdT\xce\xbegd%\xae\xc1}\x18?@\x87\x1c\xf7?\x140?\x92\x85\x02\xe7\xfc+\xc4\xbeT\xf5\xe7\xc9\xa5s\x18?d\xb0\x88\x91\x89;*?\xf8$NI\x11M\x18?\x7f\x14\x8b\x94\x92\xee\\?J\xd9gA(\xad0?\x14\xabm\xb0\xbe\xea3?:\x930k\xa1k1?bc\t\'E2.?\xdes\x88+\xb7`B?\xe8M\xd5\x96.J,?\x1d\x06\'I\x84\xba&?\xa37\xaf*\xa4\x97@?\xc2\xc8\xad]W\\9?\xd2\xe1#g\xa48C?`\xf4\xce\xa2\xf4\x94.?\\\\J\x87`\xe5\x81\xbfM,\xa0-\x0f\x9f\n?\xc3\x04:\xe8N\xcb\\?\xe5dl\xfa4\x9b\x1b?=%X\xf2\x94\xa7c\xbf\xe8A,\xa7\xbe\x00\x86\xbf\x08\xb2|,\xcd\x86B?\xe4i\xfcV\xf8\x07Q?\x8bI\xbd\xa7\x9a\x15Q?L\xe0p3r|U?&\xe5\xa8)t\xc8s?\xb6\xb5\x92\x92M\xf2\x98?\xe1w\xdc\xa9\xf9\xf1\x98?)\x1b\xb4\'\x8a\x07\x99?\xfd\x88\x88\x03\x10\xeb\x98?x3\x84\x9d\xe1\x04\x99?#Z2J\x06\x08\x99?j7\xb7\xf1\x1a\x08\x99?\xb6\xf3\xae\x0e\x98\n\x99?\x12\x0c\x8f\xf9a\n\x99?!\xd1L\xe3\xb8\x05\x99?\x05\x10\x1b\x12\xab\n\x99?9\x80\t\x12*\x05\x99?(\x9e\xf9Z;\x01\x99?\xc3-\x82\xcfu\x05\x99?\xfd\x16\x87#\xf9\x04\x99?`F\xe1\xb5\xc5\n\x1f?`\xc2\xac\xfcK\x058\xbfn\xec\x99@\xbb~!\xbf\x0c\x8a\x8f\x86\x06JA\xbf\x191\xb1\xc1\x02!T\xbf@7\x87#<s4?\x8a\x0f\xc6`\xfdy&?\'\x05\x05\xa6x\x03"\xbf!\x0ez|\xdaJ5\xbfNMWG\xfb\x8cJ\xbfo\xe6\xef\xe5\xb1\xb0\x11?{\x84oqo?\xf4\xbe\xaa\xeabe\xfd\xf9\xf3\xbe\xdfg1}\x90\x140?rcu\x1eEt??\xba3"i$\xe3%\xbf\xd2\x87Jp\x13\xbd4\xbfS\xde\xceB\x1c\xa96\xbf\x92\xdd9Bh]3\xbfT\x80nY$4\x14?\xa0\xcc\xd9\x83\xacCE\xbf?\x18\xd2\xd8\xc7!-\xbf\xe7\xea\xc9\xd3\xd3\x02\x19\xbf\xb5o`\xda\x05&-\xbfR\xf490\xcb\x00\x10?\xf9\x90\x07\xd0\xcd\xc13\xbf\x8e\xdd/\xff\xf5p*\xbfY@A>\xa8\xf58\xbf~\xdf\n*\xec\x86.\xbf\xe0\xb4\x19\xb9A\x91@\xbf2\xef\x9bx\x9f\x02J?\xfc\xf9\xfaSST\xff>\xac9\x84\xe1\x8e\xb0;?y\x12\x7f\xb7N\xcb \xbf9\xbf\x1d\x07\xf7\xf3b\xbf\x83\xc2\x88\xfa\x92,H?z\x93\x7f-\xdb\xb5>?\xf4\rm=\xa0\xbb+?\xd0\xc4$\xf6\t\x11\xfa>\xceuB\x98xx`\xbf$\x0c\x1f\xbe$sA?\xa8\x84O\xa2\xd3\xd5<?\x83\xc84rU4C?\xa4\xbb1\x8a\x86\x8bE?<^\x80N\xea\xd3[?E\x1ft\xf7\xda\xca\x17\xbf\x15P\xa3\xd9\x9b\xff=\xbf\xff\xd5\xaa\xe2K>,\xbf+\xa5\xec\xfd\xa9X6\xbf\xecn\xe0\t#\xf2F?\x17s\xc8\x9c\xd2\xa2^\xbf\xd7\x16N*\x08\x97A\xbfX\x96\x9cR\xd4\xd6:\xbf\xf5H\xce\xc6\x1d!F\xbf\x06\xfa\xff\xe6\x1cEU?\xddE\t`\xd0\xee:?\xf7VO\x00}\xdaB\xbfm\xb4\xfeb\x80\n\x18\xbfo%O\x85D\xafh\xbf{\x16b\xdb\x190B\xbfB\x03\xd5]\xe1~\x93?\xc7u\xcek\xa5\x9e\x93?u\x85z\xfd \x85\x93?\xba\xbe\xc0\x9f\xd2\x89\x93?~\xcd\\fZc\x93?/\x93\x075\xe4\x97\x93?u\xb1\xd3\xaa\x12\x8e\x93?\x99j\x10s\x87\x89\x93?\x0e`z\x1a\xc0\x88\x93?\xde\xd8\xd5^\xe2\x87\x93?Z\xfdn\xc0#\x8c\x93?P\x9dF\xb1\x8c\x83\x93?\xac\x88\xc8\xed\x91\x82\x93?\x10\xfd1\xa0\xc6\x84\x93?v.u\x94+\x84\x93?\xa4\x95\xab\x89\x01\x9e)?\xd0\x1a\x08\x8ct\x0e1\xbf\xdf"\xf9\x1c\xfa\x8b&\xbf\x1b\xea8C\xb3\xa42\xbf\xe8h\x9c\xbe\x8e?7\xbf\xa4BXM\x16Y;?Y\xda\xac7\xb1\xac!\xbf\xd9\x1b-\xf1/\x88.\xbf\x9cm\xe5{R\x8d%\xbfUq6\xb3\xf4\xb8!\xbf"G\x8c{\x1f\x1f"\xbf\x83\x8fY\x91\x1cW\'\xbf\xb0\x08\x07\x85FJ,\xbf\xb9U\x8d\x07q\xbf!\xbfo\xd47xe\x0c\x16?\xee\x7f\x1f\xe30\x1f)\xbf`9}E\xb6l@\xbfA\x90\xc1\xd4\xd0\xb3(\xbf\xc2\x1c\xa6\xd8P\x13G\xbf\x01\xec\xd7\xffV\x03`\xbf\xaa\xb6\x1e\xcf\x10D[?\x95\xb7\x1e\xab0(C\xbf\xda\xe7\x0b\\\xa5\xbf<\xbf|sxu\xc5t\x11?\xdd\xc5Fw\xf4W]\xbf9n\\\xe5\x945\xf0\xbeY\xae:\xb9\xce\xf8Q\xbf\x8c\x91h\xfb\xb6\xc6>\xbfZ\xcd\xe5\xd4(\x82J?\xfc\xc4\xcduQ|\xe7>\xf6\x0eR\x9c\x0c\xd3\xf4\xbe\xe50\xd3\x95\x07=,?\xeb\x1b\x8d|XM!?\xb8\xb8\xf1%*\xd2.?\xa6\xaa@\xfea,4?5\xb5\x1c\x0f*E6\xbf8G\xea\xfd\xff\xeb5?\xf0\xa8w\x9e}\xaa(?4\xd2\xb2\xd6Iu\x14\xbfT<\xd9\xde\xd7\xdb!?\x0f\x9a\xc7n\x11\x91!?\xd6\x87\xfbqN5\x1f?\xcb\xf2\xab\x80\x83\xd22?\x14\xe66\xcb\xd3\xeb(?\x1c5\xb2\x0c/D\x08?\xb7-\xac\x90J\x86A\xbf/\xc1\xcd\xf8\xbbQ,\xbf\x9b\xb0:\xc0\xb91@\xbf\xa6\xc8x\xdf\xc6\xea\x15\xbf\xf2\x9a0\xfc\xb7\xcf\x1a\xbf\xc2\x0f\x9b\xad8PJ\xbfzV\xb9\x7f\xe4\x92=\xbf\tVZ\xa4Fn<\xbf\xc9\x0c\xee"A\xb47\xbf\x06\xf7L1\x8c\x1f9\xbf@8\x9d\xad\x87.=\xbfC[[\xe4\x10`@\xbf:\xfd_4j\xa91\xbf\xa8\t\x8b~\xb2#B\xbf\xc72\xc9\xcd\xb6\xda<\xbf\xc6`\x81z\xa8\xdf??D\xf7O\x9ae\x9f>?E\xf9x6o58?O\xfd;\xf5k\xc8<?\xfc\x12\xd5\x0b\x93\xbd8?\x8d\xb3A#r\x94:?]\xcd\x98l\xf2 U?=oi\xad\xd7dE?\n\xa2\xbfB;n\x14?\xaf\xfa|\x06\nX]?a\xef\xa7\x1aY\xd6:\xbfq\xb0\x1e\xa0?\x14z?Mc\x1f\x87gF9?\xee\x97\x9c\xd4+bZ?\xac\xcb\x05/\xaa.0?D\xfb\x80\xbbC`A\xbf\xda\\K\xadw\xabH\xbf\x90\xf2<xy\xe0G\xbfI\xb2\xa9\xbb\x8c\x91P\xbfz;\xec\x8b\x99\x0bI\xbf\xff*\xdf\x10\xa2\xdd>\xbf\t\xec\xe8Hn\xe9F\xbf\x10\xdb\xf2m\x95\xd0R\xbf&\x04\xfe\xfb\xc5\x8eC\xbf\xbf!k5\xcd\xc3F\xbf\xeb\xdf\x1c}\xe2\xc5H\xbft\x04xXT29\xbf\x0e\x8b\xd8\xdc\x82\tG\xbf6\xdb\xad%r\x9de\xbf\xb8\x1d\xeb\x0b\xab\\C\xbf\x07\x0c\xf2>\xc7\xe5\x85?\x86\x13f\xadnK\x86?\x88q`\xb9\'D\x86?s\xd6P/\xca\x0f\x86?;^\xb1Z\xe6q\x86?7\xab\xf6\xc4\x88\x15\x86?\xb2:cpD7\x87?,\x90\xdb\x0b\xcc\xe1\x85?\x82\xca\x1e_\x0b0\x86?3`[\xc4\x1aM\x86?\xe0\xf4\xd2\xa1\x16%\x86?!\xef\x84\x0f\xd4?\x86?~\xf7\xaf\xd0\x95>\x86?/\xac\xb57E\x96\x86?c\xec\xf4"\xff:\x86?z\x08\x80\nBtE\xbf\xea\xcf\xd0L,\x19I\xbf\xc4^\xf4\x86\x08\x8fD\xbfV\x85\xc3\xabH+Q\xbf\xff\xa8\xa3\xf1\xf6sI\xbfu\xb4\xf6\xdd\xa01D\xbf\xcc9\x92\'\x1a<K\xbf\x11\xcc\xf0\xb2~\x1eM\xbf\xa2\xa7\x8d\xe7\xe9\'A\xbf\x1e\x96\x87\xab\xfd\'L\xbfm\xc8\x87\xbei\xb7J\xbf\x9a\x08\xc1\xea\x0b\x9bD\xbf\x02k}\xff\x7f-G\xbf\xd0\xcaHe8\x91h\xbf4"/h\r0B\xbf\xba\xe7\xd1F\x82\x80j\xbf\x96V\x0cr4\xe8k\xbf\x8b\x12J\x10\x89ok\xbf\xe2\xf3^\xc5Mnp\xbf\xe4}\x015K!l\xbf:\xa6\xc7\x08\x0f\xf0i\xbf\xfd\x07\x06\x9f\xde\x1dk\xbf\xceb9\xfdp\xc0j\xbf\x03q#hS:l\xbfo\xe1,\x8f\xf9\x89m\xbf\x96\x98\x81\xce\x0beh\xbf\t\x8c_kM\xf4k\xbf\x9e\xbf\x19\xc8G\xcek\xbf\x1b\xce\x1cz:h\x91?\x91\xbe^#\xf9\xd4k\xbf\x7f-{\x01\xbc\xbas\xbf\x85\x9d\x00\x8c\x8d\rt\xbfqC\xa3\xf59\tt\xbfZ[\xa9\x80F\x88t\xbf\xb7\x849\xbc\xdc\x07t\xbf\xfb\x82\xa9\xeb(Et\xbf\xbd\x91\xa8m\xcf\xdfs\xbf\x88RK\xb8M.s\xbf\xff\xc9n\xba\xcb\x05t\xbf\xcdf=\xb0U\x0ft\xbf0\x91[\xb8PXs\xbfZ(\x9a\x80Q0t\xbfI\xa7\xa4||\xdfs\xbf}`\xa3\x1e\x9a\xc0u\xbf\x19c\xad9\xeb\x06t\xbf\x8d\xdb\xb8L\x85\xc1C?\xfaq\x08&G\xbe5\xbf\xae\xe0K\xa5\xcf\xc3&?\x19\x95\x89\xf2\xd8\xc9I\xbf>"\xd5\x17\xc5Z,\xbf\xfc\xcb\xdb\xb7\x87\t>?\xde7\xc0\xfc/\xc72\xbf\xdc\xd0Wv\x90\x159?\x033W\xcb\x02\xb8#?)$\xd6\xe3\xee\xb8A\xbf\x10\xc7)4\x00\xdb4\xbf\xd5m~\x82\x07\x99\x14\xbf\r\xae}m\xcb\x8b\x1a\xbf\xc3\xa1\xf9#\x0b\x0bp\xbf(\x00\t\x9a\xccU2?\xfeb\xa4\xea\x00\xb2\x06?\xc4?\x0b\xd8\x8aH\x10\xbf\xae"\xb3Pl\x86\r?;S\xe583\'D\xbf\x14G\xf7\xf7,\x9a\x0f\xbf\x0e-\xb6\xf8\x1d\xa4??Km\x95\xc1\xcb89\xbf\\\xae\x0f2.\xf0!\xbf\x97\n\xdf\x7f\x04\xdf-?q\xd8\x1arD(A\xbf\x88}U\x0c\xfeJ$\xbf\xcbf#\xfd\xe0&"?`\xbd\xa8\'`\x95\xe5>\xa1__\x8a\x15Mv\xbf\xcb9\xb8\x01\xb0N/?A.\x9b\xeb$^\xf7\xbf\x86\x00\xc0\' t\xf7\xbf\x94P\xc5\xbbck\xf7\xbf\xda.\xa5\x0c\xf2c\xf7\xbf\xf4\xcff\xc6\x8eg\xf7\xbf-\',\xb1jh\xf7\xbfT\xa0\xbf\xce\x7fe\xf7\xbf\t?\xa4\xa2\xd2b\xf7\xbf\xe7\xa6\xda\xf9\xffz\xf7\xbf\x83\x97\xbb3\x8dk\xf7\xbf\x8b\x9bD\x0bce\xf7\xbfc\x92Qm\x9db\xf7\xbf\xb0"i\x04Oj\xf7\xbfj\x16\xd3$\x96m\xf7\xbf\xa3\xfb\xc5\xe6\x1ek\xf7\xbf\x8f>\xd4\x19\x1aCD?\xee8\xbf\xe8G\xa9\'?&\x8c\\\x12|F4?\xfd\xaa\xb2\xdf,\xd3H\xbf\xa0\xb5\xde\xef\x97=1?\xc1<\'S\x81\'[?\x98\xdd\x98\xa5b4\x1a?\x85G\x9bc\xfa\xf7A?m\xbf\xbd]\xa9\xbf(?5\xfd\x0e4\x11q8\xbf\xc3\x15\x1c}\xa2VC?\x964d\xcf\xd9]4?Z8\xbf\x88\x14h\x11?zq\x99x}\xf2\x13\xbf\x82\xc2\xda\x12\x95c=?\xe6\x83.\xa8\xc2fB\xbf\x85lh\xc9\xe0D\x0f?\x1eS\x8eC\xfd\\?\xbf\xbb1\xe1\x8a7[J?\x00\xc4\x0bI\x98I&\xbf\x97\xfa\xa1\xe4\x11\x96F\xbf?J7M\x96\xf73\xbfA\x19\xfa\xc47^\x15?!xwY\xcd]=\xbf\x97\xc7\xd7d=**\xbf}\xd4!\x9bW|!\xbf\xe9l\xee\x7f\xff\xf08\xbf\xfc\xdfN\xcb\xa0\xf33\xbf\xa3\xa0\xa2\x80\xdfJ\x86?j\x80q\x07D\x14>\xbf8\xd0B\xa3\x04\x990\xbf\xcb\x11VPt\x1e/?\xed\x9e\xbb;_\x00\x0b\xbf"\xcf\xfd\xcc\x90lN?=\xd2B\x92j9)?\xd3\xd1V%\x91\xac/\xbf\x90\x17L\xaf+d"?as\xb7\xc9\xf7\x126?\xbfw\xb4\xd6\xde@\xe9\xbe+,\x1d{%\xad2?Y\x93\xe0\xd0\xf3\xc8\'?V[\x03p<W\xec\xbej\xb7\x96\xb8\xc65\x10?\xf1\xca`)\tlq?K`yLS%!\xbf\xac\x18y\x81o\x91\x13?\x9d\x12PT\xedxF?g\x9bO\x86\x12\x82B?M\xd6\x15z\x9dOQ?/\x7f\xe8\xd4\x95\\G?\x88\xda`\xc3\xf9\xecA?\xecA8Or\xd1C?\xda\x1f6\x12"tR?\r\xef\xd1\xbf\xa3\xbcB?CA\x01\x93\xee\x85G?\xb6P\x9b(\x8eKC?\t\x850jg\xe0C?\x99e\x19\xb7\x12\xcfC?P\xc6q<\xaf\x17k?]\xf5;\xa6>\xc5A?\xd4\xc2./\xa2\xac6\xbfM\xba\x19\xf3\x96\x92=\xbf\x01\xd2\xd6\xe2\x9a\x90<\xbfH[\xafs.eG\xbf\xb7N\x88\x06\x89\xc7A\xbfT:\x9e\x9f\xa4\xf87\xbfI\xa9\xad\xd9\x15\xc3E\xbf\xafK]\x0e-\x88?\xbf!Be\xffmk6\xbfY\xc6\xae\x04\x8d\x17M\xbf1\x19\xe2\x12!uD\xbf\x82)\x91e\xb5\x1d[\xbf\xb5\xdblI\x15`@\xbf\xb8j\x1c\xd0\xc9\x7f\\\xbf3\xf2hT\x06\\1\xbf\xa8\xfbA\xce\xd6\x1dV?\x7fw.L\xe5\xd8U?s\r\x00\xe9\x8f\xafV?\xee\xaaB\xb7\xdf\rG?\xb7\x08\xf3\xb4?\xb2V?\xb4\x03U\x14\xf9\xb4T?\xe9\xa6\xed\x07\n\xbdW?\xa5.\xd7\xf120W?\x11\x1c\x12oe\x18V?\t\xca\x99\xbe\x8beW?x\xfb\x92ii\x85V?\xa8\x9e\xdc\x8a\xb4\x10X?Q\xcd\xb8\xbb\xb2\xceU?\xcb\r$S\xc3\xf0e?\xe5vHcD}U?\xf9\xa6\xebU\xa2\xcc5\xbf\x9b/d\x10\'\x1a<\xbf\xda\xca\xc4%\xab\x192\xbf\xfc\xc3a\xc9%40\xbf\x90\x11\xe7\xcd\x10G1\xbf\xfeG,%\xb9\xad#\xbf\x10\xc8\xb6\x15\xa4HC\xbf\xb3Q\xaa\x06\xbek6\xbf\xa8\x98\xae\x11\xbf\xf01\xbf\xfa\x02%\x9a\xdfm5\xbf(9\xe1\x90b:9\xbf\xa0\xf8\x1b\x7f@\x887\xbfJ\xf7z*\xd0\xcc6\xbf \x196\x9b@h5\xbfk\xe7\xbc\x1b\xba29\xbf\x9b\xa1\xb0&7\x0fn\xbfl\xb3\x85\xe00\xd5m\xbfx\x99\x01,\xa9\rm\xbfg\x8b"rj\xf5m\xbf\x88_\xea\x88c\x00i\xbfz\xa4*\xbd\xc9\x8fn\xbf\xe1\xe6v\x1f\xcf\xeej\xbf(^\r\xcc\x17\x03n\xbf\xb5\x0eA\xb5\xce\xaao\xbfM\xc3\xca\xad\xcc\x05o\xbfB\xc3\x8ey3\x8cm\xbf\xc1\xd5\xf6\xa1\xa6\xf3]\xbfRH\xda\xfc\xe2\x8fl\xbf"1\xb9QF\to\xbf\xa6C}Z\x10\xbco\xbf\xacGW!\x15M`?1\x84X\xdd\xd0!`?H \xbe\x94B\xcd_?n\xb8D\xd2\xa8c`?\xbb\xf3\xa6h\xb4\xbf`?@\x0eu\'\xe9)`?\xa6\xbd\x0c\x1b\x16\x99`?hF\x15\x82_\xd4`?Us\xbe\x81\xcd"`?\xed\xcal\x9f0\x8d`?qY\x80P6W`?l\xbe\xb9\xa3tu`?Q\x93\x9a\x047\xb7`??\xa0\xc1y\xe5w`?,\xec\xa7Lc\xc4`?\xab|S\x11x\x99P\xbf\xa2\xde\xa7\xa9\xdf\xc5[\xbf\x90\xe4\x9d\x84\xb5\x80\\\xbfR\xa6\xd4\x07rSJ\xbf\xa0S&\xb5\'\x97H\xbf\xf6\xe4No`\tQ\xbf4E\xce$@\xa1Q\xbf?\xf3n\xfd\xe9\x1eT\xbf\x0fA\xff\x1dT\xbcP\xbfH\xc8\xf3/]\xc9S\xbf\xef>l\xc1\xc9\tM\xbf\xce_\xf4\xefZRN\xbf\r\xf4\x19\xf6saV\xbf\xd4s\xd8;1\x81O\xbf\xb2(\x05xGlR\xbf\xc26\xb5\xb0"\x0fV?\x94xQ\tG\xebN?\x9d\xab\x93xd\x8bV?Qy\xcb\xdf.MO?"NgU\x8fhL?\xfe\\5J\x03\xe9Y?hi\xd1]j\xf7T?\xba\x12\xfe\x17\xd5\xc4Q?2>\xa75\x9fdQ?\xa8\x82\xba9\xe5JX?\x85zY\xfc\x91\xc5U?`\xb8\x0f\xa2\xbc\x85W?\xa5\xc9B\xc9\x01\x05Y?v\x96\x8d\xabG\xffT?\xe8\tE\'\x85\x15U?\x1eZ\xc3\xe5Y\x91T\xbf\xbfM\xberXtH\xbfs\x92L5m\xd0L\xbf`C\xa4\xaf\x853N\xbf\x1e[\xdf[\xa3\xb0H\xbf/&\xa3`u8N\xbfi\xef0\x07\xb7\x0cH\xbf\x820s\xb0\x98\rM\xbf\x19\x02\xb0\x92\x99\x1bP\xbf\x95f\xc5\xdc\xcc\xcdQ\xbfdcSv\xb5oL\xbfu\xf0\xe6\x9d\xabQM\xbf\xech\xc7I\x0c\x95H\xbf_\xb3\x13\xd2BzN\xbf\x83\xe3\xee&\xb8\x1cJ\xbfK3\x94\x01\xab\xcfW?\xf1\x92\xfc\xc1\xa2\x94[?\xd8%\xfe\xba\xd4\x9eY?\xaaR\xde\xfbv\x14\\?\xfedf\x04Z\x12\\?\xd44\xec\xe8\x9fv\\?\xb2\xa2\xaf\xfe\xc9\xd8Y?\xc3\x17&\xc6\xb4\x92X?\x01mk\xe5\x00\xd1W?FqQ\xa3\xa8<X?\xc7J\x81\xa7\xe8\xd2X?\xdf\xfdL\x10\xda\xc7V?P\xa78<\x13\xd3Y?\xd7i$\x91\xfexX?\xd3\x08\x183\x18}W?Ihe\xf2.0Q\xbf\xd48\x13E|\xeaK\xbfN\xd4Q\x9c\xe9QK\xbf\xb4%B\x92\xa4FH\xbf:\t\xc1E\xb8\xa0I\xbf\xd0\x93\xc1\xf1\x98\x92K\xbf{t\xf4\xb4\xe3%E\xbf\xe1"\x8c\xcd\x8d[J\xbf\xa4d5\xad\x95&G\xbf\xfc\xba\xbeMF\x1eN\xbfe\xd7Q\x9a\xdf,K\xbf\x8a\'4\xc3\xb3}M\xbf\xfdUY\xabN\x91I\xbf\xe1y\x9d\x99\xf6\xa2L\xbf,\xca\xa6x\xeb.M\xbf\xdc\x17\xa8\xb4\x95\x19r?\xa8Z\xdc\xe2]\x92o?\xbf\x06l\x90\xd9^q?\x0f\xe8\xddP\x07\xabn?]\xb6\x89\xcf\xa7Qn?\tt\x82\x04L\x8cp?p\x05\xbc\x99\xeb\x8en?\x9cN\x84\r\x0e\x93o?D\x8a\xd7\x96\x1b\xf9p?\x98lH\x1fT`r?L\xcc2B\x14%q?\xcf}AB\x08\xc3p?\x8e\xa6\x9ca\xe4\x85p?"w\xeat\xcf=q?\xf2\x1e\xb8Q\x9f\x83p?\x81\xaf\x05\xef\xe2\x182\xbfY\xc8\x1a\xb3\x9a\x1a\x1e\xbfV\xd75\xa0\n\xbf1\xbf\xbfS?\xc1_\xa5\x1d\xbf\xe4\xa5\xa7D\x1e\xf91\xbf\x91\xf1\x8a\xae\xce\xed\xdc>\x9cE\xd2\xfd(\xc2?\xbf\x1d\xf9\xa4K#\x034\xbfb\x01$\xc0\xd6W\x15\xbf\n\xf8\xba\x16sy:\xbf\x02\xa9q\xd6\x96\xc8(\xbf\xf7\x0b\x8d\xdf\x12\xa8\x1c\xbfn_\x07SP\x882\xbfrV~\xd4R\xe2*\xbf\xc5#\x0b\xb9\xdeV\x17\xbf\xdd\x01:\xb2\x06SL?K\xae\xca\xa1\xa8\x83T?\x93\x10\xc5v=WL?0PIp\xa6\xb5Q?\x0c\x8d\x1b\xc6\xaa\xa7Y?+\xfc\xaa\x8c\xe5\xccJ?\x176e\xf3\xc7\xc7L?q\xd7ra\x8f-I?\'\xcf\xad\xb7\xef\x07H?\x82\x97Jt\x8dkI?2\xa4D\x88C\x9eI?\x08\xd8AmC\x9aH?5\xc8\xfef\xb7\x9cN?X\xecDdv\x81J?\x93Vf\x9bR\xd5M?[0\x02-\x9c\xe4\x94\xbfs\xd1\x06\xa2\xfd\x02\x93\xbf\xa0\xec\xf6\xf4\x12\xcf\x92\xbfZ\xc1\x18-\xda\xbd\x92\xbf\xcd\xb0\xc2\xa2*2\x92\xbf\xc4\xab\x9c\x8a\xfb\xd4\x92\xbfg\xe4\xf3\xc2\xecO\x92\xbfju6g5\xb9\x92\xbf\x81\xe3\xcbI\xfer\x92\xbf\xe7\x91_A[\xae\x92\xbf\xdf 8\xcd\xe3\xa2\x92\xbf\xd7M1a\xaeW\x92\xbfI\x04\xc6\xdc\x9f\xcf\x92\xbf\x9f\\\xfc\xff^\xa4\x92\xbf`\xda\xe8gk\xbb\x92\xbf"\x88\xa0\xd3q\x17P\xbf_\xb4\x1c\x08\xfa*S\xbf\xb8?\xcb\nG\xbcM\xbf\x05\x03]*y\x98Q\xbf\xbb\xdf0\x91w\xa4g\xbf\x82\xd3\xc4\xe8\xb6\'M\xbf\xf7\xd8oB\xfa\xb2`\xbf7y\xb0\xf8\x9atP\xbf\x85-\xa4\xa6\xd78U\xbf\xb7-r\x15.SD\xbf\xf6\xa6G\xcfr9O\xbf\xcdK\xe3\xdb5I7\xbf\xca\xa38}\x90\xfcV\xbfNk\x10\xe2\x8b8P\xbf\x1c@:qW\xe2T\xbfA\xef\xd4U\xbb1B\xbf\xeb\n-\xe4\x15zG\xbf\xdef\x0et\xbanE\xbf#\xd3\x0b\x01\xf6\xb8H\xbfBn\x08i\x12rK\xbfX\x85X\xe6]kD\xbf\x15\x08\xdc%\x03\xbbn\xbfM;\xce\xd3&YG\xbf\x8a\xc1\x0fn\x8c\xa4E\xbf\x05\\r\x93\x05\xb8B\xbf`\x93\xc5\x06\x88\xc7E\xbf9\x1fBC\xee4E\xbfF\xeb\x1cvv\x01G\xbf$\xb2\x9b\x95\x14+E\xbf\xa9=\xa8\x95\x1d\x8fF\xbf\x82\xe4XN\xeb.7?\x19\xa3\x95\xc2\x86M=?\xb0\x98;\x1c\xf7yG?\xfc\xc6q\x92\xb2@4?\x91\x0f\xd3\xb9\xc9D5?$\x02c\xd0\xc6\x12>?\x12\xd7U\xb2\xa5\xb8<?\xdf.\xaa&>\xd97?\x81\xa2@\xae\xe4\xa44?Ll\x0b\x1b\xf2\xe1C?{\xb0\x168\xdf\x14=?\xd3\x8e4\x19\x1d\xd2>?\x8ed\xb9\xe0\xf6\x93A?3\xc3\x9d\x10?L=?\x83#\xdcbJmB?\xdbQ\xf0\xc3Z\xf9[\xbf\x03\xac\xa8\n!\xd4Q?^UQ42\x90Q?\xa3\x92k\xfa\xf8\x0eS?L\xf7\x1b\xcf\x99DQ?\x8bp\xc2\x10\x80gQ?\xc8\xdba^\xfeiR?\x9e\xee\xbe\xa3~?M?\x90J\x98IWwP?5\xb5G\xb4j\xfbP?T\xb0%N\x9f\xafQ?+xV\xe7P\tR?\x0b\xa7z9d\x85Q?\x07\xecB\xab\xe0\x90R?\x1e\xb0tSI\xb5B?\x00\x04\x06\x96\xf6\xa6U\xbfzR4\xbd\xd6\x19W\xbf\xa9NC\x9a\xc6\xa8U\xbf\xd8y@T>cZ\xbf\xd1\xee!\xa89<X\xbf>B$V)2Y\xbf\xd8+B\xedB\xdcW\xbf__\xd95\xb0\xb7V\xbf\xfe\xbc\xfa\xc9$\x11W\xbf\x9bw\xc4X\x93\xc4T\xbf\xde~b\x1f\x94\xd3T\xbf\r\xd5\x91b\xbb\xacV\xbf\xf7\xe9\x81\xe4}&W\xbfq\xc3a\xc7\xecxW\xbfA\x10\xa4\xb6\x88\xa3W\xbfd\\\xda\x01\x9d\xef"?f]Y\x16\xc1\x82H\xbf\xbe\xbe%U\x08\xe7C\xbf\xa5\x02\xa4\xdf\xba\xf5I\xbf\xb6\xda\x9em\x85\xa9J\xbf4\xa08W\xecJD\xbf1I|~\xba\xb3G\xbf\xfb\x9f\xcfy*\xdeM\xbf\x9c\xd3U\xa0\xd4\x0bF\xbf\xad\xb3\x12\x9a-o=\xbf\xfe\x9c\xc5\x8eDaC\xbf3\xb2\x17T\r\x8bE\xbf\xe2\x069H\xe6hH\xbf4\xcd\xb7\xb8\xcd\x9dE\xbf\x8a!I}\xed\xf7A\xbf\x1an\xc9W&\xf6H?5#i/\xa1\xfc-\xbfp\xb7\x17\xed\xde\x99\xd9\xbe\xe2\x86]r\xd8\xa1(\xbf\xd4!4\xf6\x08\x12*\xbf\xac\xbcD\x92+\xd1\'?\x8e\x9c\x92\x11"2\x15\xbf0\x9c\xec\x13\xf0\x87/\xbf\xd0\xcb\x9eO\x05Q\xd3\xbe~\x8cS\x11\x82a\'?\x14t\x01\xdf\xd5\xe9\xfc\xbe\xac\xb4\x1e\x94\xfb0\xf5>\xff"\xb0\xe5\xa4\x7f \xbfTG\xf8#\x11~\xf2>\x0f`\xef\x84!\x952?J\xa2\xa3N\x11h\x08\xbf\xa6\xd9\xab\x0b)++\xbf\xce\xfc\x84\xc6\xcc\xd17?\xd2\xfd\x8f\xed\xd3\x036\xbf\x90\xb9H\x9es\xa30\xbf,(A\xde\x14gA?\x86\xe7\x1e\x180\x10\xe0\xbe\xe2\xb5\x7f\x15\xf3\xa60?D\x95\x84\xbf\x9f\x0c6?\xb0\xdc\x901\xa1;B?\xcer\xbawf\xbf7?\x1c\xd0\'\xa6\xdbl7?\x10j{4K\x9e\x0c?\xac\x86\xcd\xdd\x90\xd37?\xb90ul\xd0\xf0\x1b?\x12\xb9k\x86\xb0r:\xbf\x89\xa2o\x15\x10\x1cU?6[#\xb6\xdbm6?\xff\x9e\xcd3wl@?R\xad ]\xb2\x04C?jDF\x9f\x8aT%?\xf8[\x12\x13\x8bqI?=5\xd4v=j\x12\xbf\x03\x8d\x85\x8a\xf0\x9d2\xbf\xb5\xe9\xf9\xa3V\x960? \t\x11K1}\x19?\x8d\xce\xef_\x99\xb53?\xd5\xa0-g\xd6\xb2C?\x83Z<~\xc1\xb2"\xbf\xa6jA\xee\x05\xbf\xc8>\xfd\x85kI2-B\xbf,\\\xe4\x89\xd8\xe5\x1e?e$4T\r\r=\xbf\xcc\xabo7\xbe{!?\xacO}\x9e\xb2\x01+?\x9b/\x97\xd6\x95UE\xbfp\xb7\x95\xa1l\xbe\xf9\xbe\x1d\xf2\x8a\xc4;\xe2%\xbf\x0b\xa7\xcc\x81\xeef8\xbf\x1e\xe7\x03\xacvwL\xbf\xe6\xc9Jz\xd9\xbb@\xbf\x8aa!~Dk=\xbf\xafS\x8d\x7fB\x17-\xbf\xe0\xb5:\x07\x88&@\xbf\xf2I\xe1\x16\x93\xf85\xbf\xc6\xbd\xdc@\'l&?\xfa\x14<~\xe5#\x17\xbf\x91\xd9\xb5\xb1\x15\xec@\xbf\xef\xfa\x1bV\x87\xd7\x08?P\xf8\x04\xde\x05g\xfe\xbe\x14\x94\xef\x1b\x9d|A\xbf\x1d\xd2\xae\x7f\xbd\xc5+\xbf\xe1c\xe2\xfe\xa6H3\xbfK{\xd9\xbf\x83\x01A\xbfD\x1e\x02\rlQI\xbf\x9a3k\xf6\xda\xf7B\xbf\xfc\xbb\xce!\xf4\xee?\xbf\xb4\xf3\xdc"J\xec3\xbf\xdeH]\x82Q\xb8?\xbf>1\xeeQ\xd7\x805\xbf\xa2\xca\xa19\x18\xf7\xc8?\x1e;\x00\x96\rZ\xc9?J*B\x13\xf3!\xc9?\xe0\xdc\xed\xfb\x9ba\xc9?5",*\n`\xc9?i\n\xa8%\xe2\x0c\xc9?\xa6\xa4j@\xa7J\xc9?)\x7f\xae\x17\xdfG\xc9?\xaf\xae\xdb\x01\xb5\x1c\xc9??\xc8;\xea\xc9\xf0\xc8?]w\xaa\xd2\xba#\xc9?\xe9\x1aB\xcc\x0f*\xc9?\x96\xe2Yu\x81I\xc9?\xd0\xed\xdfCG\x1f\xc9?m\x97@\xc9\xc1)\xc9?"\xa6\x05B\x93!S\xbfQ\xaf\xbe\xfb\xe2f>\xbf\xc4\xdf8\xa9\x83\x95=\xbf@\x96Nj4m1\xbf}\x17:\x00\x13I\x1c\xbfIV\xe4\xa9\xe3\x01H\xbf\x9dd[\x97T\x92 \xbf\xea\xaeoy\x08\xfd:\xbf\xf4c4-\xd0\xafA\xbfa\xdelI\x83ZF\xbf\xfc\x0b\xdf\x8cM6?\xbfr\x89\xcaT\xb8\x012\xbf\xc3|?\x8e\xb8\xe1:\xbfD\xec<\x02\xc2m>\xbf\xe6\x84\x80\xe6\xe6\xefB\xbf\x95 \x19\x08\xc7\x94\x13\xbf\xa1\x84\x95|\xb6\xc5G?\x11\x9b\xbd\xa2@l6?\x04w_,\x16II?\xdb\x90(T}\xf4=?\xa2\x1bvu\xacb=?\x08y\x8d\xe7(\x93G?\xe4\x8b\xc9|\x97\xafF?\x06\xa2S5\x0f\x13D?\xcc,u\xb2\x8e\xea7?\xd2vr\xc7\x06\xceA?\xae\x86<\x8cxS<?\xc0m\xfa\xcd\xbb\xccD?VX\x0cj\xf7K@?\x9a\x1b&U\xcbIB?\xdfg$\xd1\xe3gu?\xfdc\x83\xdb\xe2\x86r?\xd9f]M\xa8qs?\x94\x9a\x01\xe5U\x17r?yp\x03\x08FSs?rNg\x89\xc6\xc5s?IT\xf6\xd1\xd7\xa1r?:\xcc\x96\x17\x1c\x8es?Sr\xb1\xd8P\x9cs?\xcf\x94\xe4\x11{\xb1s?\xc1d\x94\x95\xff\xe6r?\x86\xfb\xab\x93o\x85s?\xd9G\x8f\x8a7\x16t?4\x16)b\xa0:u?l\x1d\x8f\xcd\xab\x95s?\x11\xf1^"m\x1f\x81?\x9e=j\xe5\xb0X\x81? \xfe3V-Y\x81?\xcc\x8e[\xfa\x13Y\x81?H\xff\xd0\xd7_N\x81?+\x0c\x15L\xb4V\x81?\xa7\xd8\x9f\xcac\xfa\x80?\xefU\x93\xdc\xe0=\x81?\xde\x13t0\x99\xeb\x80?|\x8eL\xde\xf98\x82?\xa3\xd7\xa8\xd1\xb4q\x81?\xea\x80\x94\x9d\x00X\x81?\xabR\xb9\x13Iv\x81?\x81f+o\x857\x81?\x11\nL2\xf8\x1e\x81?\xd3\xac\xc9JBr\xd3?\xaf07\x83Gw\xd3?\x00p;gFw\xd3?\xb0\xa7\xac"Vq\xd3?\xcd\x8bU\xe1~r\xd3?\x03\xf6\xe5\xdb;\x85\xd3?\xd1\r\x0b6cp\xd3?\x9b\xb5\x92\x9cIr\xd3?\x9b\xaa\xab\xbe~u\xd3?\xaa\x9fi\x85\xcfm\xd3?\x9fA\xd0\x98Xh\xd3?0\xf5\x7f\xbf\xf9\x84\xd3?\xa5w{\x9c\xbbv\xd3?\x1d\xb9!\x8edt\xd3?\x94\xdb\xbc,[o\xd3?\xe5\x18;D\xf9\xfc\xd0?-9R\x95\x1e\xfa\xd0?L\xd6\x9b8U\xfe\xd0?\xec\x07p\x10\xe2\xf5\xd0?\xbb@9L]\xfa\xd0?\x07\xb9\x13\xb6X\xfa\xd0?\xad*\xeb\xe0\xff\xff\xd0?\xb5S\xf3\xd2\xf3\xff\xd0?O\xb6\x984\xbb\xff\xd0?\xa5,\xffL\x92\xfe\xd0?\x01\xb6\xa6\x17\x9f\xfe\xd0?\x9d\xb3\x99\xef\x10\x02\xd1?\\\xa7\x14J\xa1\xfc\xd0?7j$\xb3J\xfe\xd0?\xbbm\xafH\x89\xff\xd0?\xa6\x7f\xe3b\x05\xde8\xbf\xacK\x98\xa2\xd8\x17$\xbf\x8bP\x13\x17v\xd3@\xbf~\n\xab\xf6V\x90;\xbf\x15I\xf3\xa5\x145<\xbfr\x96\xe1A@V=\xbf\xd5F\x12\xd1\xcf\x83>\xbf\x08\x05\x08\xba\xcc\xde@\xbfQ$^Ox\xc6K\xbf\xe7\xda7\xd7\x93"D\xbf\xe4\x93\xeb\xc0\x0c\xc8B\xbfZn\x8f%\xc8\xc8\x00\xbfJ\xe0[h\xe3\xf0>\xbf\xaf\xb6%\xd4A\xe0A\xbf\x85\x9c\xdf;+\x07?\xbf\x83\xf4\x82\xddQ\xffr?\xd7[2]\x90+p?2\xe6\xe5A\x80\xb1r?/\xe2Ur8fp?\r\xef\xb3|%\xddo?\x1c>\xd8b\xa2\xa1r?\x10\xde.\xc7\r\xe9p?mN\xb4to\x1aq?i\xc8\xd7\x0c\x93lq?\xadi\xf9\xae\x03\xa6s?\xb04\xb7\xcd\x96\x8ar?[\xd7$~\xdd\xc0r?\xcbO\x93\x04\xf3Eq?\xa6\xd2\xfdN\xef)r?\xb2\xe2\xf0\xd9\x97\xdcq?\x86\xed\xb2I]\xc2\x9d\xbff\xe2\x07\xa2$\xa3\x9b\xbf\xb5\x84\xdfp\xc3\xe4\x9c\xbfu\xa1\xf0\xac\x04C\x9b\xbfq\x87\xa4e\xa5\x84\x9b\xbf\x86\xb3\r\xc6\xc3+\x9d\xbf\\7\xc5\xfb\x94\x13\x9c\xbf\xdeWD\x91\xb6(\x9c\xbf-\xc90:\x8a\xc7\x9c\xbf\xcf\x8e\x97A\xe5\xae\x9d\xbf#\x91\x0bm\xe4\xcc\x9c\xbf\x10\x9e.\x0f\xf0\xa8\x9c\xbf\x90)\xebC\xd3p\x9c\xbf\x17\xf4\xa7\x14b\xd4\x9c\xbf\x00l\x1b\xaa\xd7\xaf\x9c\xbf\xb2\xd7\xe5\xe2=\xc0\xb4\xbf8\xfc\xf0\xa0a\xc5\xb4\xbf\x9b\xce\xe5\xf1{\xbf\xb4\xbfWH\xb9Z\xe9\xc7\xb4\xbf\xee\xdd\x95A\xd8\xc3\xb4\xbf\xd7g\xf1\x1b\x83\xc1\xb4\xbf\xdaq\xdbZY\xc0\xb4\xbf3\r\x8a\xb6\xb3\xbf\xb4\xbfa[*\xebJ\xbf\xb4\xbf\x07\x9b\xf1\xc1\xbb\xc1\xb4\xbf\x97+\x89x4\xc0\xb4\xbf\xcc\xdb%\xb7}\xc0\xb4\xbf\x9d\x90\xe6\x93I\xbb\xb4\xbf)b\x7fH7\xc7\xb4\xbf\xf9\xa0\x97@\xd8\xbe\xb4\xbf\xbb\xcaa\x84h5^\xbf\xe9\xe1pz\xe2\xc5_\xbf\xa4\xe5\xf85(\xb9^\xbf\xfe\xc6\x8f5\x071_\xbf\x99\x0c*\x16\xdb\x97_\xbf\x9f\xa8\xc2\rHV^\xbf\x8eE$\xbeY\xa1_\xbf\xcb$\x99\xdc\xacP_\xbfU!\x84\x15\xe2\xf5^\xbf\x84\nx\xcfu\x0c^\xbf+M\x13\xb8P\xc4^\xbfR\x8c\x1a\xa6\x15\x93^\xbf\xab>\x90\xa3\xe9T_\xbf\xa3\xfbT\xc1^\xc3^\xbf\xf9\xac\xe9X-\x05_\xbf\xd2z\xa2\x0f\x90f!\xbf\xe28\x86w\x1c\x82\n\xbfk,\xbf\xa2\x15\xe1(\xbf\x00X\x17@Fc\x10\xbf\xbf\xc7\xf3r\xbf\xd3 \xbf\xaep\xb7[\x12\xb5!\xbf\xeb\x89W\x87\xb7\x022\xbf\xe7\xfc\xe1 P\xc6/\xbf\xc5@\xc4\x15\x8cz>\xbfBHf\xb94\x9e\x10\xbf3\xc2\x9a\xfd\xc3Q)\xbfx\xa7\xcd0U\x01%\xbf\x9fL\xb8(\xca9.\xbf\xb2c\x1d\xb8O6*\xbf\x94$,\xb1:\xcb"\xbfn\x18-B\x07\xfb7? \x84\x0f\xa6\n\xf99?gf2\xbawP\xfd\xbev\xb5\x15\xcb\xce\xed1?\xf6\x0f\xa1<\xf1H(?\xe5\xad\xa2\xdf8\x02F?\x84&ax\x93\xcf ?\xfe\x18H\x7fUd0?&\xe3\xd6@\xe6\x0c;?\x87\xd1\x8c\x1e%\xd15?\xf2~\x9c\xb56?+?\xd6f\x98W\x94\x0bO\xbfD\x19@qM"+?\x9d_\xc1\'\xf6e9?\x9f\x96\xac1\xf2\xf34?\x88\xca\x9d\xc8\xbc`\x8f\xbf\x83{Hp1\x9b\x8d\xbf\x0b\t\\|<\x8e\x81\xbf8\xe7\xd0\xd7\xf2T\x8c\xbf\xf6\x9e;\xc9\xae\xf5\x8b\xbf\xef\xf7\x17\x92\x8c"\x90\xbf\xed\xf271:W\x85\xbf\xe6W\xcfL\x07\xb0\x8c\xbfOe\xa9\xb4\xd1y\x93\xbf`\xe6Q\xb1\xe0\x8c\x83\xbf\x9dB\xfbz\x9cc\x86\xbfy\xcd\xcbk\x9a\xc4\x97?m\xe8\x1d\xd3\x9c\xee\x85\xbf\xe5\x1dCh\xc6\xe0\x8f\xbf\xc0\xf6\x8b\xec-q\x8f\xbfC\xda\x1a\r\xbftn\xbf\xb8\x06Q \xb6(r\xbf\xcb\x97\xfd\xc1b\xafp\xbfZQ\xb2\xcdb\xf9r\xbf\xba\xfd\xcea\x17Xr\xbf\xf1l\xa9\xcf\xb3?p\xbfp%\x15\xd42Gr\xbf\x8e\xffg\x80;\xf1p\xbf\x90I\xf6C\xf1ru\xbf\nR`\x1bE\xb6n\xbf\xc5\x03\xbeU\xd1(p\xbfV\xe2Z.\xd8\xf7s\xbfC\xfe<\xc6\xaa\xc5r\xbfA\x9a\x10\xa4I;p\xbf\xb1\x93Q\x9d\x0e{p\xbf"O`\x9b+7\xa9?\xaa\x1e\xba\xc9\n\xf5\xa7?`\xda\xbf\x0e\x14\xba\xa8?\x13\xe2\xfc\x17\x13\xa1\xa7?i\xd9\xa1a\\\xac\xa7?R\x87\xd4\xe00\xd0\xa8?\x129@\xa7^O\xa8?l\xd9\x18u}3\xa8?]\xf8\xf0\xc0\x08\x99\xa8?\x8f\x06\x7f\x05\\W\xa9?+\x1esKh\xb0\xa8?\xeew\xc3\xa9\x0e4\xa8?\xc0\xc1\xc5s\xb3\xbd\xa8?\xdf\x8d\xef\xa4^\xb7\xa8?CC\x0c\x9e\xd3\x97\xa8?\xac\xc3m\\\xf0\xb7H?CA\xc2\x8b\x8c\xc1A?\xb8.\x97\xe5\x7fin?\x8f\xa0\xc0\xd8}\xe6V?\x12\x9f\x838\x8d\xf2V?NK9\xcbsq6?,\xe9]\xd1\xca\xe8e?U\xa1|\x88\xbd6T?\x8d\xd8Tn=\xfaF\xbf\x86\xf53\xaf\xe5\x14f?\x01N\x9f\x1c\x94\xd7c??L\xe3\xf1\xaf\x00\x90?]\\l\x0f\x03\xc4d?|\xe5\r\xb7\x8b>P?\x87\xb4[m\t\xe4L?\x15Z\xf3\xb35\x94\x87\xbf\xe4B\x1d\xb3\xbc\xee\x84\xbfP+Y7\x07-\x86\xbfOx\xb4\xee_\xe7\x84\xbfx\x970\x83\xee\x94\x84\xbfz\xfd\xdc\xdd\xd1\xad\x86\xbf\x1c\xd7y-\xcc]\x85\xbf\x9c\x8a\x00\xb7\xdc\xfb\x85\xbf\xa5\xd4z\x9c\xb6\x7f\x86\xbf\x8c\xc61\x99\xab\x8f\x87\xbf\x08aY?^\x8f\x86\xbf\x15\xdfG\x86\x928\x86\xbf \x83\xa4\xe7\x9be\x85\xbfaOf\xfe\xbcC\x86\xbf\xcb\xfb7(\x93C\x86\xbf\x8c\x05\xb9@\xd2\x05h?\x07*\x0c\xb2:\ri?V\xf0\nm\xf2\x00m?\xed&\xbc7t\xcdj?\x89k\x8f$V\xacj?\x08,\x85\xc8\x11"f?O?\x1f,\x92\x90k?1\xf14\xcb\xa0\xaej?(\xce\x05Z\xd2*i?\xe0\x17\xffh\x90\x08k?i\xf4\xfb\x11\x0e\xefj?@\xdb\x87\xfe\x02\xe0r?Jn\x12v:6k?c\xc9\xf4rZ\xc6i?>d\xe1$\xc0\xcdi?\x1b\xb2\x12iP\xb70?\xa4\xbbO0\xcaw4\xbf\xc6\xdc\xb0r:d\x12\xbf\xe3\x02;\xfd\xda\r1\xbf\xf1(i\xff\xc0\xb34\xbf\x85\xc0\x00H\x85\xbf#?\xee\xee#^\n\xe87\xbf\xb4H%,\xf3\xcc\'\xbf\xd0\xe1[(~,\xbf>\xa8\x95\xe6\x82\xac\xdf\xe9>\xc4\xdc\xf9\xba\xddw\x14\xbf0\xd9\x1c\x19\'\xe4\xd7>\x02k\xb0\x15TQ3\xbf\x95\xf5\xfd\xf09r\xf7\xbeR\xbc\xa1SVg#\xbf\xbe"\xdf\xc7\xe2\x85n\xbf\x8f\xcb$4\x00\xabk\xbf\xab?\x9am\x156m\xbf\xc1>p*\x8d\x03l\xbf\xdb\xba\xf0\xbb\x148k\xbf\xd7\xf4\xb5r\xed\xbdo\xbf\x0e\x02\xea\xa6\x99\x8bk\xbfY\x82\x0c\xd4(\rk\xbf\xe5\xfdx\x83\xd20k\xbf\xa7\xc0\xd7\xae\x89\xa0m\xbf\x1b\xeb3\x84]$m\xbf:\xf6A\xc9\x15nq\xbfIP\x00\x83\x8c\xd3l\xbfjx\xcb~`bl\xbfd\x88=\xb3\xee\x15l\xbf\xa4\x07\xd5bFN^?\x9au\xe0G\x8d.V?\\\xec\xe9!\xc0jR?\xaa\xdb\xb7\x8d\xc4\xbaV?\xe4Z}M\xf6\xa7U?y\x04?\x8a\xf8\x17`?\xefB\x0e\x83\xc9\x94U?o\xe2\xc8\x8c\xd9\x1cV?\xe9\xe6\xe8\x03p\x84Z?\xe6\xef\xa2x\xc3iU?3B\xe5\xbd\xff<U?\xecH\x03\xaa:\x0be?\x91\xe2\x12\x97$\xf9U?\x9a)@7R|W?z\xe2\x99\xa3q\x9aV?+\x96e\n\x14\xdfL\xbf\xdaI\x07\x8a&\x02"?\x150!\xe3y\xafC\xbf\xc6j(\xbayD\x0e\xbf\xc8>\xc6\x18\x14\xe8\xe1\xbe$\xd4m6\xb4\x92H\xbfz^\x1f-\xb0k8\xbf\x08\x80\x1b\xfb\xc9m8\xbf\x96V\x16\x92;\xa5G\xbfs\x9cU\xf03\xa0G\xbf\xb9K2\xed7\xb9C\xbf\xfdlf~\xc4-A\xbf\x98\xb1\xc1\x0e\xc5\xb2?\xbf\xe1\xfa\x03\x80)\xacC\xbfE|vf\x11\x9cG\xbfwP\x06\x7f\xf7\x84I\xbf\x8335\xf4\x955=\xbf\xe8\x02+ItkI\xbf\xcc\x98\xa0A(x=\xbf$O\xe71\x90\xff;\xbfo\x19\xd7\t!\x86H\xbf\xdc0\' \x83QD\xbf?\xc6:\xf4P\xc2H\xbf\x88\xd6\xa1y\xf4*H\xbf\x0fJ\xef\xc9\xd4\xc0K\xbf\xa3~\x1c\xa7_\xa5I\xbf\xd1\xd3\xb9\xf5\'MK\xbf\xcb@\xc5r!\x07D\xbf\x97\xe3\n\x13\xcaNF\xbf\xf2\x0e\x16-\x0c\x8eF\xbf\x97;\x1b\rh\xe6D?\xb1\xf6W\x81\x13~M?tFM\x853\x82J?E\x01\xef\x1cF\xf7M?\xcfG\x8a1\xefCP?{\x1a\x99\x11\xe4qG?]\xed\x0e\x8a\x89\x87L?^d\x18\xfb~\x19@?\xba\xf8\x84\xd4\xf87J?\xb8)\xda\x93\xfd\x04F?=M\xff\x0f\xe5\xaa5?rE\x8e\xc3i`I?\xa7<&Z\x1e+K?p0q\xda\xfe\x9cH?{KK\x18o\xd0I?\xe0\xe6)\x1c\x84P\xea?\xea\xe7\xe9\xc3\x9ah\xea?.AT_v9\xea?r\x1c\x9e@uD\xea?U;\xd8\x0e\xbcB\xea?\xf5*m8\x9b~\xea?\x9cr|;k\n\xea?\xea\x196\xfa\x0f)\xea?\x15\xb8piBO\xea?H\x19\x89Qk#\xea?d\xd2\x00X\x9c\x06\xea?\xd8\xe19\x99x\x03\xea?S\n\x96E\xb42\xea?g\xca\t{s\xa6\xe9?q\x88M\x8f\xf3\'\xea?\xa1\x11\xcd0\xed\xe4.\xbf\n9\x80\xac;\xfd\x00\xbf\x8c\x00\xf4\xd1\xe0O+\xbf\xd0i\x9d\x17r\x0c\x13\xbftF\xa5Qp\x8a \xbf\xf4\xbau\xc1nq4\xbf\x1e:Y\x86\x86\x89#\xbf\xe8V\x97\xa9n~\x1e\xbf0]\\\x18H\xa66\xbf\x9c6\x95{~P=\xbf\n\xf4\xf3\xa4\xb8\xb3&\xbf\xe6!~\x8c\xe7]<\xbf\xc2\x06Jd\xadb2\xbf\x0f\x84\xa7\xe6\x8c\x172\xbf\x00lCK\x0c\x97\x19\xbf\x9a_P@\xbc\n:?L\xebW\x8dk\xb1D?\x00\xa7\xa0\x87*\xa9@?\xb0\x16\xc4\xa5\x90zG?c~\xd2\xd7,\x15H?\xc2N\x05\xdf\xfe\t;?\xd8|#\x9e\xb8\xe4E?\xda\x1a\x86No\x98C?ai3\x02\xbfDB?\xde\xd4\x84b7D8?\x03V\xaf\x86*\xc9>?\xe4\xa9\xba\xbat\x83A?\xe3\x1e\xe7wq\x0eC?\xb7Gc,LQ@?\xc4\xf7\x9d\xc6\x9a\xb7B?e,zR \xf3@\xbf\xf0\xfe"\xe92\xa7)?\xa8\xc7\x0e\x08OY2\xbf6\xa30\xdao\xf1 ?\xb0\x9b\xb8\xdf\x0e\x92\xe1> t\x8eO1\x88E\xbf\xa0l\xc2\xe3\xaf&\x14?\xec\xf8\x93\x84\xb5\xed\'\xbfB\x8f*\xa6\x11u(\xbfd\x8fF\xc2\xd3\xb2<\xbf\xf9!\x9a(\x8b\xd5*\xbfi\xa3\xbd\x8c\xf2G.\xbfu\x94/\x8e\x06E-\xbf\xb6\x15\xe7\x80g\xfa2\xbf\xe0\xc4d\xc3\x81\x8d.\xbf0\xb6\xc1\xa33\xa1@?TD\xa8\x8d\x95\x0bO?g\x05\x9b\xf2L*C?e)A\x9f\xbceG?dL\xcfM\xbb\xe1F?\x9a\xca}2\x98\x0cE?\xb5u^l|\x82D?P\xb8\x96\xad\xee1E?\xab!\xb1a$\x80C?D\xb1\xe5\x83\x94\x84>?\x01`\xf5\x99v\x97B?\xb3lN.-B>?I\xaazR\xd2\xbdD?2\xd7\xfc\xee\xde\xaaF?\x94\xb6}\xe5\xb8^C?\xb5\xff\x9a\x12ZGa\xbf\xdb,p\x03\xf2_a\xbf\xe3rGdqma\xbf\xd1\xc2Xw\xa6\xc2a\xbf\xaa\xeb\x10#s\xc4a\xbf\x9a\xbd/\x0f%\xd6a\xbfk}w\x89\xe5da\xbf\x17\xb4\x16\x03\xfdza\xbf\xd4L3\xca\x8eTa\xbf\xbe]\xb5,\xbe<a\xbf6B\x8a\x8e\xd4ka\xbfQSC\x88jga\xbf\x0ckt\x17\xaa\x95a\xbf\xa1VA@\x86\x9ca\xbf\xba\x9c\xa18\xf9~a\xbfo\xa7cr\xb6>u?i\xc8k*\xabZu?\xe4\xb8(\xb7\x95\x91u?\xe0\'E\x0f\\$u?\xd5Gh\xf0Dku?X\xf3\xe2\xe9\xf3|u?z\xa2\x9f\xfe%\x98u?\xa8\xa6\x1ce\x97\xc2u?\r\x8ak\x05\xe6\x9bu?y\xbd\xc2\xcf\xb7ru?\x1c\x08\x99z=\x95u?\x87\x18\xec\x15L\x8cu?\xc6\xdeG%\xa8}u?<\xd1\x7f\x06\xeexu?G\xa8\xcf[L\x85u?ns\xca\xabZF\x0c?\x85\x1e\xa0~e\xc1(?\xfaTyP/\xd1!?\xaa\x8a\xe8\x1a>\x99 ?/<!w\xe2\xe0%?\xc6\x9c\xf5_# \xfc>\x90\r~r\xfc\x13 ?\xe6\xfb\xac\x97\xebwW?\xfe\xe2\x859P\x80$?`vi\xfc\xbe\xbb\r?$\x86\x1e\xac\xe15\x13?\xdf\xc6\xb3\xfd\x03\x9e\x1b?\xab\x8d\xbf\xc4B\\0\xbf\xf4Ms\xd1?R\x15?n\xca%\x11\\J1?C:[\x13\x92<<?\x90#\xc3\x07\x93\xd7D?\xea\xc4\xfa(J\xa4@?\xfb\xae\x99\xba\xd9\xd5G?1Ts]\xd0\xbeH?0\xbdH\x86\xb0\xa36?\xbe\xecq\x93\x08\xb4E?b\x9d\x1a`~\xcbC?\xd8[&\x8f\xb4\xc4B?\xdf\x00_\xa5\r\xc17?\x81\x9f\x11}\x02A??\xe6t\xc7\x0b\xcb\x89=?\xd0\xed\x13.\x9a-C?}\'\x19\xc0j\x11??\xc8NGU\xc2\tC?\xa8\xa8B\xec\xb0\xd6\x89\xbfL\xfe\xa5BG.\x8a\xbfE\xcc\xf4\xb0C.\x8a\xbf\xf7\xce\xc8|q\x16\x8a\xbf\xee[\xaf\xa0\xd6\xb4\x89\xbffL#S\xc3"\x8a\xbf\xff\'\xdf\xdf\xacF\x8a\xbfH\xbd\\\xf1\x17*\x93\xbfP\x12\x9e\xcd\x94#\x8a\xbf\x82M\x9f\xa8\x0f\x19\x8a\xbf@\xf1|\xeaUp\x89\xbf\x8f0\x83\xb4\xe1-\x8a\xbf1\x16|h\xe5\x8b\x89\xbft\xb4\xb3\xb8\xe7\xff\x8a\xbfO\xef\xb4\x10\x05!\x8a\xbfqq\x192(\xd4R?)\xfe>r\x8c$U?\x91\xb4\xb8\xc0\xf9\x88S?\xe8\xc9\xd6\xa0\x06\xdcT?\r\x962\xf0\\2U?K\xd0t\x0b&\xf7P?\xd9:\xa4\xb9\xb3\xf7T?\xb6\x90\x86\xe3\xfa/T?\x90\xa2;A\x17\xafS?a\xe8u\x7f"rR?\t\xce\x84\xe2&\xadS?\xed`P\xa0Q\xecR?\xa0\x83\x01\xa0\xd4\xf7S?\'<\x89\x9b2\xadR?\xa0J\xa1\x86\x1e+T?E\x98\xd8\x03\xbdh`?\xc5\x03\x05\x01s\x05V?r-\xb1\xcd\xbf\xc6]?\xee+\xb3\xab\xe3\x8dO?\xcbW(\xe6F3R?\xc4\xb3\x13\x11\x80T`?\xae\x0c\xb7\x126\xc5X?\xe6\x9dO\xd9\xea\xab_?0\xa7Gh\xa4\x0e_?\x01\x1a\'\xd4\xa2\xd2b?\xcbq\xb1kE\xbe_?Il65\xfe\x8b[?r}\xb9\xa7\xb1\xfaS?\xcfQ\x102\x92\xebX?u0\xf4\xa2z\xd0Z?F^R\x98te??\xdc\xe5\xbd\xac\xe3\x06\x10?b\x99.\xe7\xf1\x9c=?:O{c\x8eb"?\xddc\xcfv\xc2|9?\xf0%1\xe8N\xe8C?\xe3w?J\xa9]:?\x95\x98\xd4\x10\xe1m\x15?\x9f)\xa9\xf6\xe7\xfa;?\x06\xc5\xac]l\xb9\x08?!\xa1M\xf5\xf8\\;?\x1f9eg\x06\x19@?\xeb\x9d\xd1\xca\xb3\x9d5?k\xc7\xf6\xfd\x1e`@?\x0cJ\xb9\xc7P$1?d\xa8K\xb2\xf6\xed5\xbf.\xb6E\x87cc\x13\xbf\xfb\x0f\xcb\xab\x06\xe65\xbf\xacgw\xeb+\x0e\x07\xbfx0d\x89\xe7\x81\xd2>\xa1\xf7tf"4,\xbf8\x85\x1c(\xf5\xcf0\xbf\xf3\xe4\x11U\xb7\x8f/\xbf\xafk\x0c\xe8nN4\xbf\xf1\xba\xa8Dg\xd67\xbfhX\x83\xac\x86\x163\xbf\xc2uz\\\xbd\xcf3\xbf\xd9\x94=\xa0\x96\x9e$\xbf\x1a0LP\xbe\xd52\xbfZ\x8a\xdcX\xe5N0\xbf\xc6\xdb\xfc\xae\xfa\xc5S\xbf\xfb\xcc\xf5\xad\\\xd5R\xbf\x1c-U\x02x\xc5Q\xbf5\xb4\xa0G`pR\xbf%L\xd3#\xd2rR\xbfm(\xfdP\xf5\xf7Q\xbffb\x7fL\x85\x92Q\xbf\xef\x89\xeb\xec\xa2\xa6R\xbf$p\x8dxfLR\xbfj\xd2\xa2q\xe9\xceR\xbf~k>M\'US\xbf\xde&L\'\x98;R\xbf\x87\x1b;\xd2t\xa9Q\xbf4\xc0\x95\x83\x82\x05R\xbfKg\xd4\xf2\xbcpQ\xbf\xbb3\xe5\x95\xca.n\xbf\xacq\xbb\x9d\x08\x14h\xbfv\r\r \xa4}k\xbf|\x1c\xd2\x1c\xcc}i\xbf{iw\x98/4k\xbf\xd6\xe0\x00\x0b\x99\xc6i\xbf\x84\n\xf0q@`l\xbf\x1b\xe6\xdc\x91\xfc\xd9f\xbf\x95(\x7f.gxm\xbf\xa8\xb3\'\xc9\x9fDo\xbf\xa4\xc8\x92\x94\xb1xn\xbf\x1a\x8b\x01Ff\xfbj\xbf\x9d\x85.\xcbq[k\xbf\xad\xdcR\x870\xbck\xbf9\xab\x8d\x9a7*k\xbf\xa3\x9f&\x06\x18Av?\x14\xa4\x96}c\xe6u?\xcf\xd8)\xa2\xd4\x02v?W\xacm0\xea\x00v?oV2eq\x97u?\xc2\x90\xb4\xb1\xa1&v?\x06\xb1\x06\r\'\x08{?\xdc\xf9N\x96\n?x?\x87x}Ch]v?\xec(\xc1<\x05Ea?\xfd\xacD\xd1\xdaRv?\xfc\xcdB;\x83#u?\x8c\xf3{\xe2\x10\x19w?\x90\xa6xPj\x06v?$\xa9\x88d\x86\xf5u?@\xf0+3\xf5-\xb0\xbfz\x85\x1e\xa4\xd0\xd6\xac\xbf\xd7\xdfj\xa5|\x18\xad\xbf\n\xb9\xe0\x91L7\xae\xbf#LW\x1a^ \xae\xbf\xf3g\x88\r\xaf\xbc\xb0\xbfT\x14k[a\x19\xae\xbf5n\xca)^\xba\xad\xbf\xec\x037\x85\xd4^\xaf\xbf\x170?\xc6\xcb"\xad\xbf\xab%\x92\x8f\x9d\xaf\xae\xbf\xa7>p0^\x9c\xad\xbfg\x95\x0b/pp\xad\xbf[\x98+\xa9\xe7\x08\xae\xbf\x9a\x1e\x0f\x1eov\xae\xbf\xc7\xe3\xee\x089,[\xbf\xe4\xc5Bt!#s\xbf\xf9\x13\xb0C\xd0+`\xbf\xd3\x1a_p\x83*`\xbfi\xb0\x7f\xcb\xf3\x8a]\xbf\xe7QaV\xf8y]\xbfl\x065\xe4\x03\xc7a?{BS+W\x88B?\xe1\xf9\xed\xe6\xfc8_\xbf\xbcB\x94\xa3U\x9c\x8c\xbfw3\xc0i\x17\xfa`\xbf\xb7\x17U\x96#\xa3i\xbf\xfb\xb1\x93\xf3ElU\xbfM\x05.\xed\xfay`\xbf\xfd\xb9\xc1\xc1\x84\xc8b\xbf5\xb71\xb4\x00\x89=\xbf\xce\xa7b)\x16\xda0?=\x15APM\x878\xbf\\\xa7\x94\x844\xa1\x02?\x9bqb\x07l-\x1a?D\x9f\xbf\x9cb\x955\xbf\xbb\x95\x89\xbd\x8b\xaf,\xbfbcd{\xf9\x89(\xbf7\xbf\x88\x98\xba\x137\xbf6\xbd[1\x04h:\xbfB\x96\x8e\xaat58\xbf\x03\x81\x0eV\xe3\xa92\xbf\x07\xe4\x9dN\xd0\xa4\'\xbf\xd7,\xeb\x91QV3\xbf`\xd5\x18)\xe0,2\xbfQ\xd1\x92m\xb2kD\xbf\xab\xc7 m\xab\xf0*\xbf\x80l\x00\t\x96\x1eB\xbf\xce\xd2\\\xd3\xddu&\xbf\xff\xe9\xd1R\xbf\xbc"\xbf\xc9\x90\x88\x19\xfd\x98C\xbf\xf3M\x98%\xf9c8\xbff\xd1\xb0\xdcj\xb68\xbfA\xea(\'\xaa\xf3@\xbf\x1b\x9d\x0be\x11\x949\xbf~\xd3\t%Z\x91B\xbfOQ\xb3\xa2\x18\x80>\xbf-\xdf\xb2\xa1\xc7\n4\xbf\x13JF\xd3\x9e\xdfA\xbf\xa8\xf2(s\xed|7\xbf\xd7\xf9\xc6^\xc0<&?_\xf5x_\x08fI?\x9c\xf2ZT\x0be-?1\x8f\x8b\xd9\xe5\x02B?%\xa8\xce\xf8A\x9d;?tA|\\w\xf3\x17?\xca\xe3\x0c\x11H\x9cU\xbf\x9c\x05x\xd8*\xdfB\xbf\x9a\xb3\xa9\xde^\xff\'?\'\xc9\x1c\x05\xf8uu?\xd9w\xad^\xb6T6?\xf2>N\x95\x17\xbdI?\x1e\x9f\xb9\xb7\xbc\xbc\x12?#\xbe$\x1e*\xed)?\xdb\xb5\xfc,\x87z:?\x80\xcee\xe2\x93\xef/\xbf\x1b\x93pN\xcc\x0b/\xbfk\xccI=$G)\xbf\x8f\x15\xa0\xb8jT2\xbf\xf0 \x03\r\xf9\xaf)\xbf\x0f\x16\xa4\x8c\xc5\t.\xbf\xba\xdc\xc5r\x9d\xf2.\xbflq6\xaa\x94i1\xbfRJ\xa3\x0e\xea\x87)\xbf\x8fW\xc2\xba4\x03\x1f\xbf\xa9\x1d\x8c=\xa3\xbc\xf7\xbeY\x80\xaf]\xee\xd8(\xbfz\xff\xf3\x94\xc0\xde\x11\xbfH\xe8\xbc\xd3\xa0r\'\xbf\x1c5\x14\xe3Qy&\xbfa\xb7Nj\xc2f\xa7\xbf\x8dj\x1d\xf3\xadJ\xa6\xbf\xc6\x05\x1c\xad\x1a\xf6\xa6\xbf@\xbb\x8a\x14&.\xa6\xbf}{w\x98\x8aD\xa6\xbf\xdc\x87\x8f\x1b*\x17\xa7\xbf1\x90\xa1\xfe|\x81\xa6\xbf\xe6\x82\xab\t\x18\x98\xa6\xbf ?_`W\xfa\xa6\xbf\xf3\x07\xdc\xdb\xedN\xa7\xbfK\xedD\xd0\xb3\xf2\xa6\xbf\xaa?\xc1&\x7f\xec\xa6\xbfh\xb9_C_\xa4\xa6\xbf\x10\x9cv\xaa\x86\xfb\xa6\xbfO\xe0\xd2\x8a\x05\xeb\xa6\xbfE\x16z\xfb\xd9gZ\xbf4>\xa5\xc9Y\x03K\xbf\x8b\xcb&\x91\xecgW\xbf\xe2\xe2\xa1C\xbd\x91I\xbf\xf2\xad\x15UbDJ\xbf\xdc\x9cA\x7f\xc9\xf4V\xbf\xa3\xcd\x9d\x05\xd8@Q\xbf\xd4\xd8\xf3\xa4g\xc4Q\xbflhh\xe3\x90\x9bV\xbf\xb8\xb57\xc2\xf7\xe5[\xbfp\xc2\xd4a}\x95V\xbf\xecv$\xbd\xcatV\xbf\x98J\x85\x84U\x0eS\xbf\xb0\xab?sV\xb5V\xbf\xe2A51\xf8\xeeT\xbf\xd1vB\xfc_\xe0B\xbf\x18>\xa2\xaa\x08\xd3"?\x10o\x1evF\xd88\xbf\x9d\xca\xd2\xd6\x109\x10?\xd1\x11\x99$\r\xe7 ?S\xef,\x8c\xc7\x199\xbf\x16\xda[q\xa8!\x06\xbf\x94\xcf\x05\xb0u\x91\x13\xbfX\xbe\x92\xd3T\xbd4\xbf\x04*\xdc\xdd\xb3\xccA\xbf\x14\xdf>y\xb8r6\xbfuD$w.?3\xbfC\x7fxp{\xfb"\xbf\xbb\xb5\xc4\xca\xfb\x045\xbf\'\x07f\xb9PZ1\xbf\x14n\x82C\xc9\x12G\xbf\xb9\xe1\x06c,\x8eO\xbf\x84\xf9W\xa1]\x19C\xbfuN\xa9\xddB\xd5Q\xbf\x18[\xbe\x0f/0P\xbfm\x94\xe5\xbb{$G\xbfq\x0eQP\x9d\xd0J\xbf]\xf7;\xb0\xb4\xfeH\xbf\x11;\xe4\x9d\x86oI\xbf\x88\xdf\xc6\xac\x8c\xf0B\xbf\x89\xe3\xac9MoL\xbf\xc7\xdd\xfaD\xc38H\xbf\xd8\xeb\xff\xcd\x1f\x83L\xbf7\x0f\xe1X\xae\xcdH\xbf\xbf\x97\xe6+GCJ\xbf\x12p\xacf\xc2oU?o\xce?%\x04}V?\xba\xdd$\x9f\xfbUU?8\xf2\xd6\xb1\xe5\xeeV?T\x88\xa2=W\xa9W?\xa4\xfa5\x12.\xd6U?\xcf\xa9\x1eQ\xc6\x18X?\xe0[\xb1\x87\x97JW?\xcf\xa6J\x7fg!U?\xd2l\xe4\xe4\xf1\xe4J?@0&\xf3\x81\xd1T?\x95\xc0\x126\x15\xd1U?\xecIXghiV?\xaa\xc9\n\x98\xec\x8aV?2\tu4\xf4XV?\xb7\x8d\x02\xfe\x7f\xc3#?\xb9\x88\x9dM\xa0\x82B?\x94\x1f\xfa\xe0{?9?a\xa8x\xc0B\rC?\x06\xcc[\x18\x80\xd6C?\x8bq\xf5u\xe1\xba0?\xcbS\xef\xeb\x17d>?\x90\xdd_\xf4\xbd\x8c<?\xfe8\x1b\xdb\x89 4?\x96H\xfeb\xf3\x9bC?\'\x9d\xb8!\xd7Q0?\xf6,\xe0\xff\xeb\xde3?!\x03\x10\xd6l!=?\x96\x98NWz\xd09\xbf\xe0\xfc\x12\x9c\x1f\x18:?Y\xc9\xe0\xb5W\xecu\xbf0A\xe0\xdc|\xc9t\xbf\xbd#NF\xf9\x82v\xbf\xf1\xd4Z=\xd6\x06v\xbfZ\x7f\x06Z\xe2\x1dv\xbfL\xc3\x98!\xcb\xd2v\xbf1T9+\xe1\x14v\xbf\xb6\xa0\x86]M\xa1v\xbf\xd8.\xfc\xd5\xc4\xae{\xbf<\xcf2\x91\xa8uv\xbf\x827\x8b?\xbfev\xbf\x8aD\xa8\x1f\x1e\x19u\xbf:\x80c\xdc`\x1fr\xbf2\n\xc1n\xdcNv\xbf\x8e\n\xd4f\xa43w\xbf,\x0faJW\xb7b?\x83\xeb\x01\xe3\xb9\xceU?\x1bc\xba\xb1\xaa\xd0_?>:7\xc1L\xabT?\xf7F\x19U<XT?o#d8l\xc9`?\xdb\x0c\x88>\x8eBV?\xdb\x15\xe9p\xd9hZ?\xb9\n\x00\xa8\xb2k^?\x92\x11\xa9\x00\xf9kc?\x97j\x07\xf5\xb6\xb6a?^Q\x98\xff\xdf^^?\xfd(\x83=\xf3^[?O/JTU0_?\xab\xd1=i\x87\x03^?ab\xf0)WF9\xbf\xc1\xd6\x01\xc5[\x98\x1f\xbf\xce?\x8bCv<8\xbf\xf4bF\x13X\x10\x15\xbf\xe0\xb5\xdb<\xe9\xea\x15\xbf\n^{\xaa\x8a~6\xbf\xc4\x9b\xfd\xfa\xb5\x01\'\xbf,y\xe9\x9df\xff%\xbfaO\xe10b\xadQ\xbfbz\xd9rmj@\xbf5\xee\xae\x11dvA\xbfk\xa0ws\'\xbfC\xbf\xa4\xb1F\x83\xc5\xbcF\xbfjtBz\x0e\xe1:\xbfc\x1d\xadu\x0c\x8c3\xbfZ\xe7\xb2\xe5?5\x84\xbf-^q\xf1\xb45\x85\xbfi\x93\xf8s\x07\xa6\x84\xbf\xc4]#\x80\xc9\xa1\x84\xbf\x1f\xa7\\\xe0\x02\x06\x84\xbf\xe7\xf5E\xa3\x9d\x13\x85\xbf\xf6\xf9=\xf0\xc2<\x84\xbf\x8b\x1c[\xcd8\x1e\x84\xbfV\xd1.\x1d\x17\xd0\x84\xbf\xbd\xd9\xcfoeI\x86\xbf\x81`W\xb8\x19\xfc\x84\xbfn\x8d\x04K\xb4w\x84\xbf\xe53\x9a\x00\\\x90\x84\xbf\xf9\xba\xd2\x91\xc3\x0e\x85\xbf\x00\xb1\x0e0;\x90\x84\xbf\x94\xdc\xecAI\x84S?\x82\xf0\xcaB\xbf\xb3V?\xb8.\xd5\x95\xac\x1eU?\xbe\xc1\xbb\x87\xde\x1bV?\x98IY\xbb\x1dWU?\xaa\x963\xb3\xeb+U?\xbc\xb2\xcd\xd7\x1e\xfbT?\x01>\x0f\x84\x90\x9cU?6\xf8(\xc0\xe1{T?f\xae\xdd\x85YXU?\xb3<\xfeU\xd5\x9aT?\x07}\xf0\x8a\xc3\x93V?D\x05\xc3\x93n\x1eT?\x9b\xfcf_+cX?\x05\x9e\x8d\xfe\x03\x16T?\xeehBn .6\xbf\x87\xcf"\x0c\xe975\xbfi\x9a\x0c|\x9a\x8f0\xbf{"\xb3a#\xf80\xbf\xc2\xa8-\x98\x93P3\xbf\x1d\'\x14N\x1d\xc28\xbf\xb6\x87X\x9f^\x0b1\xbf\x94\xe1z\xfa\x03\xd52\xbf\xe9H\xbcS\x90\x876\xbf\x88\x07{\xab\xa1!+\xbf\xcc,K-~Q?\xbf=\xf39\xa2\xa5\xa0\x18\xbf\xbc\xd4\xf2u\xad\xe7 \xbf\xa6W\x004\x17Q/\xbf\x8fN-f\xaaI2\xbff\x15c\xbd\x1bB"?\x90\x8a\xd7/&lA?\x96\xd1g\x900\x0e4?\xc2\x91\x00\xe5<>B?\xf8\x80)\xb5\x14\xabB?J\x83\xa3.\xc2\x92-?>,\x0e\xe2\xd9\xf8<?\xf6/d\x9b\xe2\xde9?^cx\xf0E\x84+?\xba\xc3EE \xd8\x1e\xbf\xbd\x05\xc21\\\x0b%?\xe1\xbeY\\\x7f>0?7\xcd\xca\x7f\x15\x927?\xef\x10\x0f\xce\x89\x906?b\x92\x7f\x91\xc8\xd74?\xa9\xcb\x0f\x00~7+\xbf\xf3\xfa\xd7\x1eW<?\xbf,\x18MF]\xe8-\xbf\xd67E6)Y>\xbf#\xba\xf8\x808\xdb<\xbfJ\x8d=\x8c\x89\xd3"\xbf\xfd\x18*i\xbb\xa69\xbf\x1e\xb6\x85MZ\xa82?\xaai\x05\x03\x9d\xd1!\xbf\xaf\x8b\xef\x86\x06f\x12\xbf\x0bN\xd8Z\xb0/\'\xbf\x93\xbb\x1b\tF~$\xbf\x12\xb2P\x07\xb3\xb1\x1c?s\xf4\xc5"\x00u&\xbfH~2\x98j\xbd.\xbff\xff\x12\x0f\n.N?\xe6\xb9\x02\xff\xea::?:\t\xf3Bn\x02K?\xaf \x12\xbd6\x88??\xefj10\xf0~9?\xff\x1f\xba}M\xd5K?\xf8g+\xec\x8bs@?\x80>\x0f/\xa1JL?d\x1b\x17jD\x85L?z\x95\x00\x1a\x9e\x8bL?\xf7\xe5\xf4\x85\xcadL?<\xebl\x89\xc3fH?G\xfb\x1b>\x94e@?%4d8\xd4"J?\xe2\x16\xa5x\xef\x98J?$-\x1d\xbe\x10\x0cV?\xa77\xf1dlsA\xbf*\xd3kw\x97nM\xbf\x08\x06ji\x87\xa8L\xbf\xf5\xb9?\xc76\x14N\xbf\xbf[*\xad\xe8\xf1L\xbfJ\x81\xbc\x9a\x1b\tL\xbf\xe0+\x83\xee\xfb\x9cT\xbf\xed\xceGXY\x97N?\xd5\x8f\xe8\x8b\xdd\xcdG\xbf\xfftB\x8f\x93&L\xbf\xb0\xb47\'\x1f\xbdI\xbf^\x03\xa0~Z\x9c^\xbf\x11\xf9\x12\x05\x95uN\xbf:\xb3qb\xdbdJ\xbf\xc0\x91\xff\xa6\x9e\xbbV?\xcd\xae\xe9\xd4(5Z?o\x11\x85\xec{\x80U?\xe8\xaf\x99\x91\xb4\xedV?\t]JHFf[?F\x94\xb2\x92\xe1HZ?\x19\xdc\x97u\xc2\xdcW?\xe3\x0f\xbf\x87\x88\xbcV?\x90\x1f%d\xb3\xbfV?qw(\xbbt\x86I?(\x86C\xac6\x06P?\xd6\xa0s\xdc\xf7\x14S?\xf3\xb4NP\t`W?\xd3s\xd0\xa9\xa9(W?_\x80\x94Gh\xfeV?!\xd8D\xf1\x98\xf0;\xbf\x06\xf4\x90r\x1f\x85&?\x98\'\xcewT\xac\x1c\xbfX\x80fk\xed\xe40?\x96\x8b\x0f\x0f\xf6>5?\x10\x1a7\x19\xf3=:\xbf\xdc\x8f\x975\xf32\x11?\xb2\xbe\xabj\x91O\x16?:\xcc\xe6{?\xb2\n\xbf\xf8\xd1"\xaf\xcb\x9c<\xbf\x9d^\xcd+{\x01*\xbfa\xa2n\x97\xa0& \xbf\xac\x0bQ\t\xa7\x0b\x01?l\xd1S{\xa4\x1d%\xbf\x06\xb9\xb7\x9c5\x13\x1f\xbf\xfe\xd4w\x13\x85\xa77\xbf\xb7\x8f\xa6\x9cI\xaf+\xbf_\xd4\xb2\xbe\xc2\xea0\xbf2Iz \xbb\x191\xbf\xdc\x17F|\xdd\x86!\xbf0v\x19\xdf\\\xdf-\xbf\x94v+\x8a\xfa\xb3\x16\xbf\x9eGW\xba.\xf33\xbf\xd03\x04\xa3L\xbc0\xbf\x96hT\xe8\xe1Z3\xbf\xe2\xd1\x80\xba@\xb52\xbf\xdd\xe9\x91X\xfd\xde.\xbfD\xf8\x12\xfce\x98(\xbfF>\xb5`I\xfd1\xbf\xe1\xad\x0b\x16\xbd\x87&\xbf\xa8x\xbd\xbd\xa0\x8ab\xbf\xee\xdcL\x87f\xc0c\xbf"\x8aZ\xf8f\xc7b\xbf\x9b\x87>\xd4\xdf/c\xbf*\xb1\x1d\xb7\xe5Cc\xbf\x97\xf7;\xb1\xb9\x1cc\xbf,\x1e\x13\x98\xda\xffb\xbfgWy\xfe\x82\xe6b\xbff\xfe\xd6h\x8a\x96b\xbf\xb7\xb1G\xe0\x8f\x0ba\xbf\xe5\xc4\x19@?\xdcb\xbf\x7f(d#\xdc\x03W\xbf\xd4\\\n(e\x0bc\xbf\xf5\xd6\xd3>\x1e\xabb\xbfI\xb5B\xb0\xf0kd\xbf\xbc\x1c\x98\xa5\xc0Af\xbf\xb2\xeb\xa9\xba\x1f+g\xbf\xd9\xdd\x16\xa0\x06\x1bg\xbf\x0b\x1d0\x00\xe5`g\xbf\x9b\x862\x0crEg\xbf\xad\xd8a\xb4\x97}h\xbf\xba\xf3\xd3+\xac\x07g\xbf\xb3\xe7,\x9c\x0c\xf9f\xbfa\xc3\x04\x17\xd5\xe6f\xbf\x08\xab\xaf\xbbNzc\xbf\x08\x11\xb6Eg\x7fg\xbfV\x1e\xdc11;F\xbf\xf0\xab&\xf5\x11Gg\xbf\x83%\x9c\xeb\xa6\x82g\xbf:\xdeRVK\xa4h\xbf\xa9?\xfe\x8b\xf2c9\xbf\xff\xfd+\x83\x87\x81G\xbf\x00 \xee<\x0f\xc2@\xbf\xd4\xba\xf4o~\xc5I\xbf\xa5,H\xa5Z\x13H\xbf\xe7\xfe\xba\xa8\xb2\xe7>\xbf\xb1/l\x82\xa2\x17E\xbf^W6,\xe9\xe7D\xbf\xc1\x9dc\xa6\xf9"@\xbf\x11D0lk89\xbf\xf9\xaa\x91\xfa\xf8\xc8@\xbf\xba\x03F${o@\xbf3\xc4\x1a_\x80&H\xbff\x18\xde&gT@\xbfD\xcaO\x0f\xdf\xf1C\xbf\x13\xcc\xda\xac@\xaeB\xbf|1\x0e\x08\xb2\xaeM\xbf\xae`\x82\x8fc\xefC\xbf\xbf}\x18@\x18\xf1K\xbf\x90?.`I\'K\xbf\xf5\xb1\x19z\x01HF\xbf\xf4\x0e\xba\x0c.\rP\xbf\x172T\x995\xacG\xbf\x06\x10\x85v"fG\xbf\xa0j\x1a\xb2Gx<\xbf\xa5\xe94\x0c\x15IF\xbf~\x8d\xf7\xf0\xebR\xf0\xbe\x88F\xf4\xaf\xba\xd6U\xbff \xc1j,\x1eB\xbf\xbb\xdeQx\x1b\x12h\xbf\xaapZ\x12{\xaf[\xbf\x8b\x81/\xe6x\x99X\xbf\xb1\x83gQ\xa4\xadW\xbfL\x13\xe5\x9b\x96\xdfZ\xbf\x92\x836\x85\xb7\xe5X\xbfG\xb5\xc1;\x00\xf9`\xbf\x16g\x11\xdb\t4^\xbf\x12u\xaf\xf9\xf2\xa1X\xbf\x1fD`\x04\x04\x1d[\xbfP\x18.kFjI\xbf\xe8R\x9eK\x06\x03`\xbfu`\x92\x02\xa7Xl?\xf1\xa0\xebQ$[a\xbf{\x1d\xf2\xfd\xd9%a\xbf\x04l\x9d\xc0\xae\xd7i\xbf\x8f\xd9\x88\x8c\x86\xaa\x82?`}\x95\xa30\xe5\x83?[I\xe2\x87\x10\xb0\x83?\x9bO\x138\xb5\xb5\x83?\xe5XwG\x1c\x95\x83?\x7f[\xd6\x05\xfb\xcc\x82?\xee\x03v\xdb\x14\x81\x83?\xb4\x04\xf5\xbcQ\xc2\x83?#\xae\x82\\\xd5M\x83?db,2\x14\xc3\x82?\x17\xd1a|\xaef\x83?\x9f\x80\xa1i7\x1f\x83?{\x0f\x8cc\x1e4\x83?\x93\x18BJ\xaa4\x83?\xb6";\xf3\xaa\x12\x83?\xd7I9\xc4\r\x9cS?\x7f\xa7\x19Zy\xcdT?b*M\xe3d\xe7S?v\x1e\xf1\x96u$U?\xbd\x96\xf2-A\xb0U?\xcb\xd48\xd3T\x84S?\xc1;\xdc\xc6\xb5\x19U?\xc7rV\x95\xac[U?G]\xcb\xb3~OS?\xa1$\x06\x950\xdcR?\xbd\xd0m\x11\xb8\xfcS?\xf0\xd8\xd6\x005yS?\x19\x19\xd5`\x8a^S?\x9d\xb5\xa4\xb4\x93\x18S?\x04\xfb\xaf\xb6\x98QT?Z\xbe\xfajR\xa1\xc4?\x88t>\x83\x9ah\xc4?/\xed\xdd\xc1\x05\xa6\xc4?\x1f\x88iv\xac\x9f\xc4?\xd7\xf9\x10R\xff\x8f\xc4?[\xb1s\x05\\\x9c\xc5?\x9e\xd7Q\x85\xf4\x86\xc4?\x93\xeb\xe7\xe4\x19\xa5\xc4?\xfb\xb9e\xc8L\x9f\xc4?o\xfe%lc\xcd\xc4?O^\xc9\xa7\xab\xe8\xc4?& \'^\xd4\xb3\xc4?\xec\xad\xb0\xe4\xf6\x9c\xc4?\xb2W9\xd0\xc1\xbd\xc4?8\x1c\xe1\xe3\xad\x99\xc4?\xbbV\xa1\x836\x84\x10?\xad\xa7\x9dw\x92\xa11\xbf\xa6>\'\xb3\x06N"\xbf\xfb\xce\xaf\x12N\x0e/\xbf\xdb\\\x02\x1bY\x805\xbfh\x01~1\xa7M\xdb>-I\x82z6\xc24\xbf~SiV".\x1e\xbf\x9b\xa7\x0b\x1eF\xc0\x1e\xbf\x1ag/\x01\x02\xf5#?0\xe9:\xc3\xa1\xf2\x1f\xbfn\x08\xcb\xfdt@>\xbf\xc6\xf9\x0c\x99K\x90>\xbfu\x8c\xa4%`;\x1f\xbfhW;\r\x91\x07,\xbf\xea4,\xbd\xaf50?}\xde:.\xaf\x88B?\x01d\xe1L\xfa65?\xd6Y0\x9b\xcc\x11I?G5\x9a\x05&\x81F?e\xf3\r\x0cl\xaa/?N:\xf8u\xa4\xd3B?\x04orE8TU?\xc8\x8dlZB\x9d;?hC#\x03\xb61\xf2\xbe\x0b\n!\x92t78?\x9f\x1b\x94\xd6\xc0\x0b\x1c\xbf\x84\xecG\xea\x02\x904?\xe4Fm\x9dn\x849?GKJ\xac\x00QD?<\xd3\nH\x86~~?\x18#\xeb\x193@\x80?\x986\xbfs\xa1F\x7f?\xa1\xdd_1\xfbs\x80?\xd5;\xa7\x01\xf1k\x80?\xa2@\xd4\xa6\xfd\xe5}?\xb9n\xba\xcb\xe4\xaa\x7f?\x1a\xe0\xf6\xb7\xa7\x1e\x80?\x1b\x142\xcb\xeb\x0b\x7f?\xa2k\xc0\xd6\x17\xca}?\x14\xb6\xab\xe3N\xad~?\x0f"zIcF\x7f?\x9b\xac\xe8\xc9\x840\x80?\x95l\x0bl\xcf\xef~?\xd9\xbc&u\xe1\x11\x7f?\xc7\x18\x9d\x0e\x1a2\x84?\xcc\x18\x88I\xd5\xac\x84?Sk^\xd6\xbbg\x84?\xd1\x1f\xe4\x0e&\xd0\x84?\xec2\xa5\xd64\xce\x85?>5r\x8cdH\x84?m:\x04\xd6#\xb1\x84?5\xd8MO\x83\xff\x84?\xb6\xe3{\xbe=\x82\x84?\rk\xf1,M\x0f\x84?\x0fG\xd0\xe1\xb5z\x84?\x02\xaf\x1f*\x9dL\x84?\xf4\xc6\xd3\xf2\xdb\xc2\x84?\x18\xfe\xe2\xa2\xefN\x84?\xd2\x99\xe5\xba\x10\xae\x84?0\xd0\xa6\x86\xde\x94\x92\xbf[\xcd\xdc\x08%Z\x94\xbf\x9f\x83\xb6\x81%\x11\x93\xbfoG2NU\xa8\x92\xbf\xae\xc1\xb3\x935\xca\x92\xbf\xd6c%\xe2\xf4\x04\x93\xbf\x06\x15\xeeR\xbfv\x92\xbfL:\xb0\x0cZ\x89\x92\xbf:\xd7\x1a\xb9\r\x8d\x92\xbf\xe7\xd8bK\x90%\x91\xbf<g\xe6\x08vx\x92\xbf\xa2\xbd\x8c\n\xae\xd6\x83\xbf\x8eQT;\x99\x8e\x90\xbf\x9aL\xd0\xeb\x1f\x10\x93\xbf\xaf\xe9\xa6\xc0\x1bf\x84\xbf\xf3\x94\xe2\x8bXaJ\xbf[\nJ\x8c\x16\xaf4\xbf\x089\xc0\xff\xab\xb6F\xbf\xb1aYY\x17\xe6:\xbf\xfd\xdd\x93\x95\xccg2\xbf8\xd5ak\xcd\x086\xbf\x0e\x9e\xeb\xb5\x81\xa4A\xbf\x9bC\x90\x85\xce\x03:\xbf\x85\t\xda\x10 \x84E\xbf\xc2^T#\xf7\xa4L\xbf\xb2\xff\xbd<AyG\xbfI\x99\x84\x8bI\x15E\xbf02\xd1|\xe4\xe7D\xbf\x02m\xe1"\xcd\xabA\xbf\x96\\o\xb9\x1d\xaa?\xbft\xc4\xa5\x99\xc3\xdaW\xbf\xfc\xab\xc2\xcd\x0b\xfcV\xbf7a\x86S\x94bX\xbf\xc0\x02\n\x1e.\xbaY\xbfl\xfb\x8d\xf9\xfaM`\xbf\xb8B\x1b]\xbfoY\xbf\xd0\x83\xa0P\x0bVT\xbfUW\xa2w\x96\x1bZ\xbf\xe3\xef\xf97P|Y\xbf\xda\xfe$\x1akzc\xbf\xe2P=\xd6\xce\xcaX\xbf\xa9 \x9cSh\x0cY\xbf\x0c\x93\xc8\t(\x87W\xbf\x17\xb1\xfc\xfc\x88DZ\xbf_\xdc7gj\x9dT\xbf\xf8\x9b\xceSo\xd0`?3\xebYsJ\xf1f?4\xf4*\x80\x86\xcca?\xf6\x17]"5\x8cc?p\x8c\xc2:\xd8}c?\x15\xad\x9f\x9d\xc7\xafY?\x0f\xb6\xfa\x10\x1c4\x17\xbf\xd5\xc6\x8f>1Cb?\xfe\xa31\xce\x0e\x89e?\x9d8\x06\x18\xc6\xa7`?\xe3\xb5\x95bX\xbaa?m\xc4i\xe5\x8e\x80b?\x81t\xc36\xb3;b?4\x8f\xd7\xf4\x84Xa?x6\xbba$cc?;\xaf\x10\xda\'\x98b?\xf0\x91r\x0c\x00\xd5j?NU0\xeb\xe0\xf6b?\xca\xf1\xebg\xa1\x81p?\xbb*\'\x84\x877g?\r\x08eU@\xe9c?\xd7\x87]y\x02\x81c?\xe6\xf2\x93\xd4\x94\x04c?\xfa\x9c\xe0\xd5\xd9>c?\xa9\x1d\x1fR\xc6\x87b?\x9e*\x94\xdbk&b?\xb8[\x8b\xcb\xf4\xd4b?\x88\xc3\xf7\xab\xa9\x8cc?\x108<c#\x98e?\xcf\xccf\xfcx\xd4b?\xf3\xc3K|KWB?-\xd3\x08\'.\xd4J?\xd2\x19\xc2\xbc\xb8\xa3L?e\x1e{\x1b\xda"D?\xa3\x1dL\xed@\xb5K?c;\x02{\xcd\x16B?K\x91&/\x0b\x9bG?\xf2\x1f\xac\xadK\t\x1a\xbf}~E\xbe$\xc9C?\xb5\xb1\xd4b\x82*F?\x9a\xa7k\x9d\xa34E?\xd8\xc2\x87$\xcc\xaaG?z\xc7\xfek\xa6\xe3G?X\x84\xeb\x0b!\xe8B?\xd3\xe96\xfb\x95\xd4H?\tSC\x83\xbf\x0c[\xbfV,\x06\xed \xd2d\xbf\'\x00\xc6\x1dn\xa5f\xbf\xb3C\xa4\x02\xd8\x0ef\xbf\x85\xc3m<?\\f\xbfo{z\xee#zf\xbft3c\xc4\x1b\x87e\xbf\x1e\xefw\xf5=\xb0f\xbf\xec\xaf\xe8\xcas\xbff\xbf\xe0\x9a\x0b\xe6\xe9\xb3f\xbf\xb3\x14\x81\xba\x9d\xdcd\xbf\xfa\x84\xa1x\xa9\xf8g\xbf\xdfRtFk\xd2f\xbf\xe7\x15C\x93\x10\x92f\xbfg\x0fo\xf1\xa9"f\xbftPX[\x9doz\xbf1\xe7~\xb1\xd8&{\xbf\x81Rhu\xceB{\xbfS\xe7\x7f#\xd9\xa7z\xbf\x9d\x1d\x9a\xf6V\x1ev\xbf\xcd5`M\xa4=z\xbf8\xa7\xf7V\xce\xdc{\xbfk\x9e5\xc3\xc2\xf1z\xbf3\xf2\xcc:s>{\xbf\xb4\xc9u\xd5\x15\xab{\xbf*\xfa\xdd:0\x15|\xbf)\x05\x13\xfd\xefK{\xbf\x9f\n\x8a\xbb\xa2u{\xbfXW\xc2\xcc\x8b\x7f{\xbfG\xc7"X\xbc\xc6{\xbf\xb8\xf7\x9d\x10\x98#E?\xa7\xae\x13\xf1\xe0\xec@?\xac\x94\x17\xadFR@?\xb7/\x0b\xeaf\xf4\'?\x1b`\xa0#\xdf\x833?#v\x07\xddT\x19@?\xf4%\xf8\xda\xb90\x17?\xe23\xe8G\xc4\xeaC?B\xfb\x84\x1e\xd7\xe0A?\xe4\xbe\xb4\xb2{\xa5H?\x0cj\xe1n\x82\xdc=?*2i@\xe2\x1e=?\xf20t\xfe\xee\xba%?\x1d4\x89\x19!\x9c<?\x00\xce\x1dy\x8a\xeb7?x\xfa\xea}\xc0 E?\xe1\x93U\xa3\xb9\xed/?\t\x88*u\xce\xc4C?&\x05\xe7\xe6\x1a\xca-?>\xccS\xf7Ul.?\x83\xf6\x89\xa0\xdb\x9fC?\xf4"\xbe\xa0\x9aNC?0E\xe2\xd7\'\xb3L?6\xeb\xe6.\x04\x03A?d\xb6\\\x85\xcc\x88G?3\xf4\xdb\x05 ^D?\x7f\x19\xe9\xb2\xcd\x07C?\x92\x02\x07w\xe1\x90:?(8\xb6\xc8\x95\xfdB?Q\xa7\x9a\x9f\x84\x85@?\xde:Q\xc1W!/?H>\x81Gat\x1e\xbf\x0b\x85\xf2\x8f%\xf4\r?h\xafh\xd7G\xe5.\xbf\x1c\xc2\x9b\x04\xdd|8\xbf>\x13\rg\xa03$?\xa5\x825\xe4\xc9\xe4D\xbf\xa0\x8b\xe9\x03g\xd5\x14?8^A\t!\x01\xde>$\x08\xb1R\xec\x08&?4~\xe5\xca\xca\xb1\x07?\xf7\x18\xa4u\x1c\xa1\x08?\xd9\xa9\xcf\xa5"\xe8"\xbf\x8d\x1bp\xea\xd1\xe3\x17?\x0c\xb1\xde\xed\xa1\xf2\x02?\xd9zQ\xb4\xd7PD\xbf\xc0\x89\xb86\xc5\xeeH\xbf\x13\xda\xcb\xf2FZH\xbf\xe2\xa6\x83S\xb0\xa1J\xbf\x00\t\x89\xbe\xa0\xedL\xbf\xc9\xf33uy\xf4D\xbf\'\xef\xd9YA\xcfN\xbf\xb9\xb3\xaf\xe7gcJ\xbf\x14r\x1d\xcc\xb37H\xbf\xa1\xb3\x17\x8ad\xcbD\xbf\xc1V&\x1fw\xe8G\xbf\x14z\xd8[\xc3\x0bJ\xbfLno8\xa4\xd9I\xbfr\x16\x8erzrH\xbf\xff\x96\x11\xca\xf0UH\xbf\x80T\xbd\xf7\x1e\x0e>\xbf\'\xab\x9f"<\xc8\xf7\xbe\xafD\x99AU=8\xbf\xe8\xf1\x92\x88\xe7\xb9#\xbf[\xc1\xe6\xd9\xee\xac\x14\xbf\xdb\x10S2c\xfa9\xbf\x8cY\xa3V\xca\xea)\xbf\xfe\xca\x1d\x84\x0c\x9f2\xbf\x03(\x05\x8c\xd7S:\xbf\x9a\xa5/\x86\x9f\n@\xbf*\xe1-\xc6\xe7H:\xbfvfAg\xf8\xc97\xbf\xfc2\xaf\x0e\x9510\xbf\n\xcd\xbf\xbb\xde\'<\xbf\xa6\x07\xb3\xd3}|3\xbf\xdcC\x13\x9e\xb7\xb8\xdc\xbey\x92\x97\\}:C?9LA{C\xa1.?\x0ey\xc3\xb1@\xf4C?N\x1d\xb0\xc7\x0f\xbeD?\xfe/\x94xE\x0e+?3Y\x8c\x06N\xf5B?+\x96/\xe1\x84\x0b9?\xaf\xda&\xa9J\x99.?`\xd5,\x1fc:\x1b\xbf\x81\x0fdK8W*?CX\xdb\xd8\xb6\xea0?\xc1N\x0c\x8a\x8c\x88:?\x18\xdc\x8cb\xc6\x872\xbf\x07\xdb\x83\x1b\xafC3?\xf1T\xdb\x92O~ \xbfl\xca\x1f\x1cM\xe46?\xce\xf5n\xf1\x81Z\x18?\x10\'\x7f\x92I\xdb;?\xb8+\xe9x\x8760?\x9e0\xc1\x86y\xcf\x0c?6\xe3\x1b\x8aU\xfe!?\x8b\xc3Y\xa0\n\xc0\x10?\xcf>l\n\x0ek\x0f?>2\xf9\xb3\x99i\x02?\xe4bT5L,"?\xe5\x99:\xd1\xd4\x11 ?e\x13\x83ya\x7f-?\xc0\xc0\x1b:\x85\xd8\x1a?\xa3\xaaY\x18\xfd\xb64?\x97t\xcd\xc8\xb7\x95S?\xa3#\xd9\xd3f\xabS?\x8db\xc9\xb3AIT?nF\x19\xfe\x8d\xbbU?\xf3 #\xc3B\x8bL?\xb1\xccY\x80\x8e:T?\xb6\xa7\xa2\x90~\x01Q?\xb6|:\xb5\xc7\xd3T?K\x0beN\xb6\xc0R?0\xa8\x16\x92-;W?\xad\xd1\xfb\xf5\xafsT?\x06\xba>Q\x8awT?PC\x97\xac0GT?ED\xe8\x0e\xae\x1fX?\x9a\xbb>3\xf9hT?\xa8v\xf6V\x88\xe9\x89?9\xdb\xbfv\xaaB\x87?\xea4Fxm\xff\x88?%^\xb0\x91R#\x87?\xdd\'\xce\xe0GK\x87?\xd6\x05\x85\xd8\xc8H\x89?\xe6\xf8(o\xbfc\x87?5\xac\xab\x93 .\x88?5\xf4\x92/\xf5\xfb\x88?4k\x16.\r\x9b\x89?\xeaM\xc7x\x96-\x89?=zk\x14O\x13\x89?\xb0\xf6\xbfJ\xa6@\x88?\xbbl\x8b/\x848\x89?[\x8beTi\xce\x88?z\xef/B\x1f\xb1\x1a\xbf\xce\xd9\x82`\xc7\x9a1\xbf\xd4\x12\xd41\x9e9\x13\xbfx\xebA\xea\xe4f/\xbf\x89t\x9fL\xfe\xe3$\xbf*\x07\x17S\xcfl,\xbf\xfe\xe8\xaf\xfe2\xcd\xff\xbe\xe0X\x7f\xb5[\xdb<\xbf\x8a%\x91\x05\xf0[!\xbf\xc5\x80\x13k\x9c\xa2\x19\xbfv\x1eth\xed\xe1A\xbf!\xe5\x84\x94\xb9\t\x0c\xbf\x80\xe2EBw\x82 \xbf\x8aS\xdf\xed\x18\xf8\x1b\xbf\xe7\x0fI\x84\xe5\xeb\x1d\xbfw\x1c.\xc0\x9e\x07A?\xe0E\xef\xc3k\xd1N?8\x05H\x1ez\xe5D?u\xb9Q\x188IN?\n\'\xd0L\r"N?\x9cv\x05\xdf\x13V]\xbf/+,\xb3g\xb7H?\x08\xd7\xe6\xc0\xab\xf7F?\x08\xed\xf3W\x14CC?\x14\x12-\t\xa0\xdb=?%\xe7\xe8\x8e\xd3\xadC?\x9a \\\xcf\x1d\x90D?2\xfcU\x93\x0c\x1bE?\x1f\xc1\xab\xf49_D?\x1d\x90\xc7\x00q}C?\xe5\x0fPM}\xab\x16?R\xe3\xeb\xfa:\x981\xbf\xa9\xf4\xa6\xd7*d%\xbf\x85En\x0e\xbc-\'\xbfY\x02\x1d\xd0&t\'\xbf\xab:\x0el\x18y \xbf}8\x16\xee\x85l.\xbf\x83\xea\x07\xe5\xc1>2\xbfFzH\x910{$\xbf\xee\xeeN\x82V\xf2\n\xbf\x13,\x10\xb2\xb9\xb6\x1e\xbf\x1a=a\xec\x94L\'\xbf\'\x91\x11(02*\xbf\x7f\x99?\x17\xeb""\xbf"\xaa\xd8=o\xff\x15\xbf\xc3\'\xfb\xc1\xd5>f\xbf\x98F\xe5\x89\x89\xfed\xbf\xa9\x04<<\xc0\xc9d\xbf\x85\xa3\xff\x03\x1c\xcac\xbf\x98\xc6X\xfbo\x13e\xbfN\xeb\x9dR\x10yf\xbf\xca\x1b\x1e\xfd[\xcff\xbf\xb7\xfe\xe0G&\x18e\xbf\xb2\xc62\x86\x16\xd5e\xbf\xa6Xl|\xf9\xcdd\xbfu\xe6L\xe1\x1fzd\xbfbj\x90\xb9 ?e\xbf>\xd9\xd7\x1fMcf\xbf\x9d;0OF\xd9e\xbf\x81\x8d\xc2E\xf5\xaed\xbf\xbfB\xd7\xdeD\xc12?\x8e0-\x01D\x958?/\x7f\xc2x\xbf\xcc4?R\xc94\x06kd??\xb1\xcc\x17R\xe0^<?_IB\xe8=\x854?Ur\x87\xd1\x92\xf49?.\xe5K\xb2W\xf91?\x93\x04-\xa5`\x922?\tH\x94\xf7\xcbK7?\x85J\xe0\xeb\x0f\x80&?az)\x9b\xca>2?6\x1f4\x800p3?"\x01\x04l7\x062?~d_\xcd\xe8\x9c7?\xea\xce\xa4u\xd7\xedC\xbfPS\xc0O\xc5\xc4#\xbf\xaa\x04\xdd\xadQh7\xbfpZ\xaa\xa4W\x9c"\xbf\xd4\x0ed\xd0\xe9\xc7\xce>%\x18\x14\xe7\xbc\xd13?z\xaac\x86\\\x1b\x17\xbf\x1e\x10\x19w\x16\xa1\x16\xbf\xb4`#\xa9\x85S7\xbf\x95\xa2l\x17\xa8\xe0C\xbf\xc3"\xa0\xbc\xbby?\xbf\x0e\xd7\x8d\x00\xd4Z1\xbf\x98\x86\xca{E\xe20\xbfW\xea\xf1\xfd7\xcf9\xbf\xa4a\xd2\xeb\xa4\x9c5\xbf\xa3\x8a\x99\xbf\x92pL\xbfc\x96\x1d \xdd\xcf\x1c\xbf\xa7/G\xd0\xaf\x91C\xbf\xc9\xbc\x0b\'^\xb6\xfa\xbe\x1eB\xf9\x19\x9e\xf7\xfa>np\x0f\xfb\xf4\x01I\xbf\xees\xf2M\x90\xdb8\xbfv\xcf\xe5>\x08;4\xbf\xf3+\x87,\xe6\x00&\xbf\x84\xd2\x8aJf\xc8S\xbf\x83n;0\xf9\xbcC\xbf\xff\x7fm\xceQ\xe6G\xbf\xd7\xefD1D\x023\xbfd\xd2\x8d\xb0"|D\xbf\xbc\x86j\x8a\x8aI:\xbf\xd0i\r\x94\xbc0F?\x82h\x9a\xe6X\x9fM?@\x85\x94\xb5FyE?\xb46\x1a u\xbdJ?eY\xa1?\xc8\xdeM?\x89d\xbf\x19\xf6^!?\xb2|"P+?"\xbf\xa8\xb4\xdaa\xaaqK?\xc5|(\xbc/\x10G?\xfb\xb8\x12p\xe1kX\xbf\xaa\xa3\xc7\xc2\x08\xce??\'\x9d\x1f0\x9e\x89 \xbf7\xc5\xad\xe8PlP?\xbe\xe0\xac\x8a{/G?\xa5\x04\xf7!:tF?\xd9 \xf2\xe1\xf7\x0f-\xbf\xfc\xed\xca\xb3o\xb60\xbf\x0f^a\xe8\x1d\x81\x10\xbfJY\xfc\x15\xb9\xd2.\xbf\xc1r\x07\x7f\xcc\x93\x0b\xbf\xd8\xf5\xba\xf8.\xdc7\xbf\xb7\x7f\x91\x10\x15O\x00?\xeaD\x88j\xb6\xf6\x1e\xbf<\x8a\xf7\x18F\xac0\xbf\xd4\xcf\x84\x14\xf2\xa05\xbfHs\xa6\xad_[<\xbf\x07\xa1W\xd8\xb7\xaa\x1a\xbf\xc73%\x94*\xbe\x1a\xbf\xbe|\xbb\x13\xcf\xd60\xbfq\xa6\xcb\xb8\x12\x05-\xbf\x13\xb0^\x8d\xa5]\x92\xbfr\x1b\x90\xf2\x08.\x92\xbf\x8c\xe5\x92\xe4.M\x92\xbfb\xae\xeb\xa2Q;\x92\xbfjI\xcf\xed=\x97\x92\xbfb"\x15=\x01\xfc\x91\xbf5\xa6\xd5\xe3O[\x91\xbfu\x07\xee\x83\xf9X\x92\xbf!\x8a\x10\xeb\xea\x80\x92\xbf\xdbF\x8a\xdd\xef\xda\x90\xbf\xaf\x86I\x93\x8a\x99\x92\xbf\xc8X,Y\xf0\x10\x91\xbf\xe5\x10\x80\xda\xed\x90\x90\xbf\x08\x05\xa8P\x84x\x91\xbfU\xea2/ly\x92\xbf&C[\xdctdV\xbf9\xe6*\x8cCz:\xbfN\xf2\xc4\xd8?\xadO\xbf\xb6\x13\xed\x0c\x18\x830\xbf\xcdHS!\x17\x1d3\xbf\xaa\xd8\xae\xb6>%R\xbf\xf4\x11K\xfc\xd5\xc9@\xbfBv\\\xa3\xc7\x97I\xbf|\x99\x1f\xba\x98\x98P\xbf\xcf\xea!\x0eCcR\xbf\xfe\x10~\xb1\xe3\xf4P\xbfbW3KT\xbfN\xbfzB\xe2\xc9\xb9\xc4C\xbf\xb4\x9dBD/\xe0O\xbf%\x94\xf6i\\&I\xbf\xfe\x00\xa5:\xbd\x0fe?\xe8\xc4L\x05\xa7\xb2e?\xe5\xd4=\\\xd5\xc7e?\x02\xe5\xff-\xa8\x9cf?*\xfb4\\~ye?\xab,\xc2~k\xc6e?\xbe\x8a\x84_\x80\xa7b?G\x8c5\xec2\xf9e?\x98\xa9\xc1\xf9\xda\x85f?$\x8b\xa8\x02I\nc?8\xdc\xb7\x1d\xde\x15\x16?\x8a\x9e\xc5\x8a\x0c\x9cb?I5\xdc\xb9\xe4\x1da?v\x8d\xcb\xd1\xc7@b?g\xa9\xd5k\x99>f?\xc79\xc3\x0c!\x90\xb2?\x14\x124\\S\xe2\xb2?\xd6\xd1\x84fq\xa8\xb2?dq\x9b\x8cx\xf6\xb2?c\xf1\x8a\x85\x1bI\xb3?n&\xccg\xff\x8c\xb2?\xdd7\xb0\xef@\xd1\xb2?$XD\xf7E\xdd\xb2?\xe4\xcc\xb7\x14\xf0\xa1\xb2?\xcf\x07\x0c"b\xae\xb2?\x96t.\x86\x1f\x84\xb2?\xe5\x819\xc1\x8b$\xb2?6\x9b0\xa3\x82\xc0\xb2?\x14\xe8\'<\xdf\x94\xb2?kA+\xa3\xab\xb7\xb2?j<\xe5=^l ?\xbd\xbeV`K\x88=?\xf5\x9a\x8f\x99}\xdf*?X_\xfc\xe3\x00u7?0\x07\x9a/\xbe{6?\x8d\xa2M\xcb\'\xd70?\x15\xf7K\xa4v\xe72?\x95t\r\xad\x17\xd98?\x9d\x97\xda,\xfb\x98<?l!\xa9\xec\x00 \x14?\xb0\x9655Ab\x1c\xbfK\xf6\xb5`\x8af,?\x92\xc0%\x1b\x1d\xf59?\xe5\x10\x11\xb6\x0fZ/?:\x83X\x03b\xaf1?\xa43\x1e\x9e\xeb`8\xbf\x0cj\t\x8bI.5\xbf\xb9\x9bK\x828T5\xbf}\xffR\xebki;\xbf\xe6G\xcf\xdfc\xed9\xbf\xe1\x0c\x85\xab\x15\xe1:\xbf02GW\xf8\xcc4\xbf7\xbb\xe3\xdf%\x03.\xbf\x1c\x8c\xacJ8\xe7;\xbf\x07\xba\xea\xddu1A\xbfX\xa1\xc1\xfd\xc22*\xbf\xd90;\xcc\xdf\x7f4\xbfE\xa2o\x87\xc0K>\xbf\xb2\x1d$wT\xb06\xbf\xe3~O\x18\x0f-=\xbfK\x1c\x05X`\x96Y\xbf\xa80\xb2\x92\xb36%\xbf\x90\xa7\xc9\xd9p@K\xbfO?\xe6$\xc7\x8c(\xbfB\xead\xe7\x08\xf4\x12?Q_\xac\xc9\x16\x90V\xbf\x14\r\xc4K\xccd\x0b\xbf<\xea\x9d\x0b\xdb\x060\xbft\xda\xe0\xe0\xa3EJ\xbf\x0e\xe0\x1f\xb8\x91\xceX\xbfK0\xabh\x85\xc9J\xbfgX]}\xc2\xdcB\xbf@\xc8=p\x8d\t?\xbfwQ$\xf0\xb6\x82M\xbfNB\x18\xc3:wG\xbf\xb8}0M\x90\x00\x89\xbfD0V\xe8U\x02\x89\xbf\xf9\xfe[\xe5>\x87\x89\xbf\xcd\xc1\xdcM\xc8\xfa\x88\xbfPm;\xd8\xac\xde\x88\xbf\xa7\xde\xa0\x8c\x9c\xc7\x88\xbf\xb2{%\xfe\x02b\x87\xbf\xd9\xd9\xc3\x14\xbb\xf2\x88\xbf\xb8\x19_t\x94\xf9\x87\xbf\x8b\xa8Q^*\xb6\x89\xbfg\x85\xf3g\x1e\xde\x88\xbf\x117`\xe0\x0b\xb7\x88\xbf\xb0\x1fH\xfc\xfd\xb6\x88\xbfxM\r\xc6\x8a\x80\x89\xbf`\xf2\x1e\x1aI\xf9\x88\xbf\x81Q)\xe5A\x03e?\xe5\x9d\xb6C\xa48Y?\xcc<\xe0\x87B\xd4b?q8\xfb\x1d\xdb\xbfS?<\xb5\xc1\xc7][Z?\x8f\xe2\xcde\xd9\xf5c?=\xadr,\x93,`?\'\x8b\xc4Q\xa1-a?\xb2\xaf\xef\x07\xe0\xd5b?%SP\x06\t\x7fc?\xe4"\xdc\xea\xdb\xb9b?[\x91\xd8\x07>Ba?1\x0bz\xc6Na]?a\xb3\x0f\xf5\xd0la?*\x04\x91R\x1bNb?\xc1R\x8f5}\nd?%\xb1Z!D\x0cE?\x1c\x1a\xc9\x85\x19)\\?N\xe9p}\x95\xdbC?\xc5\xb7\xaaC\xa7+B?\x9dU[\xae\xa2\xe3`?4\xce\xcd\x1c\xea\xdcF?\xf7K^\x19(\x9fI? \xcf\x9eq\xc1K[?V\x11.\xf3\x19\x1dd?\xe7\xd56\xd4etZ?\xd4\xfe\xe4\xfcZ`W?VNZ\x08\xe1\xbcO?\xac\xb9s@\xf4z[?\x1d\xd5\x04\x81Z\x1cX?\x10b\xba\xba\x16\xb6Z?\xc4\xffo\xde?yV?\x8am\x83\x8aR\xb0U?\x8a`?\xa5>q\\?\\<R\xd5)\x0cW?\xed\xee\xf9\xbd3\xe3Y?\xdd!^\xa2\xf9\xa2P?\x08T;\xcct<Q?;\xf7;\xb0\xa7\xf4X?b\xa1\xc8\xac\xda?Y?\xa7\xd5\x9e;\xa9\xf6S?\xf1\xe2\xdf\n\xeaMS?\xb64\xc3\x05\xfe\x92R?%\xf2\xbb"UTW?\xf3\xf4\xa7\xfd\xd4\xdbT?\xfb\xd9R\xf3`[u?P"\xacH\xc8\x96~?\xb2C\xad\xcb>|x?\x90=we\x9ev\x7f?\xc2\xfeo\xd7\x90\xeb\x7f?eL\x9fbt\xe4w?\x19\xc06\x95P1}?\x8cI\xd9\xc6\xd8\xfe|?\xc2\xd8\x9c\x15;\x81y?#\xfe\xd3\x91P\xc1t?\xe2\xa6\t\xd6\xf0\x8cx?\xf1)\n\xd2\x81\xddx?S\xeb\x02k\xf8\x04{?s>\x9bl\x0f\x81x?\xbc\x80\x88[\x92\xd3y?|\x1f\x95\x82\x8f\x01m\xbfG\xb9\x16_\x9a\x0f`\xbf\x16\xa2\x97(\xfd$i\xbf\xc2r\xaf\xbd\x85\xfeZ\xbf\x92\xb1\xcc\xac\x1a\xcf^\xbf\xb6 5\x1bi\x0bj\xbf\x9e\x9dY\xac\xa8\xd5c\xbf\x0e4.\xbe\xbf(d\xbf\x7f\xb1\xc9&\xc8\x1di\xbf\x12>h\xd0\x05\xffm\xbf\xcac[\xec\xd0\xe5h\xbf\xcf\xead\xec\xcc\x0ei\xbf\xfe\xa4\xeb\xc3\x00\xd2d\xbfd\xdb\x0f\xc3\xcf\x01i\xbf\x1b\x1b\xe5r\xc7\x14h\xbf\x88\xf9\xbd\xed\x89\xc1p\xbf\x1f\xd6\xf43\xee\xf5a\xbfB\xe4\xe8\x83\xd4\xbam\xbf\xcav@hX\xebW\xbf\x17\x01\xaaim\xfcQ\xbf@\xcaY^\x04,o\xbf\xec\xc8\x96Ohth\xbf\x04\x06\xb7\xd7\xcf\x9di\xbf\xca\xe0\xf9\xda8\x01n\xbf*\xb8\xff\xc1\xc2\x0bq\xbf\xa5:\xd4U\xa4~m\xbf\x10n*/\xec\x05m\xbf\x01\xda\xbd\xa0~Mj\xbf\x90\xa4\xedx\x0f<l\xbf\x1b[\xac\xecY\x94l\xbf\xbe\x1a\x9f\x03t\x98X\xbf\x9f\x1b\x87{\xef\xe7c\xbf.\x7f\x16\xb0\xe1CZ\xbf\x9c\x80\x14\xd6\x81\xb6f\xbf\x17]\xe5\x0cVFd\xbf\xd3\x89\x81^\x84{[\xbf\xea\xba_#!\xb0_\xbfl\xa4\xb4\x1dC\x81`\xbfM\x98y\x0c\x9cr]\xbf\x92\x88CQ\x07\x1bW\xbf\x1d8TC\x10_Y\xbf\xbd\xd62\x03R\xa5Z\xbf\x98\x8d2\x9a\xd5\xa3\\\xbfs\xea\xf9d\xb4r\\\xbfr\xa1\x04\xd0\x92.\\\xbf\x06\x9f\xbf\x054\xffl?Y\x95v;Y\x98y?\xb4\x9f\x01\xe6\x95\xf2q?\x84<5\x18j\x06{?\x01\xa5\x1a\xa2\xfc~y?\x83\xc1<\x9c\xd2\xe2p?\xb8\xe5\xf4\xf55Mw?(B\x8f\x87\x14\xe7v?\xf6\xb9NV/\xcbr?&f\xfa\x071hl?\x1a\x92P\rg\x92r?C\xc5\r\xed\xffJs?4\xe5;\xc3_\x9cv?\xc2~\\\xb2\x9f\x86r?\x18\xf599mgs?\xe7?\x97\xf7\xce\xa4\x85?\xd6\xbb\xa2\xf0uv\x84?w\x87\xf8|\x99[\x85?j\xa7c\x82\xf5\x07\x84?vd\x06q7P\x84?\xf2_F\xcd3\x87\x85?\x13&\x15vG\xf6\x84?\xe4\xad\x18\xeb\x1d\n\x85?y\x14\xcb6#K\x85?\xb3\x00\xb6\xb4R\x94\x85?3f\x15\xb1\x02f\x85?\xfd-+\x85+8\x85?\x11\xba\xa7\x02i\x0e\x85?\x19\x8d\xc4\x13\xa82\x85?\xf5\xd4\xf9\xbc@B\x85?\xc8\x7f\xde\xf7\x08\x0ea?\r/\x162\xdaj@\xbf\x1f\xd0\x1e\xc4AqP?\x988B\xe7l\xf5:\xbf\xda\x1b\xca\xd0\x11\xeaE\xbf\x8a\'\xady\xb9v[?\xd6\xf0\x0b\xc8\xcat=\xbfL\x94\x9d\x19&%0\xbfb\x91\x92\x1a.\xefJ?\xf6\xd7\xcb\x9e\xf1\x92`?\x9ff\x15\xb5\xd4\x8eK?"=T\xca\x9fh>?X\xc3\xc8Lf\x02\x16?\x07\x9f\xa4\xcd*HO?\x13\x90\xc8\xf1\x80\xeeD?*=\x93\xf1\xd8\x81\xcc?o\x03\x9bj\xaal\xce?\xc8n?\r\xe7h\xcd?/X\xe9\x90\xadR\xce?\x90 \xdfb2\xdc\xce?n\xe8\xb3g/#\xcd?},\xc1~4{\xce?\xa1>\xb5\xb3\xe3\x94\xce?M\xb7\x82*\xf9\x88\xcd?n\xe4\xf0Y?O\xcc?/\xbc\x87\xe8uS\xcd?jn\xf0\x07\xcd]\xcd?e\xa9\x814\x11\xa5\xcd?\x93C\xe6\xda\xa5\x18\xcd?\xf5\xc6\xdeZ\xa2\xae\xcd?5\xa8\x8d\xc5\xc3\\l\xbf\xb2$\xc7eEtq\xbf\x8fJe\r\xc6xh\xbf\xc5g5\x06\x1c\xe4w\xbfh\xea\x85\xef\x81\xd8h\xbf\xdd\xe7e\x1d\xb1}l\xbf\xfc?\x81Y\xbd\x81d\xbfPo\xa5\xfc\xadRc\xbf?\xfe\xc8\xcf\x02\x8bh\xbf\xe0\xcent\xd0\xe0k\xbf\x9bbk\x9f\xdb\xa9f\xbf\x9a\x01bt\x05\x0eg\xbf\xca`V@\x16\xeag\xbf0\xb3\x07\x8f26n\xbf)\x12A\x0c\x0f\xedf\xbfdP\xa1\xbe\xa6;[\xbf\xd1&-\xb8\xdd\xbb6\xbfT\xc3\x00\x9d\xe6\x08S\xbf\x8e.\x0esI\xa71\xbf;#\x14\x93S\xc0\x1d\xbf\xa5\xaa\x04\xc1\xbb\x01U\xbf\x82\xe6\xb1\xfcT\x80=\xbf)\xc7Y\x1dA\xf8?\xbf\xec\xb1\\\xc9\xa9\xc9R\xbffL\xc7\xe3\x9b\x82\\\xbf\xb2\x7f\xfd\xd9\xf0zQ\xbf\xab\xfa-\xe1[\x03S\xbft\xed\xe7\x9b\xb5\x9bJ\xbf\xcf\x92\x9f\x9d\xc8\x8fS\xbf\xdc\xd2R-\xbd\x14P\xbf\x9b\xfe\xc0\x9bYhR?\x076\xe5\x8az\xca5?\xa3&*\xc4\x11\x00L?\xdf\xac\x1d\x0c\x1eZ??\x11Y\xb5\xa5\x9fo#?\xbd>\xa4*\xfb\xedQ?\x96M\xe4_azE?)z\x01\xe5trU?\xdb!9\xc0A\xf0K?\xee\xeb\xd77\xc3*H?\x97\x14x!\x08aJ?\r\x01Z\xf8\xf4\xcfN?\xc0\x9e\xaef,\xd5G?\x1et\xc4\xc9\x12xN?kr\xfb\xa7\x00\x8b:?\x98\xbc\xb4\x80\xc2\xcdN?\xf7\xaa\xb1\xd6\xe1\x89T?\xbe\x8e\xe5\x1d\x88\xa5N?\xceN6\xdc`xW?u4\xc2\xbc\x0c\xf2^?$h\xaf\x9e\xb7S\\\xbf\xf8\x12\x1a\xed1\xedE?\xaf_f\x9d\xa1NO?5h\xa6B\x1c=b\xbfa~\xbb\xef=\xce\x01?@\x9aW\xf4\x9d\xe1^?)\xcb\x00\xf8pd4?xx\x93\xfc\xca\xffV?\xae\xd4\x90r\x9c4\xf4\xbe\xfe\xc1\xd3\xb6\x9a\xc1P?\x1f\x06\x9a\x8d\xcdq2?\xcb\x036\r\xc8K \xbf\x1f|\xc5G  0\xbfR`\x98\x9c\xdb\x90\xf6\xbe<6\xc9E\xce\x89\x19\xbf07C\x87\x908:\xbf\xcei\xd9\xd1.\xd6#\xbf\xc1\xde\xc4\x92LT4\xbf\t*\x8bu\x8b\xf7,\xbfj\xf6-k\xc2/6\xbf\x1c\xd7tiB\x1d5\xbfI]\xc68r\x07+\xbf\xad\x80\xce\xad\x98\xbd=\xbf\x1a\x00\xecb\xebp.\xbf\xd3\xca,1W8)\xbf\xd1E[\x0e\xfe#V\xbf0\x93-\xea\x87\xacJ\xbf\xe0\x9d\xffW)\xf5R\xbf\xbd!\xce\xf3\xcc\xdaT\xbffU\r\xd4\xcfrR\xbf\xc5\x89\x18h[\xf8[\xbf\x02\xa1{\x16:\xc3X\xbf\x1a:\xf2\xa3\xbcbW\xbfh\xb1\xcbJa\x83U\xbfl\xf5\xd5\x94,hK\xbf\xb7J&\xf9L\x19S\xbf\x85\x14\xe4\xb3\xa7\x1eR\xbf\xcf\xec`\x06\x86\xf0Q\xbf\xdc\xa6=0\xcd\x1bT\xbf\xeb\xd0\xa7z]"U\xbf\xf7\xb7x\xdcJ\xfdD?\xcb\x04\xa1fU\xd2\x0e\xbf\x01\x8b\xfc\r\x00/;?>_\xe3h\xc9\xb9(\xbfUZ\x8f\xad\xffS\x1c\xbfW8\xcb4&}A?\xae\xff\xf1\xc4`\xe7\xe0>\xb5\xb0]\x1a\xaa\x0c$?\xbc6\t\x1d\t\xa9"\xbf\xce\x1d\x85\xc1^7I?\x83\x87\x81FA\xe6=?0\x86dA|\xcc3?\xca\x06\x92N\x1aX\x0b?\xab\x96c9\xc8\xbd6?\xfa\x1e\xa5gs\xbc0?\x07\xe0\x1f\xe8\xb2\xb3^\xbf+\xac\xb6\xfc\x1e\x1c`\xbf\xb01\xf9\xaf\xcb^_\xbfQ9!\xc3\x89"`\xbf[\x11\x03\xff\x8fC`\xbf\xa2=\xe9\x0b\xdd\xc6^\xbf\xc4\x98\x12\x10\x95,`\xbfN\xf3\xa8b\x88|`\xbfocE\xb3\xff{_\xbf\xd2U\x91\xe7\xff\xb0^\xbf\xe5\xde\x88\xee\xfda_\xbfNU\x8a\xc8\x12\xd2_\xbf\x90\xe6\x0b\x94\x96\xd7_\xbf5\xf2F\xda\xc43_\xbfVz\x08M\n\x97_\xbf\x1d\xab\xc1ncD\x8a\xbf\xb9\xb4H\x1dFR\x89\xbfv\xf9:N\xe8\x89\x8a\xbfiQ<\xa8\xbd\x83\x8a\xbf\xdf\x01t\x93\xce\x1b\x81\xbf\xca\x0eP\x86\xab\'\x8b\xbf`\x12y\xabGE\x8a\xbf8Aw\x91\x8e\x90\x8a\xbf\x1d\xe6\x87\x15y\xd6\x89\xbfPB\x7f\xae\xe5\xe9\x89\xbf\xee\xd3\x868\x8e\x88\x8a\xbf+)"m\xafa\x8a\xbfZ\xb5\xb0tz\x86\x8a\xbf<\xbc\xe1\x9f\xb7\x81\x8a\xbf\x08\x00\x11\x9a\xafK\x8a\xbfD\x83\x93\t.Wb\xbf\xc1P\x95`P\xefb\xbf\x1a\xc7\x1f\x8bC\x96b\xbfW~\xb4\xec\x19\x1dc\xbf\x82c\xb8A\xfc\nc\xbf\xcc\xb5\xbd(\xa3`b\xbf\x8c\xb8\xed$\x12\xc8b\xbf\xbf)\xaea\xe1\xb3b\xbf\xdf$\xb2[\xfb\x9ab\xbf_E\xc5.\x82Ub\xbf3\xde=3\xe9\x82b\xbf\x15\xf5\xe5\xd6\xac\xc7b\xbf\xf2s\x8by%\xd5b\xbf\x08\xf1]\x01\xf4\x98b\xbf\x1f"a\x92h\xa7b\xbf\x04\xff\\\xa0\xe5\x8a\xef\xbej\x0f#\x9e\xea\xe99\xbfQ\x96\xf9\xb5\xddq)\xbfQ6\x86\xab,e.\xbft\xa9{\xc5\xc4\xb94\xbf!\xb1\xa8\x95_\x07 \xbf\x18\x94\xc5\x08\x14-1\xbf\xaa\xbcr\xf9\x00\xe1(\xbf\xf4\xc5D\xe8\x96\xce\x07\xbf\t\xf5\xffZ?v\x1e\xbf\xedR\x83\xee8l(\xbf&\xd8\xee\xe0\xc9[&\xbf\x93\xa7\x8e\xc78\xa91\xbf\\#\x946K\xcd2\xbf\xdbWS \xd1\xa9,\xbf\xf7g\xd0\xe0\x8e\x17B?\x9c\x81\xf7\xd9F\xff\x1a?\xba\x9f\xda\x12\xee\xe2\x16?\xd7\xd1\xa8\xfd\xd3E\x11\xbf\xc0Cz\xba\xc4/\x19?\xcf\xe2\x9bGO\xce0?\r\x05\x9ai\x99\x026?\xf4\x15\xab\xb0\xb9c\'?\x97/\xd5\x91\x90\x99B?.kAS\xb6\xf70?+\x99!\xc82\xec,?\x88\x80\xf0nR\x00&?\xe6\xd5\x9f\xaa\x90\n\xff>\xa1\xa99jbZ9?\\S\x00Q\xf8\xb9*?\xdb\xf9\x80]\x1b\x86h\xbf|\xa1z\x1d\x80\xb5h\xbf&\x93_\xa4o\xfdg\xbf\xa1m|\xf9\xd3Yg\xbfe\xc3G\xc4\xe6\xcah\xbf(\rOm+(g\xbf\xf2ip\x7f\xcd\x90h\xbf\x05\xa8\xd7u\xe2"g\xbf\xe1\xa4#$\xac\xbdb\xbf>\x8d\xc1t\xe9\xb5g\xbf\x86\xa5\xe4\x13\xc1\xddi\xbfr#\xc4\xc4\x9f\xfag\xbf\x12=\n.H\xddg\xbf\x0e\x00\xd5:\xf1=j\xbfC\xcb?\xce\xd4\xeef\xbf\xe0\xb4\x05S\xa5\xae\x11\xbfc\xb3[\xe77\xd6)\xbf\xc3\xc6H\x9f\x80\xa8)\xbf\xd1\x9d\x8f\x8f\xefj%\xbf}::e\\70\xbf\xf7U\xd5\x0b\xb3\xff \xbf\x9a\'\xad:\x8e\xa5.\xbf\xae\xf4?\xe8\x97\xf92\xbf\x05p\xf6\xb4\xf8A,\xbf\xfb\xf3\xaa \xcc\x88\x1f\xbf6\xeeq\x84*\xf31\xbf\xd7Nd\x07\xe3\xa9\'\xbf\xacS7\x15\xb3\xf5*\xbf?\xb7\x96d\x0f\xa6\x1e\xbf\xa0\x06J\x06\x02\xec,\xbfc\xe9-\xc5\xe5\xe0\'?e\xe1\xcdE\xaa\x8dQ?\xc5R%\xfcx:=?\xab\r\xd7\xb5\xe4BK?jt\x1f\x90\xf3\x04P\xbf\x9d\xfa]\xbeA\x8e6?:j\x0e\x86M\xdaA?@\x96\xd0\x17\xdb\x018?[^l\xe8Zr6\xbf0\xa9\x18\r\x9f\xa97?<S\xb9\x8fT\xd4*??\xcf<kq8@?\nB\xf7\xbc\xcamC?+\xba\x88HK\x9f6?R\x8d\x93\x04+A<?\xdf\x0f\xec\xda\xce\xf5\x9f\xbf\xacu0\xe7i\xc5\x9e\xbf\xc0\xcc\xa8\xf6\xe7\x00\xa0\xbf\xf2=zFv\xda\x9f\xbfU&8\xd20\xa9\xa0\xbf\xb2\xba\x11\x91\xe1\xe0\xa0\xbf\xd8\x0f\xa7\xd2\x0b\x0f\xa0\xbfnYh\xe3\xeev\xa0\xbf+\x07\xee\xa4P\xb6\xa0\xbfP_\xa5\xc5\x10\xb0\x9f\xbf\xea3]\xfa\xf9H\xa0\xbf\xd7\xbc\xde9/\xe3\x9f\xbf:M8\xc3\xce\x0c\xa0\xbfq/SYO\x10\xa0\xbf\xcc\x97\xe2m5\x0b\xa0\xbf\xbf\x94\xa2("\xcb\x8a\xbf\xa8h\xf5Cx\xc5\x8a\xbf\xb0\xc95oKl\x8b\xbfK\x10\xd9\xca#:\x8a\xbf{\xabE\x9d\xecc\x8c\xbf\x83h\xbff\xad\x8f\x8b\xbf\x98\x13\xc6N\xbd\x13\x8c\xbf\xe8\xc6QU\x8c\x1c\x8c\xbf\xed-PV\x9e-\x8b\xbf\x84\x0ex\x950D\x8a\xbf\xa1\x08\'\xb4\x14\x12\x8b\xbfZ2\xb3\x05n\x11\x8b\xbf\x9e;\xbbm>\x1a\x8b\xbf\xc0%k\x98\x87\xc6\x8a\xbfJoi0\x19S\x8b\xbfuS\xe5\xa8\xb7\xf5f\xbf\xa5x\x1a\r\xb7\x8cg\xbf\xba\xc2\xcb_d\xf2g\xbfY\x00,.@Vi\xbf\xcd\x93Z\x067\xf5i\xbf\x17\xae\xca\xe8t\x85[\xbf>}\xdb\x12\x9d\xe1g\xbf\xc5l\x19b\x84\xcdf\xbf\xf6\x1b\xb8\xedz\x01h\xbfKE\xdb\x86\xb7\xdeh\xbf3\xf5X\xc6\xf8@i\xbf\x04f\xa6\xd8\x1f\x92d\xbf\x0e\xddG\rpdc\xbf\xc1Zu*}\x8bh\xbf\x80^\xe2v\xc4\xe9j\xbf\x0e#]\x1f=nZ\xbfj^\xad5\x88_^\xbf5,T\xc3\xcb\xdf\\\xbfA/\x0b5cg_\xbfHo\xd0\x02\x8d\x97`\xbf\x97\xe8\x02}\xdeq_\xbf\xf1\x9d\xc9\xa3\xc0\xab^\xbf\x87\x0c\x02T\xf3\x89_\xbftZ]|@%[\xbf=U\x1cP\x03\xaf^\xbf\xce\xac\x950g\xc2]\xbf\xe5wJ\xe4\xa2\x02`\xbf\xac\xb72p\xa7\x13_\xbf\x1f\x81$\xbd\\q\\\xbf\x18\xda\x1a\x8bs\x83\\\xbf^jl\xeb\\\xc9\x99\xbf\xf7\xa5\xe3\xbc\x83\x8a\x99\xbf\xae"v\xbf\xb1\xfd\x97\xbf9\xdb\xf65\xd2\x19\x9a\xbf\xa8\xb5{\xb3\xe2o\x9c\xbf\xe1^\x84J\xb5\x12\x9a\xbf6\x12>\x82\xdd\x95\x99\xbf8\xda\x9f\xffdI\x99\xbft\xb8\xfa,N\x02\x9b\xbf\xd2\r_\xd6\x90\xaf\x98\xbf\x05-\x06"a\xa8\x99\xbf\'\xff\xf3\x01\xb1\x14\x98\xbf\x93\xda\xe3\xa1\x19e\x98\xbf*\x9d{^\x06\x1a\x9a\xbf\xb6~\xd7\xc10\x85\x99\xbf\xad\xd0G\xc6\x1a\xbe\x97?z\x9f\xae\x0c\xb5\xce\x97?>S\x06"\x8f\x07\x98?\xd8\xe7\xea`\xe6\xb5\x97?lbUO\xa6\xbf\x96?QO \xc0\xaeW\x95?\xb4\xa6^\xc2\xfd\xa7\x97?\xb2\xdc\x9c_=\x94\x97?5\xf7\xf7\xf5?/\x97?\xfe\xac\x9b/!\x00\x99?\xcd\xb6\xc0\xa0\x16\x04\x98?\x16\xa6\xe1\xcc\x0e\x05\x94?\x96\xa9\'Mt1\x97?\x06\xaa}\xc4#Y\x98?\xab\x11@\x9c\x14\xc9\x98?\x8f\xb2\'%\xa0\xc4;\xbfseH\xbc[`N\xbfW\xdf\xa1\xae\x8b\x16K\xbf\xd8\xa2\xedt\xaf5R\xbf\xe6\xc4y\xa1\xea=V\xbf\xa5\xa7b|\xe7eP\xbf\xaax]\xc8\x98\xafK\xbf>\xd4\xc5\xcctbP\xbfq\xcc\xa75q\x857\xbf\xa5\xf3\xaf}xdM\xbf3 \xb7\xa9\xdd\x99H\xbf\xf8\xf1\xf2z\x9a\x8aR\xbf\x97\xb0\xa7\x15\\\'P\xbf\xa3\xbarX\xcb\xd1D\xbfW\x15\x1bAM\xd0E\xbf\xe4\xc7\x07`n.\xad\xbf\xa5\x7f\xef\xb1\x0f\x13\xad\xbf\x88}\xd4\x02m\xc5\xac\xbf\x1d\x07}\xf3JC\xac\xbf\x00v\xf2\x8dYk\xad\xbfh\xd78\x1dL\xc9\xad\xbf\xb08^G\xfaL\xad\xbf\xab\xb4\x9f\x9b\xbc;\xad\xbfw\xd6R\xd0\x87\x1c\xae\xbfD\x9f\xd01[}\xab\xbf&\xd6m\\7-\xad\xbfc&\x1e\x85\x9b\xcd\xad\xbfc\x99\x98$\x85K\xad\xbf\xfaLo\xfa\xce\xb6\xac\xbf\xe2\x8e\xaf\xeam\x7f\xac\xbfN\x93\xf1\x88\xdd\x8et\xbf\x95r\xed\x88e\x94t\xbf\xf2\xddg\x91\r\x8cs\xbf\xdf.\xa4E\xed/t\xbfB\xb4^W&\xd5t\xbf~\\N\x1f\xff\x15t\xbf\xc3\xe3<\x84Kat\xbf\xe6F\r\xaa\xa5\xc9t\xbf\xc7)}0\xec\xbbs\xbf\x0e`\n\x85!\x1fu\xbf\xe0\xd6\xe5M(%t\xbff*B\x1d\x0b\x92t\xbf\xd8\xd2!4\x8e\xd8t\xbf\xa6\xb6\xf6B]Et\xbf\xa5\r\xa5\xac\xb0#t\xbf\xf4z\x81m\xcd\xdf<?\x04r*<^NO?ZZVV\x8bNR?a1\xbd\x829\xebP?4\xd9\xe2\xb3\xb8_5?\x19\xc7\xc7\xc0e*;\xbf\xd2T\x9a\x9e\x0e\x83O?\x01[\xff\n\x8a\xa1K?\xf8>\xa4\x92\x91\xe92?\xeaj\xffmc\x7fY?\x13\xd4\xd9\xc8\xe5\xf8P?\xbc\xdb\x9b\xff \x12`?N\xe7j\x1e\xd2\x80:?\xe6\xdfg\xe5\xa43T?u\r9yN\xc0]?\x0c\x1a\xaa\x01\x86\x91U\xbfj8F5;\x13[\xbf\x9d\xda>\x80\x19\x03X\xbf\x17\xd5\xbc\x1c\x06\xf2J\xbf\x07t`\x85\x91\x94f\xbf\xce\x9c\xad\xdd\xd9\xe2Y\xbfW\xc1\xd3\xdb\xf5BY\xbfj\x01\xaec\xfc\xd1[\xbf1\xeb\x99\x96\x9d_H\xbf\xab;n\xcb\x93\xcea\xbf6R\x18\xbbB\x80Y\xbf\x9ab) Y\xacT\xbf}>\xe0\xa7\x14-c\xbf\x12\x92\xce\xdc\xf5\xfdU\xbf\n\xa3\xbc\xfa3\x88X\xbf\xb0\xce\x10\xd8\x10\x81\x7f\xbfqn\x877\x87\xa4\x80\xbf\xd5\xd5\x89\x0f\xbdL\x81\xbf}Q\xd3\x01i\xeb\x80\xbf\x8a\x83\xa1c\x1e w\xbf\x19yp]\x0f\xf9}\xbf\x03\xf0\t\xad\xa0t\x80\xbf{\x82\x972\xce!\x80\xbf;\x13~\xba\xb1\x99|\xbf\x0b\xe6\xb4f\xf2k\x82\xbf\x80\xd4\x9f+M\x07\x81\xbf\xde\xa7GY"\xae\x82\xbf01\x06\'\xc6#\x80\xbf\xca?\xd7\x9cc\xb5\x81\xbfj\xbbt^"\\\x82\xbf\xc9\xd0\x85\xa5#\xe0.\xbf\x12\xfeK/\x8c\xf4I?2V[\xae\x90\'J?\x1f\xc1\xe9\x92\xfe\xe4G?{\x9c\xcc\xd5\xf0\xeb\\?4\xc1\xa2R\xa5\x89c\xbf\xe5#\n\x02\x1c\xaaJ?N\xc2\xec\xed*eG?\x14\\t\x18\x9esN\xbf\xad@\xd9\x0c\xc3\x97J?\x9ao\xff\xdb\x86AK?\xd1\xdb\xc4$\xe7\xd2S?\xa9\xf3&\xacoT"\xbf\xec\x15\x8c\x14\xae\xd6L?IU\x1d\xd4\xb5MR?\x0c\x90%s\xa8\xc9\xaf?\xee\xe5\x0c\xd9\xce9\xb0?p)\xc3\xeb\x87\xeb\xaf?\xe0\xe7"4k\xf5\xaf?u\xa0{B\x11\xf6\xaf?\x98\x9e\xf3\xd2\'\xcf\xaf?\xf2]"b\xa4\xf2\xaf?D\x1e\xfe#\xe0\xf3\xaf?X\xc6BQ\xa0\xe1\xaf?\xf2}\x94\xa7E\xe6\xaf?\xf7~\xbcx\xeb\xc0\xaf?A\xeaH\x82\x9a4\xaf?\xba\xd6\xe0k<\'\xb0?\xb8Lz\x1d]\xb9\xaf?{LL\x9c\x86\xa0\xaf?\xd9_\x80\x80\xaa\xcd\x83?:3\n\xbcy\n\x84?\xe4\xc0\xedO\x10\xe8\x83?L\xa2\xbd\xaf$\xdc\x83?C\x87\x8b\xb5\xe2#\x84?\x184\x8b:\x89\x0e\x84?/\x9a?\x8e\x83\xf5\x83?juI\xa4\xc3\x16\x84?\x01\xfcO\x07\x17\xb6\x83?\xb4[\x8c\x16d\x16\x84?\xd0\xf0\x03E\xff\xe5\x83?\xcc\x03f\xb0\x14\xf6\x83?\x84a\x07\xb36\x1b\x84?\xce\xc6_\x08\xc5\xde\x83?_q\xbd\xd2A\xf4\x83?G\x189\\\xc3A\xee\xbf%\xf14\xc0\xfd?\xee\xbf\x15\xdao\xf2<H\xee\xbf\xb9i$}\xa26\xee\xbf Ua\x08\x94<\xee\xbfZ\x0f0(e=\xee\xbf\xb1\x98N!^?\xee\xbf\xae;\xb0q\xaaA\xee\xbf\x12%i~\xaa<\xee\xbf\xd4\x8d\x0c\x87U2\xee\xbf\xa7\x16&o\x02>\xee\xbfU\t\xa8"\xa0?\xee\xbf\x97\xd9\x86\xf7\xb0k\xec\xbf\x9b*\x95\x0f\xee?\xee\xbf`\nr\x1f\xffG\xee\xbf\xaf\xb1\xb3Bi{"?B\xe9t\xe1\x84\xc7C\xbf\xd4u;\xf99(@\xbfQoQ\x9d\x06\x90K\xbf&+\x86\xb5{\xb5X\xbf\xa0\xd4\xa8\x9a\x18\xefJ\xbf"n\x0b;\xb6\x1bE\xbf`L=\xf1??E\xbf\xc0\x7f$9\xb4\xc3\x0c?\xfa\xb6\x11a\xce\x159\xbf\xe0?\x00\x13\x80\xfb;\xbf\x1d\x84iC\x95\xffK\xbfa\xe5\x17\xa6\xd17G\xbf\x88\xa9\x8a\xc6:\xe96\xbf\x02\xeaNNJ\xd6,\xbf\xac\x8b:i\xaaA\x15\xbfh\xf2\xfd\xa2FU=?\xbe\x15\xfd\x10\xf1x"?\xa3\xb0\x81{I\x1e@?\xd6x&\xb6\xc3=@?r\xc6r\xc2_\x84\x16?X4\xe2\x80\xe1\xc37?\xefzY\x99\xcd97?\x1d\xd2B\x17\xfeJ*?W\xbe\xf1\x1c\x0e\xb6\xf6\xbe\t;\xa1\x07\x06\x1f\x1d?@_y\xce\xee\'%?{\x1b\xca\xca\xacb2?i\xb4\x1dS\x93\xd2"?l\xce\'\x08\xd0\xf1)?\xf0\xc3\xb58\x97\xd7\x1e\xbf\xad\xb4T\x9c\x15\xe8A\xbfm\xe7\xb0=M\xf0/\xbf\xff$\xf7f\x06\xb8G\xbf\x96z\xd6|c\x83C\xbf\xc5\xdd\xdeIT\xec2\xbf\xf4\\\xbb\xceN\xcc;\xbf\xb7\x97\xc8\xc8\xc7\x905\xbf\xfc25-mY5\xbf\x7f\xf5\xa3a?\xc6\x1d\xbf\xd2\xa8\x91\xbfQ\xa1%\xbf\xd4g\x0b\xfb\xdd\xdc/\xbfc\x13\xffs\'\xad;\xbf\x94P\xa6\x10I\xa21\xbf\xe5\xd1At\x08\x165\xbf\x02\xed\xd5-\x8a\x0b3\xbf\xf7\xd9\x128\xab\xb1A\xbf\x97\x11|\xbf\xf2\xa67\xbf+\xfaO\xf9\xda\xe6B\xbf\xfaA\xad}n^C\xbf\x8a\x80\r\xa2\x08\xa02\xbf\x01:\x8aN\xfd:B\xbf\x14\x0ed\xac\xab}:\xbf\xa2A\xc4T^|6\xbfR\x7f\x0b\x82\x87\xda*\xbf\xf9\xb7\x95~\xa0u4\xbfL\xf1\xe0\xdb\xa8\xcd9\xbf\xb0X\xd0i\xd9@@\xbf\xad\x1d\x81\xba1}7\xbf\xa1o\x86\xd8\x04\x947\xbf4\x07\xa1\x9d\x03\x86$?\x15\xa2\x00\x08\x87\x067\xbf\xaf\xc1\xa8\x9acC2\xbfC\x0f,\x99Tc\x19\xbf\xad\xe2^\xcf\xec\xee\x0e\xbfN\xa6\xc3\xb0\xfc 4\xbf]\xdcd\xdfL\xa6\x1b\xbf\x97%5\xf4\xf1\xe68\xbf7\x11\n\xeaB`4\xbf\x08\x95\xb0Z[k5\xbfg~\xb0\xd3"\x0b0\xbf!\x0b\x88\xe6\xd2\x05>\xbfB\xe5\xda\x18:\x93"\xbf\xc7U\x8fV\x9c%*\xbf\xc5uZ\xd5\xe1a$\xbf\x843ZiruL?\xce\x183\xe4\xa6\xd2Q?J\xc6\xae\xaew1M?\xe8%Iy\x9bkV?\xaf^$5\xb5\xbdQ?\xcb\x8d\x06\x02\x7f\xaaL?\xf6!\xe3\xe1\x14\xb1T?\xca\xae\xd9;\x88LU?\xc7\xa4\xbeOG\xd1.?\xcf\xc4\x9d\xc5\xd5\x8dJ?U\x83\xe2(c\xbcI?\xda\xbeiG\xff|F?\xb2P\x08G\xb4lS?\x84*(\xcf\xc8\x9dL?b\xaf\xe4d\xf7\xd4R?\x06\xa0\xde\xb0\x7f\xe1j?\xf0\xefg\x93\xf0\xc6k?\x84\xb1\x04\xe5\x96Nj?\x00p+\x819Ek?\x94\xf7\x172N\xa4j?\xd14\x10\x88\x8f\xc7k?\x8f\x16\xad\xaa(\x05j?`\xea\x9bi\xed^k?\xb3/\xaa\nc\x9bk?P-J:%?j?\n\xf3\x1d\xa1!\xc6h?\x85\x96\xda8\xd29g?\xa9\x0f\xdb\xfb|wj?E\x15%\xe2\xda\xb4j??\xf3}\xa9\xc5\x01k?\x83\x859\xd3\xd7\n\x87\xbf\xa5*\x00\xeb\xe3\xd8\x86\xbfW\x9b\xd1\r\xb6(\x87\xbf#\xf0.\x1b\xf6u\x87\xbf\xe5,\xc8\xd2\x08\xbe\x86\xbf\xbd\x05\xf4\xf5\xbe2\x87\xbf\x80\x9e\xe2G \x90\x86\xbfJ\x12\xf0P\n\xbc\x86\xbf\x94\xd4\x99\xf1\xd2\xae\x86\xbf\xf3:\xbfa\xc5\x01\x87\xbf\xee\xce\x92`\xc8{\x86\xbf6\xf54\xe3\xca\x93\x86\xbf\xa7\xae\xd8\xa4\xa6\xd9\x86\xbf\xb9\xf2g\x9c\xe2\xd1\x86\xbf17\x1f\xe6\xbd\x9d\x86\xbf\xaf\x98\x81^\xd4\xeap\xbf\xc8\x9c\x11yi\xdfp\xbf=\x02\xd4\xe8\xaf\x8fp\xbf\xcc\xe4 \xf5C\xd9p\xbf\xccP"\x1c\xfb\x80p\xbf\xe5\x8f\xd9\xb1\xda\xe3p\xbfa\xf0J\x7f\xc2\x00q\xbf\xce\x8cyYFSq\xbfjN\xef\xe0\x99\xb0p\xbf\xe9\xc1\x11\x0f\x93/q\xbf\xd2|\xc4\x03\xcf\x05q\xbf "\xa8\xd3Zyn\xbf_\xdb\x97d\x10\x8dp\xbf\x91zPG\x83\xaap\xbf@\xcfTX\x9a\xb1p\xbf\xc3+ \x90\xb3\xefS\xbf\r\x84\x85FZ\xacR\xbf.\xd4e\xe4\xbc\xafR\xbf\xbeV\x1cq\x0f\x1cR\xbf\xcc\x17Y\xff\xd8\x94Q\xbf"6\xa8\x94\xf8FR\xbf\x0e\xadn\xa2\xd3\xe2Q\xbfB\\xg\xc8\x16Q\xbf\xfe\xd5\xae\xa3\xe0\xf3P\xbf\xf8\xa5\xe2c\xd5\xafR\xbf\xbd\xe9r B\x99S\xbfJN^\xed\r\x9eR\xbfeN%p\xac\x17R\xbfk5$\x82\xe0\x9bR\xbf\xa1\x11\xea\xe7\x16\x10S\xbfX\xcf\xdd\x00\x88\xbc\xda\xbe\x016\x85MnK$\xbf\xcf|\x80\xd3m\xca3\xbf\xf4\xfc/w\x16\xcf*?\x1am$\xa9\x89F\xf9\xbe\xa8\xe1\xdb\xca\x84*0\xbf\\Z#1\xf5P(\xbf\x1e\xbcA\xcd\xbb\xcb2\xbf\n\xca\xf2\x1c\x87\xbdB\xbf\xc2\xb3\xa8S\xa4\xe3\x18\xbf\x93\xd9\x18\x1a\x9e+:\xbf\x12\xb3\xc3\xf0h\xf6<\xbf\xe7)\x95\x8eLl%\xbf\xf1\xb2\x9e\x02\x9c\xb20\xbfL\x11k\xdc\xc7<\x07\xbf\t\x93\x08\xf9\xaf\xa9E?\xf9\x00D\xd9k\xd59?\xd4\x8c\xbb\x86,3D??\xcb\xd19h#:?Og\x18\x87\x11\x868?\x0e\x0e\xe7-L\x8aF?8\x07\x91_A3E?\xba\xc5\x14et\xabO?]\x08c~daI?\xd5\xb8\x92\xd0!$F?\x12\xc4\xbae{\x9bD?o\xf4\xcf\xd55\x9a2\xbfB\xbe\x87\x85rVA?\xa5[\xacww\x9aE?\xa2\x1f>\xe2\xe6\xcb<?@\xb7\xdch\x1697?*e\xb4\xa6\xe98D?`\xc7\x8f\xc37\xd2B?\xe6\x8c.\x82\x07\xd4O\xbf\xb3\xef\x8cr\x98\xc4C?\xf6<\xee/\x01\xa0:?\xec\xe6)\x94\xedRB?\x14Sjy\xb227?\x036\x8e\xa3\xc2\xe37?\xac+ aC\x9d7?\xc2n\xdd\t\xb0\xc4>?\xa6\x13M\xdc\x81\x9f;?Jl\x90\xfce\xe5>?V\x08\x83h=\xbc6?\xa6\x97p\xda\xa1\xf3??\xd8U\xd5Rt(\xe5\xbe`2S\xc0p\xf9D?\xe9\x1b\x88t\x98D.\xbfO(@mz%K?`\xbb"\xe9\x9c\x9cL?\xe0\x83\xc7$`p\t\xbf\x15e\x85\xbd4f=?\x90\x94\xee@\x1b1\x10?\xb4%i\xbc\xdd\xa1D?\x98\xf7\xa8\xe1`\xc57\xbf\xc0\xbcD\xca\ti0\xbfn\xc7\xa7t1\x96d\xbf\n\xe2\x10\x05\xf2\x918?5\x8a\x88s\xb0u+?\xed\xed\x1f\xbd\x9b\x1bF?\x80R\xab3\xf9\x98W\xbf\x0c3"YX\xf0E\xbf\xdc?\x11\x08\xa7iQ\xbf\x19(\\\x00\x90\xd5<\xbf\x12$\xbe\t\x07\x80D\xbf\xb1b|\xd2\xa00N\xbf\x0e\xf89\x01\xa8\xd0I\xbfad\xde\xfan\xe6B\xbfp,\xb8\xa4\x95\x88P\xbf\xb2\xc1\x9c\xd2\xddyV\xbf6\xec\xa6\xef[=R\xbf\xf7m\x1bH\xf3\xb5U\xbff0r\x91\xb9EM\xbf\x92\xd4\x9flc\xdaM\xbf\xda6\x02\xf0\xa5MP\xbf\x19\xc8\xf1\xff\xe7u6\xbf\xc2\x00\x88\xbbL\x081\xbf\x80+\xd5B\x8a\xcd2\xbf\xa2\x8f\x03\xd6%\x890\xbf\xd0\xc5\x03\'\xb0"*\xbfH\xfct<\xd8z3\xbf\xd6\xcb\x03\xe9@\x03*\xbf\xfaY\xdd+ ?A\xbf}\'\xba\\\x14\x04B\xbfR)\xfe[:\xce2\xbfL\xd5\xab\x08_\x8f9\xbf\x97\x93\xcd\xb2\x95g0\xbf]\xe7\xde\xbe\x0fo1\xbfS\x0e\'PF\\6\xbfL\x15\x90\x91"\xa78\xbf!\xce\x8d\xfe\x03\xbe\xa0\xbf\xfb\'m\xde)\x18\x83?<\xa8\xdaXQ\xc5\x86?\\\x8fqY.\x0b\x8b\xbf\x10\xa68\x19\xac\xfa\x85\xbf\x0cr\x95S\xb0\xa1\x8d?>\xc5\xd7\x0e\x8dZ\x93?x\x87)\xe1\x8f\x83m?\xca7\xe0\xacl\x18\x85?\x03\xc9\xb0d{\xd1\x88?z\xe4\xeaR\x03\x8e\xa3?\xf6\x9a\xddRT\x8a\x86?\x97\xc6\x18\x8d\xce{\x89?|\xf0M\xe8\xd8]\xb3\xbf\xb6\x01:\xc2a\t\x84?<:\x0f\xf9\xd9\xb3C?\xa3Kd\xb0KOI?\xde&\x01p@`C?\x91\xc9c\xd8\x0fLD?\xdc\xfb\xfdG\xd6\x14N?\x01\xd6\xa8n\x92\x9d@?1\xae\xe2\xfd\xce\x13F?\xb9"W\xe5\xc2\x1cD?\xe9FO\xd4\x15HE?\xa2u\xf3\xbeu*B?\xb9a\'\x1a\x8e\xf7D?p\x99X\x17\xbd\x01A?\xfc\x9cS\x93$\xad=?\xa3\xf3\xf9z t;?\xf5g\x8b\xb4\x14\xbfK?\x8at\xb1M\xdd5x?\xc0\x918\x82\xd9\xc0s?\xc4\xea\xfauz!v?\xcc\xc9\xd4&\x13\xbas?\x88o\x92x\xf9\x1et?\xa6\xf5}\xadk\xcfw?\x88l\xa9\x88\xcfBv?\x91\xd7\x98\x00=\xc5t?\xfe\x81)\xb0\xe3\xffv?b\xb7\xd2\xd7m\xf4w?\x17\xb2\x7fd}\xfeu?O\x8e\xcc\xbd\xb3)v?s_\x97rW\x9et?+\x80\x00\xe9\xb5\xbcv?@g\x08\x9e\x95\xddu?\xdan\xbfnd1\x84\xbf\xcf\x8b|\xe8B<\x81\xbf\x1d\xe0\x84C\xac\x05\x83\xbf\r\xd2\x04\xb8\xa3\xce\x80\xbf\xf8\x02\xb5y\xb5\xc3\x80\xbfO\x1b\xcdT\xeb^\x83\xbfj`U,k\x87\x81\xbf\xb0\xadjL8B\x82\xbfNzu{\x8c\x02\x83\xbf\xaa\x07\x1f\x9a\xa5\x9c\x83\xbf\x0b~\x9d6,9\x83\xbff\xa7\xa8\\\xfbp\x82\xbfQ\xbe&$\xd1\x0b\x82\xbfOz\x8bi\xee\xdf\x82\xbf\xb0b2q\x81j\x82\xbf\x04\x86\xe11R\xe1\x83?N\xfd\xbd\xb9\xa0\xc5\x86?*R\xbff\xff\xe7\x85?\x85k\xe4\x9b\x85\xf3\x85?\x88\xe10R=\xf6\x87?H\x15l\xc5$\x0b\x86?\xd8\xda\xe1\xdb\xfd}\x85?Q\xb9x\xe8\xa0\x0f\x86?@\xf7\xd03J2\x84?\xfd\x1d\xdc\xefJ\x9a\x86?\x12\xd5\x92[!\x06\x86?\xbe\xe8\xfde%\xcf\x84? \xe2\xef-\xea.\x85?\xd4\xf78\xfaT\xf8\x85?\xca\xbb\x17\xebkd\x86?z\xbf\xb0r\x86[\x15?\xf8ct\xd6z\xc48?L\xd1\xd9\x10\xc4$1?5I\x05\x08\xb7\x92:?\xeb=\xee!\xe4\x10@?\x94M\xd2;\xca\r&?\x8b\x8f\x98\x9c\xb9\\=?\xc8:\xf0\xaf\x8be2?#(\xfb\x8cF\x9a*?D\xd3\xb3\\\xed\x8e$?m\\lV\xc8\x17*?\x03\xa2\xa4#\x1b(/?\x13fYp!I5?\x7f\x14r\xddB\x87+?S\xd1\xa6\x92?\xdf)?\xa6`*/tR@?\xea_\xe3\xc6\xaad\xea\xbe\xc7W\xa8\xb1\xa1Q4?|\xdf{\xa2&L\x1a\xbft\xe3\x0b<U\xd0\x0b\xbfv\x05\x92\x17l\xfe6?\xde\xcd\x06\xf8M=\x10?\x80\xeeW\x14\x8cU!?)u\xe1&\x08\x832?\xd0jFXP\xf5@?\x8e[a\xfd\xb2\xde6?y\xb7\x83\xdc\x88\x123?\n\xaf\xcc\x81\x9cL"?\xe6\xc6\xf9\x8e=\x0c3?R\xe3\xfaJ\x9e\x9e\'?\x05\xc2\rQ\xfaV$\xbf\xbc\xfco~\xf4\xd2A\xbfH\x840\xf6y\xaf/\xbf\xbdRcu8\xbfB\xbf\xf7\xf4\xfc\xeb\xbb\xd3F\xbfk\xbc\x11\xe8F\x99\x1f\xbf\x1d9\xae\x9aC\x1d=\xbf\xc4\x8f\xc7u\xfft@\xbf\x95\xe7\xf7+\xb8\x0b?\xbf\xda\x96\xd2\xbdY\xa0\x12\xbfaTf*\xfc\xe61\xbf\x0cw\xae_@$4?CZ\xbb\xdb^n9\xbf\r\x0e\x82\x0c|o&\xbf\xa2\xa5\xb8\x81\x84\t;\xbf\x96(K7s\x13\t?P7<\xb9r\xb46?\x1aK\xb3o1"&?8\xc0\x1f\xc6\x95\xe23?\x9f\xb9E\x99K\xb41??\xb2\xbd#\xc0\xfd!?\xde\xfa\xe3\x1e\xf3q1?\xbf\x90\xb4\x89SX#?\xb7\xech\t\xf8\xe5&?lN\x05\x12\x80\xab\x1d?\x04\x08\xa1\xa1\x95\xdf+?K\xc1\x14\xb1\xe1\xdf5?\xca\xd5{qjw1?\x99\x83l\xad\xda\x883?\xd1\xd3\xdb\x88\x81\x16)?\x0b2\x7fe\x97\xa1u\xbf!\xd4&\xdb\xb0\xe5u\xbfE\xa8\xf6\xbf\xcd9u\xbfGC:\x91\xe6\xc8u\xbf\xff.\x0b\x0bG\x06v\xbf2\x16g\xfa\x0b\xa2u\xbf%\xd0`\x9d\xba\xc6u\xbfabJ\xbd2Zv\xbf\xe5J\xaf\xf3\xdd\x15u\xbf\xb6x\xdc\xed\xbc\xf8u\xbf\xe5\xd0\xd0z\x07\xbau\xbf\x97O\x8d\x04\x1b\x19t\xbf7\xb1\xf2\x8d\xcf\x98u\xbf\xd0eFD\xd8\x95u\xbf\xc8\x07Pc#Kv\xbfwis\xb2\xed\xf2+?\x08\xa6\x82\xed\xb5\x1a/?E\xd9\x14\xba\x00/-?\x16O"O{a)?:\xd5\xb8\x11\xf2A.?\xef\xb3\\9\xa8\xbf1?\x97J~\xcbs\xc3)?\xe1\x16L\x1d\x04\xf26?\xf3&>\xd6\x9d\xc10?9\xc9.\xd0\xed`<?\x89\xd1\xbf\xce\xe3\xbd3?n|\xba\xb9\xdd\x0e\x04\xbf\xfe\x8eub"\x174?~\xfc8H\xb9\xe96?7\x1cK\xc3\xcc\xc1\'?\x00\xa3\xe7\x91\x82\\)\xbf\xe1\xf6R9\xa6\x8b)?&\x8d+##O\x1b?\xeb\x89#\x90\x02\xed*?E\xd3L\x7f\xd2\x10A?\xd0\xe9\x82k\x90\x9c#\xbf\xc1\xdfC[g\xa2+?\xd6\xbdq^\xab\xd3,?\\\x0eI<u\x94\x05?\xf8\xc4n\xef\xa9C\x19\xbf\xba\xd4^8\xfc_(?\xa2O\xf7}\xd7\xf5\x1c?\x9b\xdc\n\xc7\xcf\x8c*?$E\xee\x12\xf57\xd6\xbeA~\x02\xdbK&2?\x9d<\xaf\xa9|\x02\x90\xbf\xf8(\x8et\x879\x90\xbf\x8f1d\x91\xfe\x7f\x90\xbf W\x9f\x89\x82W\x90\xbfP \x8e\x9au*\x90\xbf\xbb\x19)&4\x08\x90\xbf\x01\xa5|\x8a\xa3\xbe\x8f\xbf\xc0U\xbd05#\x90\xbfS8D1\xbe/\x90\xbfN\x80_9R\xeb\x8f\xbf\xd4#\xb5\xf87\'\x90\xbf\xfa\xb6\xee\x9a^D\x90\xbfB\xfd\\\x17\xdaC\x90\xbf\xf8\xdd0\xdc\xd9\x14\x90\xbfSE\xa9\x92"\x02\x90\xbf!\x92\x85\xda\x9c\x9a\xb4\xbf6\xd5\x82\xf2\x81\xb5\xb4\xbf\xa2\xd8\x9a\xbc\xa2\xb1\xb4\xbfp\xc3\x85\xe3\xf7\xae\xb4\xbfl)\xe8\xca\x01\xb3\xb4\xbf\xeaO\xd9\xc1d\xbb\xb4\xbf6\x92\'\x075\xa8\xb4\xbf<\xf8V\xa6\x01\xb7\xb4\xbf_\xc1\x9c\x8e\x86\x9b\xb4\xbf]\xad6`W\xb9\xb4\xbf\x9a\x05l^\x8c\xa6\xb4\xbf?\x1a\xf3\x1b\xdb\xc8\xb4\xbf[\x11uA\x0c\x8d\xb4\xbf\x1c\x1cM8C\xa1\xb4\xbf\xad(\xc3\xef\n\xb9\xb4\xbf\x95\x97\xb4\xb9\x9d&\x9a\xbf\x9a\x9d\xbd?\x0b\xc4\x99\xbfH8\x8a$Nj\x99\xbf\x9ae\xa8\x96\xce2\x9a\xbf\xf0kK\x0et\x18\x9a\xbf\xa0\xc4\x1f\xb5\x81S\x99\xbfN\xf2\xed\xb8Q\x85\x99\xbf5[\xe6\t\xc5\xc3\x99\xbf\xde#H\x94\x00q\x99\xbf9d35\x0f~\x99\xbf\x88\x88\x7f\xd4\x03\xd7\x98\xbfz>_\xdcaz\x99\xbfF\x19\xc2G\xe6\xa1\x99\xbf\xf4\xf6\x93\x05\x03\x07\x9b\xbf\x14\x18\x14k\x08z\x99\xbf\x90\x95.\x0c\nu\xe5\xbfx\xe4W\xee\x978\xe5\xbf\xad\xabm\x88l}\xe5\xbf\x03\xeb\x98\x91:D\xe5\xbf\x0eM\xea\xa7\xa3l\xe5\xbf\xdb\x07G`a\x8b\xe5\xbf\x87j>\xf6m\x8a\xe5\xbf\xf5V"x\xad\x89\xe5\xbf)\xbb\xb58k\x87\xe5\xbf1l6\xd3\xa4\x86\xe5\xbf1N\xd9&\x08Z\xe5\xbf\x9f+\x04\xb4\r\xae\xe5\xbf:X\xf8\xa6o\x82\xe5\xbfR\xe6\x14?\xb2\x8e\xe5\xbf\x98\xe1\tvm\x91\xe5\xbf\x88\x91\xf4\xe0\rXs?\xac\xcd\x87\x923\xbds?\xda\xd5\xde\xef\xf0\xcfs?W8\t\x1d\xfa$u?l\xf1\xad\xba\x96\x90t?\xec\x83?I\xf1\xc4n?E\x84*\xd8\xf4\xeet?K\xdfZ\xcc\xab\xdba?\xb3\xa8G\x12m\x9cu?@wj\xb6\x0e\xde\x81?Y\xd7\xd0\xda\xb5\xd8p?\xbc{\x07\xb6\xe7\xffu?%/\xb7\x93\x12\x1bX\xbf2oxd\x1eX~?\x8a\r\x95<z\xb7\x84?Y[{\xac\x1a\xa1q\xbf:\x97q\xf2\t\xe9m\xbf\xdb:\x14OI\xbfo\xbf\xefy_@\x1e\x98m\xbf0\xca\xfb/\xca\x08o\xbf~\xd0N\xd76qz\xbf=\x94J\xe5\x02\xb0p\xbfq#\xf8\xa6\xbc\x80y\xbfb\xdf\xb5\x8ef:p\xbf#\xcdr\x1f\xf5\xfdM?\xea\'\xc4\xf9~sg\xbf\x99<\x92\xe9\xe0dt\xbf\r\xa9\xefR\xa7\t\x83\xbf\xdbfC\x1f\xe0\xdbU\xbf\xe4u\xb1A\x7f\x82A\xbf\xc9\xfd\xc2g\xd1\x8c0\xbf\xa1a\xb8C2D%\xbf\xbe\xdf\\,\xe3\xf1F\xbf\x10\xf0Z!\x1aa\xa5\xbe\xcf[\x86F\xe9j\x15\xbf\x81\xa6\xcd\x0c\xe6o5\xbf\x1e9V$\x85\x04 \xbf\xe8\xe0\x97\x7f\x92c,\xbf\xfb\xc4\xdb\x12\x84!2\xbf\xc9\xc9>=H\xee=\xbf\xe5\xde\xe7\xf3\x8b\x927\xbf\xef&\xef\x8a\x0f9,\xbf\xcb\x9c\xb30y|+\xbf\x9f)>\x96\x10\x873\xbf\x1f\xf6L>\xc350\xbfh|\xdf\'\x0f\x153?x\x8e\x04i\xe0\xb9,?j\xe5\x92g\xb5\xfa2?B\xe3\x16a\xac8!?e.\x8dB1\x9a\'?h`Ns\x8a\x94.?\'\xb0o\x1d\x9e\x1c/?\xeeV\xc4\xec\xba\xdd+?\xdd\xcc\x96\xc6\xe8\xeb"?3\xc7\xd0\x7f\x1d\x12??\x17i.8\x85\x0f4?\xdd\xd8\x8d;o\x901?\x89\x0f\x8f\xc5\x93j4?\xaa\x15<\xb3\xc7+6?\x8e\xa8^\xc3\xbdq5?\xef\xfb\x1a\xb3=87\xbf\xffn\xddI`\xdd@?\xfea\xcb\x1f1k\x0c\xbf\x10&\x94\xe8eIA?~\xc6[0\xc1\xfc1?/x\xa9n-\xcf#\xbf\xecV\x7fUDz ?\xe0\x8e\xdb\x08\xeaz\n?\xee\xdcG\xd4i\x1f@?\xfft&\xd5qJ/\xbfD$\x08zb\x15\x1d\xbfL\x94\xe1\x92\xb5\xbe\x0c\xbf\xfaT\xed\xa3\xad\x8b+?\xa1\xe3\xf0\x9eS\xe4\x1b\xbf\xa81\xcc\xceW\'\x13\xbf\xb3\xf2Z\xc5JNI?\x8e\xdd\x13\x9a\x0ew6?\xed\xa8\x19lx\x05E?\x80\xb1\xcb\xbf\xa1\xdf%?(\x1e\x8c\xa2\xaa\xc1+?\xf6\xd8%\x05B;E?\xecc \x18`N4?\xe4c\x1f\xd2rW@?\x05\xe8\n\xbe\xee9A?L\xf8>W\xdaPJ?~K\x9f\xb3\xb2\xf0D?\x9c\xe3\x04#\x98\xd6@?\n\xcc\x00\x94\x91D@?lT\x01\\\x96\xfbA?3z\xde\x16@\xe6??\xbd\xb1\x0f\xec\x10\xf64?\xf1\xcc\xadGv\xaaB?\xce\xa6\x0cf\xfe?<?\x9a\xa5\x03\xf6\x01\xabE?\xd5w\xd6\xf5\x040B?\x04\x05iv\xc5\':?\x10!\xc1\xb8\xe2\xc5:?\xb6{\x96\xbe\xff87?\xd1\x11`\xe6\xe3\xe16?\x8aU\xec\x0b\x19\x95<?\x1f \xc0N\xb1\x16:?\x829mp\xa0\xa78?me\xeb\xd2\x07\x9a=?\x9d\xe0\x93\xe7\'\xd4;?\x02\x93v3\xae\xcd8?\xfepP\x0c\x94\xd61?\x1a\xf9^7a\xeb:\xbf\x18\x83w\xb2B\xc0\xd2>7\x96\'\xca \xc9A\xbfB\x95q\x83\x0c\xec:\xbf\\W.D\xf1\x03&?Q\x1eX\xed2\')\xbf\x9b\xa3\xff\xd4\xcdV\x00\xbf\x92C\x8f\x0eEY\x17?\xde/\x16\xf6t\xf8,?\xc8/\x01w/\xe8\x04?\x91\xc6\xa0\x87\xd6(\x14?\x9b\xa9!\xd6/\xfc\x1d\xbf\nUti\xc8\xee\xf4>\x1d\x8d\xe5\x03\x8cY\xf1>\x11\x9b\xe5\xc4\xad\xc0o?\xca\xd14gn\x8aj?\xb7\x86\x8f\xc2\xe6il?39.1\xcd\x89j?\xd5\xdd\x19V\xa1\xd6f?Z9r\xe6\xcb+o?m\xe8\xf2\xb0_\x0fk?\xd5\xa2\x98\xf6\x9a\x00k?\x88\xd5\xfa\x1e\xa2\xd7m?\xe2^\xc9\x9c\xf6\xffo?\xd7=W\xc3\x92vm?\x04d\xb5\x9f\xa8\xbem?\xbf\x87\x1a\x04\xc5Lr?\t*\'\x11\xb8\xbcm?\xd2\x00j\xcde\xbam?\xe9 \xc9^"7!?S\xff\xe0\x1a\x05#-?\xe8Tk\xecH2\x19?\x0bbM\x86\x19\xa1"?\xf6\x83\xd6\xc8\x86\xc85?>\xbb\xef>\xa0\x17!?\xeb\xb22 \xb4\xbd1?\xf8\x99\xfc\xb9\x94\x819?\x1ep\\\x94\x1e0*?#\n\xb7s(\xb2\'?0p\xff\r4:+?F\xcfr\xcb\xb9\xa6/?\xe3D#\x1by\xdb\'?\xf2AY\xfdk\xd8&?\x93@\xb1\xac\xce)\'?\xdc\xeb\x07\xb9\x92\x91\x93\xbf\xde\xc6>\xb9\x1d-\x94\xbf\x9e\x00\x89\x0b%\xae\x93\xbf\xdd\xb2\\t\xe4X\x94\xbf*9\x81\x03&\xc0\x94\xbf\xe4\x14*\x89\xad\xa4\x93\xbf\xdb:I\xf45\x07\x94\xbfPk~\xf8\xf8\x14\x94\xbf\x81}\x877\xee\xc4\x93\xbfXH%M\x7fw\x93\xbfg\xc6\x88\xc1\xb2\x9e\x93\xbf\xd2S\xac\xf5\x16\xbe\x93\xbf_[\xed\x8d\x1a\xc8\x92\xbf\xd89\xa8.]\xa6\x93\xbf\rW\xd0*M\xb7\x93\xbf\xcf\xcd@\x982\x96\x93\xbf1b\x0c0\x80\xf8\x92\xbfZ\xa6`d\x9dB\x93\xbf\xe0\x1f\x14\xcc\xdbV\x92\xbf\x90d\xa6k\xcb\x1f\x92\xbf\x1b\xae\x03\xb2\x9c\x93\x93\xbf\xae\xb7\xce~W\x86\x92\xbf\xb3\xec\x03\xef\xc1]\x92\xbfX\x02-\xb7\xea!\x93\xbf\xb8\xeeY\xbb\xeb\xd4\x93\xbfv\x15\x98r\x7fy\x93\xbfq\x0f\xc1w75\x93\xbfy\xceY&I\x8b\x92\xbf\xa8\xe4\xf2(\xd4\xde\x92\xbf\xf8\x8eb\x88\x96R\x93\xbf\xed\xca\xab\xcbU\xba#\xbfm\x92\x89\x8f+\xc65?\xe9q\t\x85\xb3\x1b\xfe>^\xe4\x99\x95\xd6\n@?\x81q\xae\xdd\x8b.7?A\xda\xfd\x90\x12R\x05?\x9e8\x19\xad\xfdi,?\xde\xc6k\xc1\x15S\x12?*]\xfd\xe6:=\x05\xbf[m\x9c\x92b\x911\xbf\t\x00\x0c\x08<C\x14?\xee\xd3\x94\xc9\xfdc\xff>\xb3\x8bhzn-\x1d?Z\x81\xec\x19\x8b\xc3*\xbf\x88\x10\xd6\xd27_\x0f?\xc4\xdd~1d\xd5p\xbf\x01\xbf\xc6f#\xa9q\xbf6\x90\tf\x90\xa8p\xbf5\xef\xcb5\xa1\x8cp\xbf\xec+N9T\xa8p\xbfZp\xb8\x869An\xbfx\xa5\xd6OV\x0cr\xbf\xbe\xa6\xbc C\x9cw\xbfg\xceL\xb6n&p\xbf\xa4\x18\xd3\xd4X\x14l\xbf\x08\xff\x7f\x86\xcb\x08r\xbf\xc6)\xd4\xe1\xf8Np\xbf\x9c\xab<\xc4\x06\xfc\x80\xbfY\xf5\x86\x0e9\xcfr\xbf\x903\xfe\xef\x81._\xbfB\x9b\x05Wz\x81\x85?\x16\xb92\t\xe7%\x84?\xc5\xe0\x07\xc8\xf1Q\x85?)g\x1c\xa3\xad\xb6\x83?\x95\x05\xc0L\xabO\x84?\xe1d\xb6\x89Z\x86\x85?\x90oJ\x9c\xc1z\x84?\x8d\xb7^\xc1\x91q\x84?w"K=\xcc\x94\x85?\x11{\xc7\xc9\x91\x14\x86?\xcdnH\xbc"\xc4\x85?\xaa\xb9J\x7f\xe7=\x85?e\xa1ltE\x1b\x84?\xff\xcbb6\xa8\x9d\x85?:6m\xe4\x90\x0b\x85?\xefS?Nc)q?\xd6\xfb<}\xe5?q?\xb9R=-b\xf3o?[2\xd1b\xbaHq?\xfc\xe6~\x88\xe9\x16q?\xa4\xbd\x96\xe3\xb2\xf7p?\xf8\xc5\xa9\x0b"\xebt?\xa3\x8a\x14\xf6(\x19p?\xf0C\x9e\xefw\xb4p?V\x86\x15t\x05\xb5n?\xd1\xb5j\xd0\xccUo?\x14\t\xbe;n@h?\x9d\xa6s`\x1e\xa0r?\xb1I\xd5\x97\xda\x12b?\xb2 \x956\xc7\x93q?i\xd9\xf2\xcfI\xecC?\xdd\x8b\x8d<\xca\x8dJ?\x1c\xbc\xdc5\x92\xdcE?\x88S\x0c\xa1\x90\x144?"R\x9e\x87\x1f\xcd5?\x10\xb1\x93\xb9VtE?p\x99\x05\xe4\xf6X>?\xa3\xd2b\x90\xe8f>?a\xc8|\xaf\x16\x80E?E\xa1\xe9c6\xdbC?\xf3-\xa02\x9f@C?\xc5\x1b\xbd\xf5I\x9aB?\xda/\xc9\xf7qz>?\x84v\xef~\x1b\x9aA?\xee2\x8c\xcb\xabsA?&@Z]\xaaES\xbfm\x88\x86\xee\r\xc0B\xbf[X\xd2.\x0b\x7fP\xbf\x07(\xe2\x83D]@\xbfC\xae\xa6\xae\xa6\xabF\xbf\xadP\xaaI\xe5\xbcQ\xbf\x9e\xb0_\xdf*\xa8G\xbf\x08W\xf6+\x8a\xbfN\xbf:P\x02\xe1<-Q\xbf\x18\r\x06\xccofS\xbf\xd3J\xe6\xb7\xf1\x15P\xbf\xa51\xed\xfc\x8f\xf8N\xbf\x81\x03GX\xc4PJ\xbf\x02L\xef\x1ctdO\xbf\xa5\xcdb\xc5L$N\xbf\xd0\xa4\xb2\xd2\xd7K\x18?th\xaf\x00\x9b\x80B?hf\x11\xb3\xe8T\x1d\xbf"\xd1\xdc*\xdd\x11H\xbfK\xd5D4\xdc\x00G\xbf\x9d\x94j\xa3\x03H\xf2\xbe"\xb0z\xda\x96\xb4<\xbf\x13\xd1hzM\x1c.\xbfa\x0c\xbdPV\xd6\x1d\xbfH\x99/\xb1ZK:?8\xcf\r\x01dl\n\xbf6MR\x1e\x04\x1b\x1b\xbf\xa8\x18\xff\x00;\xa1(\xbf\xe6\x12\xb7\x80Y\x10\x18\xbf\x8e\x15\x0b\xfc\x88\xf7\x1e\xbfAk B\x936\xb0\xbf\xfcb\xe0)1\xef\xaf\xbf\x1b\x93\xc6\xaa\xad\'\xb0\xbf\xe8\xee\\\x8c6G\xb0\xbf\xe2l\xc4S\xb4C\xb0\xbf(#\x8dr\xc5<\xb0\xbf\xfeH6\x8c\xf1\xc4\xb0\xbfX\x9esX\xb3M\xb0\xbfR\x82w\xb2\xbcP\xb0\xbf\xc5\xf2v.\x97\x84\xb0\xbf\xc9#8\xd2E\x9e\xb0\xbfI\xef\xb2\xb8\xa5\x9e\xb0\xbf\xecq9\x0c3^\xb0\xbfnu^\x1d\xea\x95\xaf\xbf\xb7\x06\'\xe722\xb0\xbf\x88\xb3\xe8\xe8\xf3$3?\x16?\xcf/\xad\xef1?\xf4v\xa2;\xb8\xe4+?(\xae\x88\x93S\x82%?&\xb0\xc3\xaf\x83\xd1"?\x05\x84vA\x00M-?P\xa5\x1c\x94n{\'?\xf1+\xaeo\x0eA/?~\x96\xf8\x10\xbd\xf05?Y(\xa0k\n?7?\x9a\x0e-\x1cr\xdc.?\xf7g\xe8BL`\'?}\xd3#\x1az\xb1(?\x16\xdb\xf0\xdb~\xfd.?/\xbc\x1a\xeb\\\x01+?@\'\xa4d\xbd P?::\xed\x07\xe8\xb0C?\xcf\xf0ZC\x07\\8?\x15d\x94\xd4\x1f\xca=?\xfe\x83\x90 e\x1dO?+&X_\xeb @?\x96s\xd5vE\xa0D?^\xddhc7\xfcC?\xcc8\xa1/kAN?\xdc\x06\x83V"v2?\xfbfp\xb7i\xd6C?\x92\x1do\x90x@@?\tJ\x88\x80h\xcaC?\'.N\x15\xad\xc5A?/\xd4\xc8\n\x04\xc4??;\x99\x03\x82\x14{x\xbf\xea\x80P7\xae~w\xbf\x8f\xd3\xd5\xfcN\x19y\xbf\xb4\xb6\x0b\x92(mv\xbfA2\xb4\xcc\xb3Bu\xbf\x17E\xf2\xb3\xdeiy\xbfU\x99~K5\\x\xbf\xb1\xad\xd0\x07\xd3\x84w\xbf-\x92\x8a\xd7\x9c\xf7x\xbf\xe0-^\xa5\xedyz\xbf\xe2\xbf\xaeZ\x1chy\xbf\xa3\x9a\xa1\x98\xd4\xa5x\xbf\x033\xd6\t\x91\xc6w\xbfH\x0e\xe5\xd0\x8d\x01y\xbf\xf1Z\x9bO\xd0\xc4x\xbf\xb1\xd0\x96\xca\xdcTR?\xc2\x89.\xc7a\x1c1?\xa0\xeaP!\x0f@K?2Z\x99\x9f\xcf\r\x1b?\xc5\xfe\xa0\xdd\rFG?\x81\xf6\xbf>\\\xcbF?{X\x90\xd3\x8a\xdbN?j\xa9\x1e\xe85\xfcK?*\xc0\x87VD\xb7O?R`\xba!T\xd7P?\x11\xa4Q\xfbbcP?+\xa9\x83\xf8\x80<Q?{\xa4\x98`\xfdjC?Y\xfa\xd4\xc6\x91\xe3L?%\x88n\xfeO)M?\x82\xc4\xad%&\r\xd9\xbe\x02\xa7\xa0\xf1\x14\xfeI?S\x95_\xc8M\xe0)?\xa6\xe4*\xc93\x0cA?\xd55#\xccs\x99A?\xbb\x98\xd7\xc9\x19\x08\x15?jh\x9f\xca\xad\xce8?\x8b\xd9rA&`5?L\x1bkD=\x87(?n-\xdfe\xdf\x94\xd5\xbe\x1c\x83v\x12y\xca)?\xd1\x91v\x91%=/?\x89!+~\xe2f5?\x8d\x0c\xdcU\xd76:?\x83kF\x17\x02N+?\xb0/\xc4\xc0\x02\xf5!?\xbe\xe0\xbf3\x9d\xed$?\x1c\x91\xb1 \xf6\x112?\xc7\xab\xd5\xa0i?)?\xee\x16\xdc\x17\xef])?ad\xb3q\xa4r-? \xe8i\xa3)\xc4-?\xe5j?O\xc8\x0b0?6\xfb\xf3\xc4\x97\r4?\xd0\xd0\xd6:$\xc68?\xc6\x16\x0b\xed\xdd\xeb0?,\xa9\x85\xdc\xd4\xa3+?\xec\r\x9e\xf6\xb9\xf0+?=\xb5\xca\x9b\x90%\x16\xbf\xfe\xa7\xe7\t\x01\x911?\xa30g1\x012\x85?9\x9cp0\x06F\x85?;\xbd(s\x0e\xb9\x85?\xd7\xcb>\xb3\xd9\xab\x84?\xd0K\xab\xe7!\x85\x85?\x94\xba\x19\xfb\x056\x85?\xed\xf1;\xc2I\xb7\x85?Ef\x98\x94P\xba\x85?\xc8e\x9e\xdbp~\x85?\x99\xcd\x11\x17lz\x85?\xef\xd7\xc2\xce8\x91\x85?\x8e\xeb\xd2iq\xb7\x85?*\xbcAdzZ\x85?\xa2<<\x04&{\x85?b\x0cF\xef\xb1\xbe\x85?\xf0\x96b\x8b\xb7\x94E\xbf\xb2Q\xd0~\xd9*J\xbf\xec\xd9\xd6\xd6g\xd5H\xbf\xaa7\x04~\x1b\xdcL\xbfU5\xbc\xb4R#M\xbf\xd24\xc5\x1b\xaavJ\xbfK\x88}&UIM\xbf\xb7Q\x0ch\xa0IJ\xbf~\xbb\xb7S*vJ\xbf\x9eu\x1a\\\xe1\xa3D\xbf6\xe7\xb3\xd0\xc9\xf6P\xbfy\x9ciq\xd68M\xbfa\xcb\x0fFZ~K\xbfo\xfb\x99Cx\x18\x01\xbf\xef\xe6~Y+\x06I\xbf\xf8\xa3\xca\x8e%\xd6z?\x88R\xc0\xd5\n\xa4R?xX@\xda\x87\xc5y?\xca\x03K\xeay\xedw?3\xd8\xaaT=\xf9v?\xd1\x06d\x1f\xb4o|?i/\x9b\xadh^x?l*\xa2\x81\xb4\xb6y?f\xc2"\xb8\xab%w?[Y\xe7\xebTzz?\xd2\x05\xc9\xefY\xe2y?9\xf9\x86\x93\x11Fy?\xbb\xdf\x87D#\x03x?\xa2\x8cc\x05\\az?\xce+me\x0b\xdfx?\x16\x05\x85+\xa5\xcaP\xbf:k\x80\xba\xa0\x8d#\xbf\xf4uY\x99\xaa\xe0M\xbf\x83\xfb9s\xd2\x9eF\xbf\x18\x81k\x8cE\xdeE\xbfe#S\x15\xf9gP\xbf\xc8&\xc3\xa0]\x1dH\xbfLo\xc2\xc1\x88zI\xbf\x90\x8cUD>\xf0M\xbfH\xec}I\x92\x0cP\xbf|\xfe\xcb\xb4a+O\xbf\x8f\x1f\t\x13QhL\xbf\xf0\x16\x03\xe0f\'K\xbf$\xe3x\x9a\xa9\x11N\xbf\xf8u\xc0\xbfC\x98L\xbf\x98\x90\xea\xf5\xf8W\x97?\x9a\xa7/\xb0\xb0$\x98?\x1b<&\xef:\xc0\x97?\x95\x83\x87]\x10|\x98?\x126&\x8b\xa3e\x98?Z\xd5N\xf4\xff\x87\x97?N\xd6p\xd1.\x1e\x98?A\xbc\x18\x1b\x18]\x98?\x8b\x96\xe5Z\xbf\xce\x97?\x06xKf\xaf\x0f\x97?\x05\xc2\xd3\x95\x8d\xc0\x97?pQ\xae>\x06\x18\x98?\xf6\xb5\x92\x07^\xb3\x98?\xcb\xbb\x89\xb6\x04\xf7\x97?\xfb,\xaeI\x14\x1b\x98?i\xda\x8b5-LK?E\x93E\xf0 qR?\xb9\x92YG\xab\x0fD?\xb2\xe4(\x7f\xebdC?\x1e\xac\xc2\x9d\xeb\xc2C?\xd4\xb7\xce_\xee\xfcJ?\xd8:$\xce\xdaa9?t2\xb5\xd4\xddkB?0\xba\xb0$\xd7\x11Q?\xd7\xe1\x93\xa9\x1c\xb0R?\x9d\xa6\x96\xdbKfJ?\xf5\xf6\\!\xd7FB?>dcX6\x85G?t\x9b\xc7%\xfd\xfeJ?t\xdd\x06\x1b?\x8bH?\x10\x9eM\xc8\x83\xea\xb3?\x15%\xd2=\x80Q\xb4?\x03\xe8\xeam\xd1\x0f\xb4?`\x1e\r\xc7\x0ca\xb4?\xa9D\x84\xb8VQ\xb4?\x98\xd7\xf3\xf5\x9c\x06\xb4?\x18G\xc0\xb3\xeb;\xb4?E\x92\x04\x9dq:\xb4?\x8b\xc4\x8f\xad\xe2\x1f\xb4?s\x12\xf6\x05\x8b\xf6\xb3?\xc0\x0f\xac\xf7m\x02\xb4?\xc7\xe0\x11\xf7b\x19\xb4?\xde\x8f)\xe6\xac/\xb4?\xfb`\xaej6\x0b\xb4?*\x19\\\xe9\xf0.\xb4?K.K\x86\xef\x91)\xbf\r)\xf5\xd6I\xcdA?\xc5L6\x1d\xd6\xa9#?6\xd4[\x89^\xeaH?\xe5u\xeb\x188bJ?\\%\x9b\x1d\xc1\x07\x18\xbf\x1a\xcbf\xfb\xff\x7fA?J-\x98z\x94\xe0>?!l\r)\xe3\x9a5?\x05y8\x1e]\x05\'\xbf\xf1m\x051\xd1\x9b!?\xaa\x07+\xa6R\xc7\xd9\xbew\xc5OH\x84C\n?\xec\xf0f):\xfe"?\xe0!\x01b\xbd\xe6\x01\xbf\xa9\t\x1d\xfak\xf6]?1Z\xda\xb6L\x17h?\xcd\xcdQ\xe8;\x9ad?\xbe\x87rd\x07\x01f?\xd3G\xd3\x18k\x97Q?\x92\xceQk.mg?\xd76\xfb;\xdd\xdc\xd7>\xfd\x94\xb1D0\xbef?\xda\xb9ZD\xcaag?\xf2)\xe9\xf99\x04g?\xccA\xe6\x9f\xd11n?\xccGx\xa9\xa1\xc0d?\xc4\x98q\xf7t6i?\xfd\xdc\xf4\x12Raf?6:\xf8d\x96\xc6\\?\xbf\xf0#p\xa4\xa5d\xbf\xbe\xe1\xf0\xaeh\x8cd\xbf\xad\x9aB\xfcW\xcci\xbf\xe9m4\x82\xa8\x99d\xbf\x18\xb7\xf8U5Jc\xbf\xc4\x8c\xba\xaf\xba\xacc\xbfgJ\x8c\xfe\xc8\x00c\xbf\xc9e.\xc3\xf1\xa3d\xbf\xff\xa3b\xf6y\x7ff\xbf<\xcd\x1e\xe84\x14d\xbfE\xd9\x1c\x0eS\xc7d\xbf1gE&\xfa\xe8c\xbf\xdb\xa3=\xaa\x9d\xcda\xbf\xb7\xaf\xbb#\xd2He\xbfg\xd6\x179\x0cXc\xbf\xb9\x80>r\xd0\x0eN?5(\xcdb8KD?\xed\x03\xbdC\x9abK?e</\x9b\xd9\x1fD?n#J\xb4\xd6\xd3??,\xc5\x8bp\x91\xcdE?\xebW\xeb&R\x0fD?zk\xa36\xbc\x0cP?\x98\x89!a\x1c\xc6I?\xe2LOk\xefIO?\xd5\xba\xd9v\xdeGP?K\xc9I\x9d\xee\xf2L?B\x03Z\x11&\xfbC?GX\x839\xa9\x13L?i^\xd8Q\xff_G?o\xd7\xe0=\xb9\xbfX\xbf\xef\xa7\xad\x134\xbdU\xbf\xf6s\xbe\xe9\x07\xcaW\xbf\xf3`@\xd0\x93ZU\xbfH\x93\xdf\x1cX,T\xbf\xe4B\x1a\xac6\xfc[\xbfF\xd4\x1a\x92K\x87T\xbf\xee\x84\x17\x1a\xc2\xddT\xbf{\xadsX\xf5\xd1U\xbf\xc6\xbb}\xe8.\xafZ\xbf\xf4RkZ\x8a\x7fY\xbf\xb5\xb5\t\xab\xb5\xe6W\xbf\xf9\x19\xd9E\xb9\xe1V\xbf{\x90(C\xa3\xe2W\xbf\xd8\xec\x08\r\x12MY\xbf\xf82\x7f@\xf5"c\xbf\x08\x13\xa7\xf2n\x93Y\xbf\xd3&IJ\x01\x9e]\xbf\xaa\xf5\x11\x94(2Q\xbfV\nU\xa6\rgI\xbf\x1c\xed\xc1\x99\xa9\xb6Z\xbf\x80 \xee\x1d-\xfcZ\xbf\xce\xf6r\xceN\xdcV\xbf]M\xb5\xe5\xef~[\xbf\x8a-f\xddK\x13c\xbf\xe0\xbf\xb7\xfew\xceX\xbf\xe9H\xd4b*__\xbf\xc1\xdf@G\xc1\xbfY\xbf\x99$\xbcRa[]\xbfO\xd1\x0f\xeb\xb9\xe5\\\xbf\r\x7fmJ\x92K\x1d?D\x9b\x16\xb5<)=\xbf(\xb5\x8b\xcbs\xef\x1c\xbf~\x99\x85\xd0\xe7\xfa@\xbf|q\xc2\xe6\xbf\xe5A\xbfz\xca\x95/\xb2-\xf0>\xa3\xd5b\xd5\xbe\xdd9\xbf.kd\xc0xN4\xbf\xb6\xa6\xb8\xba\xd3\x07&\xbf\xc2\xdaDW\x85\xde\x11?A\xd4Z\x94\x17_\x17\xbf\xfc\x9bk%\xf8\xb7\x17\xbfF@\xfa \xa6\x7f7\xbf\x8e\xf2\xcd$\x12`\x1f\xbf\x87(\x85y&\xac$\xbfet\xef\xf9\x92\xfcA\xbfn&\xe3\x8c\x94\x9fA\xbfa5\x8e\xcf\xc8\x1fA\xbf d\xac\xce\x0b\xd1@\xbf\xfd\x16\xb6\'.$?\xbf\xcff\xb6g\x8d\xc6G\xbf\\^\xcc,\x14\x18=\xbfG7\xcc\x9c\x14\xdc:\xbf\x01h\xff\x03\xeb(C\xbf\xe7?.sT\x9fD\xbf\\\xeeR\xf7*\xc1A\xbf\xc7\xa1\x89\x01\xdd\x18@\xbf\x95_b\x95\xc4\x0b@\xbf\xa2\xcfHa\xbd\x80A\xbfP\xa6\xbdk\x9b\x04D\xbf\xb3\xd8s\xc3\x93\xeb`\xbf\xce\xe9\x15\xacy\x06a\xbfb-Z!\t\xed_\xbfi\xe1\x17!\x9f b\xbf\x96\x9a\xc3G`/b\xbf\xaa\x1ek\xcf\xf4\xcaa\xbf\xad\x04~\xef\x96\x99c\xbf=C\xcbX&\xc3b\xbf\x84\xc53\x11\xe5\x81_\xbf\xb6\xf7\xbei\x05\xaf^\xbf\xe1\x17\rlq\xa2a\xbf\xba\xbb\x14A\xa7\xd3a\xbf\t\x03\x1b\xc7}\x92a\xbf\xbfkXD\xb2\xfb`\xbf\xb3\x7f\xab;\x02ra\xbfb\x88\xbb\xe2*\xcc\'?Wd\x90y\x95\xa6\x1b?\xc8\xff\xb9{@TH?)*(\xa0q_,\xbf\xf3\x86\xc1!\xa5\xd7$\xbf\xfa\xc4\x861OB2?\xdc\xeb&\x9f\xe0>A?8\x1f\xe1\xf6\xe3c1?{L\xd2@\x81\x07??\x17\x84\xfd\x89\x96\xb0C?\xdb\x92\xbe\xefl\x05J\xbfTf\xcc\xb3\xd3%<?\xe3\xf3\xb0k\x0f\xe8)?b\xf4\xe0<)\xdd+?4\xca\x91\xba\x88_0?\x1f\x1f\xc8\xfbb\xa3\x82?.\n&\xbew\x9f\x82?\\\xd2\x8d~<\xce\x82?\x9d\xd5\xee\xe0\xda\xb5\x82?\xcf\xba\xc1f\x9d\xc6\x82?\x98\xfe\r\x9e\x9c\xdd\x82?\x97wTp\xee\xae\x82?kY\x02\x10I\xad\x82? \xc34\xe8\x89\xaf\x82?\xfc\tSk\xcf\xcc\x82?\x19Zr\x14P\xb7\x82?\xcb\t\xcf&j\xc0\x83?&c\xf3\xdd\x0b\xbd\x82?0c\xa9\xb1\xcb\x7f\x82?\x7f\x06\x86<\xac\xa5\x82?U`\x04\x04\x85\xfc1?)e\xfa\x9e\x9eOC?!\xd2\xec\xd8&\x93;?l\xbal\x02\x9b\x17C?`\xafmxt\x1bF?*\x9c\xc4\xc3\xd7"6?\xa3\xf9\x0c\xef[ID?\xdd\xba\x88\xca\xf4q=?\x8f\x1bs\xb0\xd1\x03B?\xab\xc2!\x0f\x14\xb52?\xdd\x9a\xd6N\x01\xabY?\x07\xc4Q/`\xba8?\xbc\x86n\xea\x914A?`u\x10J\xff\x042?\x17\x03\x94\x15A.>?\xfc\x1b4x\x9a]$?\x85\xe3\x9a\x82\xba\xaf@\xbf\x07\rLHB0\x15\xbfn6q\x1di\xbfE\xbf \xbf\x82\xed\xac\xc9D\xbf\x84\xd9\xf9\xc6\xb3\xce\t\xbf\xdf\x13O\xe6\x85\x838\xbfL\xd1\xb5\xff\xf7\xe6#\xbf\xca\xae\x94\x97y\xbb\x08\xbfs|\xcbmp\xba$?t\xe8=\xadY\xad!\xbf\xfegM\xf0\xbe\x14\r\xbfum)\x0f<\x9b2\xbfU/\xd0\xa5n\\\x1a\xbf\xeb+\xf7\x95\x05\x90!\xbf\xba\xa2\xe5*\xb1VK\xbf\xfd/th\x1a\x8dR\xbfD\xe223\x00 R\xbf5\xca!D\xda\x1fN\xbf\xee\x1f\xe9\x8b\x17\x94T\xbfi\xf6\xc1\x90B\x99*\xbf0\x82\x14;:\x7fQ\xbf\xc5|f\xc0{\xfdQ\xbf\xdf\xcb\xae\xfa\x9f\x84Q\xbf\xf8\x8c\xbc5\x02-P\xbf >/,-\xf7R\xbf\xbb\xca\xfe\x02\xcc\xa0R\xbf\xfc&\r\xbf\xac\xd1O\xbfq\xf0\x17(^\xa4R\xbf\\.\x9d\x1aFQP\xbf\x0c5\xe6\xa8\x86\xaf[?@b\xa8\xf5\xe6\xc4`?<s\xc5/l\xd3a?M\x18a1\xa4ib?\xce\xd9^\r\x05\x91a?\x12\x069\xbb\x8d!`?\xd91\xd3\x9e\xdb\xb8Z?\x925\x9a\x99\x99~c?o&+z-\xd3L?I\xed\xc0\xacC\xd1^?h\xb9\xb9]\xbb\x1fq\xbf\x0b\xa7\xfb\xe5;Ja?:p\xc9\xe7\xfb\xe2Y?\x1c\xbdE\x91\xc9\xabf?0\xfcq\nc\xdb_?\xcc\x01\x95<j\x93P\xbf\xdd\x94\xf4\xe8\xb4lO\xbfJ\x1eCv"\x86P\xbf\xd5\xa2li<eM\xbf\xee#\xa1X\xf3\x15S\xbf\x0b\x91\xf4l\xe2\xf2P\xbf\xe2\xaa\xed*\xae\xceN\xbf"M\x19\xa5\xf5\xb7K\xbfktFv\xa4\x07M\xbf\x939vQ\xe2\xbeQ\xbf\xe4\xa8\xd2\xa6\xd8\xcaR\xbfJx\xfaY\xe6\x86Q\xbf\xe9\x9a\xf2W\xc6\x0bO\xbf\xd1\x12\xf4\r2oO\xbf\x0c\x98\xf0\xfc\xf3Na\xbfpH\x83\x15\xe0QI?\xd7=\x1cC\xbcYE?\xf4b\xe6\xa8R\xfaH?B\\\x15\x19\xb9N9?\xf7\x17\x95\xcd\x93tB?J\xd40?\x8aT9?a\x96/\xef\xda\xd0D?(+\x7f\x0c\xc1\xa4A?\x03\x12\xf4\xa9\xb8\x0fE?\xbd\x13\xb4n]dO?\xfd\xa2\x17\xf7\x99\x1bK?\x8eU\xb6g\xd3\xd5L?\xe3;\xf7\xf2\xaa\xfdF?\xf9\xd2U\\\xa5\xd1L?\xf0\xd9\xbf\x8eu[F?\xd3\xf7\xee\xb1\x8c\xcbe?\xb3D\x03\xf2%\xbch?\x85\xc5\x90vREg?\xe0\xd3\\\xb3\xe0\x87i?&h\x02\x83u\xc9g?\xb1\xf3\x9c\xfb\xad]f?L:"\xd7\xcf\xc0g?\x14\xe1aq\xe1\xd6g?\x9f\xff\xa0S\x88\xd7c?\xb9g\'8\xa1\xdcf?\x1ej\xb9\xdeff`?\xe9\x11\x7f\x17\xda\xe9g?N\xe6\xa4\xfb@\xc3g?\xa8,\xc1/\xb3Ug?\x83\xa4\xec\x12\x87\xe0f?xx\xe2o\x8e\xa1E?h-\xe1\xfds\x94H?\xe8\xf3C@\tKK?\x1c_\'V"4C?Ki\xa3\xfaP7.?\xa1\x1a\xc8\xe3\x13\xcfH?\x88\x1fkA"FH?8\xc0\x89\x8d\xbc\x02E?\xe6\'EA\xa7?I?(\t\x14\x85\x81GQ?\xb2\x0b\xbc\\\xc1lM?*\xf0o\x02\x9b\xe5J?\xce\xb0k1\xcf\x05H?}\xfa\xf8\x0b]\x05N?ZZ/V\xfbJB\xbf\xdd\\\xd4V\xfa\xb3*?\x88\xd9\x19<!{??\xc9\x1cy\x11\xf2\xf65?}\x18T\x1f\x1dtB?\x01N\x15<:^D?\x91e\xee\xe2\xe1\xf0/?\xfd\xbe^\x8f\x7f5??<\x142\x83\x92\x1a;?\xcc\xca\xf3\x02!\xda6?`\x156/\xe0\xd2\x04?\x17\xb1\xb1vK[3?\x9fa\xb6\x97\x96N4?*\x05\x88\xb8\xd1\x8c=?\xe7\xdb\x08M\xc9\x8e@?\x81\x8al\'\xc8WA?G}\xfb\x909d\x94?OB\x96?\x88H\x94?\x96\x82\xc2=\x1c\\\x94?\xcb\xc9\x074X>\x94?\x0czg\x10d\x00\x95?O_\x9e-\xb1N\x94?\xb1\xe65\xf1\xaaG\x94?\xa1\x16\xe2\xfdpm\x94?\x8e\x08^ \xb2\xb0\x94?W$\x06|\xa3F\x94?\xb2\x8f\x05\xb7\xeb\\\x94?\x92\xab\xbb\xdcxi\x94?\xa2\xfc \xddyx\x94?\x1bm\xbe\x00@[\x94?/__\x9f\xc6o\x94?\xe4\x97aV\x89\xce/? eX#a\xd3:\xbf(\x1dPi\xf2\xde\x19?\xd1\x1c_\xb5A\xef=\xbf\x88m\xc1\xb4MKA\xbfJ\xbcD\x89\xd1!\'?]\x02\xdc\xf1\xc6,5\xbf\xd2\xb8 \xe7\xf9\xfc#\xbf:r3\x97QO/\xbf8\xcbh\xb06\xc02?\x92\xaf\xe8Y\x93\x99$\xbf\xc4\xe0<\xd3Z/$?\xc3*\xb7&`\xae"\xbf\xf8\x99\xa3\x1b\xb4\xe2,?x\xd5\xc7\xc3\\\xae\x0f?\xae\x864p\x06p*?]w\x86\x9b\xce\xb4P?<~\x93\xf1\xfb\xe55?\xfc\x00\xb5\x1bg\xd5<?\xe9$\xdd:-_@?\xf5B\x04\x1e\xa7t(?\xe6]\r\xcaQ\xe5\xe9\xbe\x7f+,\xb8\x9b\x83\x17\xbf?g +\xb5"M?q\xfa6\xce\xa9PE?U\xbf\x96\xe3`p)?\'\xa8\xac\xf7\xe3\x06%?\x9e\x86L\x8d\xb9\xec4?\x06\x86V\x90\xc0\x132?\x17\x91\xc0\xf5\x87~#?\x94\\\xe1\xc1\xef\xa29\xbfZ\xf2l\x1c\xec\xb1\'?\x05("\x87\x18y\x15\xbf\xed_\x15\xbak\xc2/?\x91\xac\x99\xaet\x1b8?\xaa\x17\xb3\x86K\xe5.\xbf\t\xbf\xec\xa8=O8?\xc6\x1a\x0b\xbe\xa3\xe1\xf6\xbelz\xf3\xcc\xb5\x0c\x12\xbf\x0f\x15\xae\xef\x9b\x93@\xbf+s\xe5\x06\xd8,]?\xf1\n5]\xdcC#\xbf\x80\x04\xd0uK\xec!?\xa7\x8d\xb8\x9e\x9d\x90;\xbf\xb2;J\xd2\xc4\xd8\n?v%<l\x91cX?\x0c\x07\x18\x14\xce\x83Y?\xc8j\x8cB\xa3\xe5V?\x83c\xc9\x18\xa5\xe2X?\x01\xeb\xd3\x86?\xe9Y?2\'\x1a0\x82\xa7W?h\xde\x99\x1a\xc36X?\x87Y\xf9\xadU\xccV?\x8f\xbf\xc4\xac\x97u[?{t\x90Z@\x10W?\xd1\xc9B\xdb\t\xd8Y?\x1d$\xd8\xd4\x17A\\?Q>\xa3\xf9X\x81\\?\xc1\x84^\xf4\x81\xee^?\x86&\x99z\x07\xfeZ?U\x1f\xdc#\x01\xc9\xc7\xbf6\xc4\x18\xb9e9\xc7\xbf:\x88\x0f\x89Y\x9b\xc7\xbf+\x82\xec\xa3\xd7\x1b\xc7\xbf\xc2\x1b\'+\x802\xc7\xbf|\x07@\xe2j\xa3\xc7\xbf\x9c\x9f\xee\xd5/Z\xc7\xbf\x84WU\xf5Jo\xc7\xbf\x85\xa9\xe1\xdai\x9b\xc7\xbf\xf3\xd087\xee\xc7\xc7\xbfa\xe4P\xe7\xbd\x84\xc7\xbf\xc4\xa4x\xd5f\x93\xc7\xbf]\x17\xfb\xdc\xcfl\xc7\xbfY\xed\xca\xfc\xd0\x99\xc7\xbf\xec\x9d\xb5&3w\xc7\xbf_l\x94\x94\x99#=?k\xec\\\xce\xc4\xbb$?J\xee\xed~`\xec4?\x8ek\x04\xad\xb7\xfa\x17?\xef\xdd\xcfx\xde\xbf\x17?\x13\x9fY\x80u`??d}\xf3\xec\t\xbd&?\xc6\x0e32\xc3\x7f"?&\xb2\xf0W\x93\x149?\xdf\x7f`\xe5<F@?\xb31\xb2\x9eJ\xce8?\xd5\x1b\xc9\xfc\xaau6?\x15\xa4\xa8\x8ege1?\xe6\xcb\r\xfe\x17Rc?\x96\xa2m\xf0TI5?S\x1f?\xf1\x15\xfd\x1f\xbf\x92%?\xf8\xb0\x8d&\xbf\xe4\xb9\xee\xc7k\xda9\xbf\xf25\xab\xe5\x02\xaf \xbf-\x99\xf5+g\xcc\'\xbf{\x8dB3\xb6?6\xbf\n\xdb\xec\xd9\xe9\n9\xbfC\xddj\x04\xc5\x15,\xbf\xb4)\x9fC\x7f\x9e6\xbf\x1a\xebB\xfd\xabS2\xbf\xbe\x89\x0b\xf8\x7f/6\xbf\xf16\xbdN\xb2\xb2;\xbfi\x96\x05\x17\xab\xb59\xbf>I\xc1\x83\xf8C;\xbf\xe1\x10\x12\xe0\xd1\xa8.\xbf\x07\xed\xfcF\x93\x19\x7f\xbfA\xf0\x8a[\xc2\xc7}\xbf\\h\xc2|\xc1,~\xbf.\x95Y*k\xb6}\xbfb\x16\xa2\x81\xcb9}\xbf\xf6\x1b&\xf6Jf~\xbf\x10\xc8#\x16\xd28}\xbf\xe19xM=\x15}\xbf\xe2\xd5\xdcR\x01 ~\xbf\xa7\xfe\xda\xbc\x12\x8f\x7f\xbf\x14]\xa8dVn~\xbfCW0\xd7\xd5k~\xbf\x7fZ\xac\xe6\xbcs~\xbf\x00\xe5\x87\xabF\x9d~\xbf\xdfg\xdbU\xc5:~\xbfW\xdd\xe0@\xdcRf\xbf\xae\xd3~f("b\xbf\r\xb6\xa3@\xbe\x9ed\xbfK\xc7tz\xce\x7fb\xbf\xa6h\xd1\xfb\\\xa0b\xbf\xb2\x02:\xbb\x17\x90f\xbf\xfc\x1a},U\xbcc\xbf\xa7A\xbd6[\x7fb\xbf\xcdp\x7f\xdb\xdc|f\xbf\xae\xc6\'1\x9f\xc4g\xbf\x82\x92\x00\xa8\xad"f\xbf\xed}f\xcd%3d\xbf\xa1\xef\xf4c%,c\xbf}\xe7"\xac<+e\xbf\xacL\xf9\xd8\x81\x93d\xbfz\x03\xf3\x1d\xe5\xdc+?xP\ny\x1a\x10J?\xcd\xb4\xc3$\xb5\xf1<?\xcc\x9ax\xfb\xe0\xe1E?\xfc:l0g\xcfL?/\xa2\'\xc6\xca\x874?\x11g\xbb\xf548A?\x9b}\xdd\x9e\x92sA?g#\xb2\xe1\xa2`1?\xf4\x19\x1dx\xde59?t\xf1\x18z7\xb67?O\xfa\x16\xf2\x7f\xa77?\xe6\xf6\xb2/\x9cN=?\xae\xe0\x05\xb8\xa1^0?dMZ?U\xd9=?\x14\xcb\xdd\x915\x1bi?\x7f\xd4+c\xb5\xfdf?#\xa4<\xd7\xb6%j?\x90\x80\x1d\xe0\xea~e?\xf6\xbd\x0c\xb5\xf5\xb1e?\xef&\x01[\xe89i?!\x18\xa4`\xd79g?4\xed6\x9e \x1ei?om\x82\xf8\x1d\x7fj?@w\xf4\x02\xd0}k?|\x8e\xf9\xd7\x16\x15j?\'\xc6\xcb\x00+\x83i?\xe1]\xa7\x89\x9bTb?\xb6\xc8\x12uCWi?\xe0<7JMFa?r\xd0\t*I\xf3C\xbf:\x9a\xf4\xe8\xd1\x8fK\xbf\xe6&\x9b*\xff\xe3F\xbf\xb7\x03;\x11>\xe5K\xbf\x0f&\x13%=.L\xbfX\x14\xe6\x06\xf2OE\xbf\xce\xf4\xe1l\xd7\x8eJ\xbf\x07k\x86\n7\xe0I\xbf\xd3.\xe4\x1b\x0c\xb2F\xbf\x06@\xb9W\xd2\xb7C\xbf\xbe\\PO\x0b\xabF\xbfx\x047b\xfc{G\xbf\x0e\xd1\xdax10J\xbf0_B\'C\xdcF\xbf5K\x97\x87\x05\rH\xbf"\xeca\x9c\xda\xc2#\xbf\x96\xd9C\xdb\xd6>\xf6\xbe\xccf\xc3\x9a,\xca\x19?\xd8\xe5_`\xdf\xa8E\xbf\xbc\xb9!\xadyZA\xbf\x12\xd4\x0c!\xe5\xbb3\xbf\xa5\x18\xf4:\xb9\xd6<\xbf\xa58\x9b&bf:\xbfPHV\xedy\x964\xbf\xf6W\xd3\xa4\xfd+.\xbf\x04\xae\xc5;\xf916\xbf\xd0\xc9\xe2r]T,\xbf\x17J,#\x88\xab6\xbf\xa4\x83\x91S=\x006\xbfh\x1a\x15`1\x9f8\xbfF{,\xc4\xc8\x8eG?\xf8\xac\x1f\x82o\x12@?\x802\x1fIrTF?8X\xcc\xfc9\xfe<?\xc2\x05\x8d\xf3y\xaa3?*\xa4\rX\x03fG?7\xa1\x80\xf0\xd8TB?\xeaf\xaa;\x87\xbb??\x7f\xbe\x98\xc0\xee\x10G?c,\xcc\x06r\xa0J?ou\x07\xe3\xf3\xd1F?\xa1\xe7\x16\x89\xb3\xa7D?2\x88\xe4\x8b\xbdaD?\xaeYn\x1d\x91PF?\xc7\x1a,\xb2uvC?k#\xb3}\x1d\xc5>\xbf\x8b\xdb\xeaj\xd5u\x17?\xb4\xd6\x10g\x87\x05A\xbf8E\xecl\t\xd8;?\x97\x82\r\xb9\x1cg\n?\x08T\xdeD\x05"\x01?\xce0\xb1(\xd8F<\xbf\x86\xed\xc8\x9aZ\x01<\xbf\x19D\xb59Xi4\xbf\xad\x8e\xa4\xcc+\x994\xbf%s\xed\xee\tiC\xbf%?\xe6\x8b&_@\xbf"\x14\r\x1eA2)\xbf\xfb\xf2i\xdaf\r9\xbf\n\x82$m\xd02:\xbf\xfe\xf98\xf5\xf6\xf0I\xbfK\x87\x90\x06\x91?9\xbf8\xbdI\xab\x02?H\xbf\t8R\xa6\xb2\x918\xbfU\x88\x1aD\x94<>\xbf\xec1^V\xd8\x14K\xbf]\xb5@\x14\x91\xf8@\xbfI\xd6y\x1ev\rB\xbfb:&7-\xbeM\xbf\x07{\xf9\x04n\xf4G\xbf9\n\xb8F%\xbeG\xbf\xf2Y\xfd\x94lfF\xbf\xf3\x0e\xa5\xa7\xd9\x15/\xbf\xf3\x11\x88q;vI\xbf\xb0?\x858\xd28>\xbfM0\x98)\xcb\x0bp?\xc7\n\xd3\xc9\xd5jp?dq\xd3\xfchLp?o\x14\xd0(\xdcZp?S\xfaHV\xc2\xa0o?\xac/>>2cn?\x1a\x1dUe\xb2+p?\xcf\xce\xe8)\xae6p?\x90\xd9\x94\x88\xc6\xd8n?L\x12\xdf\xcd\xb6}p?Do\xf5\xcc\x04io??*\x828\xd1\xbdp?\xd2:\xc0\x8f\xa3Tp?\xb7*d\xa4VFp?\xb7.\x18Z(\x08p?\xd2\x99\xe1\xd4\xe3\x01`\xbf\xef\xa5b\x0b@!b\xbf\xac1\t\xce\xff\x9ba\xbf\x94\xfec\'\xf2Ea\xbf\xc4\x039\x82,\x82a\xbf\x87\xf4h\x0c"\xee`\xbf_xE\xb7\xe6\xb4`\xbf\xc6Q98\t\xd9_\xbfRd\x1ec\xf0\xc6a\xbf0uy\x12\x13\xac`\xbf\xcb?Y\xec,B`\xbf\xb1\xb5\x9a\xb2\xb72`\xbf\xbbpc\x04\x885a\xbf\x05\xb9O\x08\xbd,a\xbf\x02\x83\x11\xc2\x88\xa7`\xbf\xa0\xd4\x95/\xef\xb1w?\xf8\x7f\x99\xd6\xcb\xbet?dA\x1e\xaf\xf8\x16v?\xf7g\xe3\xed\xa6=s?\xc2\xcd\xfd\x0eA*s?\x82[\x9cMg0w?\xd1\xf5Ek.zt?9\x08\x12\xdc\x01et?@\xc8#\xb1\x92\xaau?I\xe7Y\xd8+\xe8w?\x88\x82<\x84\x9b\x8dv?QN%u\x04\xc4u?\x10\x81\xb0o\xbc7u?y64\xd1ezv?n\x03\xd8b\xf5dv?\x15\xa5\x10\xfa\x137<?M\xb4\xd1g\x02\x93>?\xbb\xa7LR\xf1$@?\\\xf8G\xd1V\x07<?=-\x10S\xac\xa9+?\xc5,\x0f4\xcfMA?.\x18\x98>\xea\n=?\xf3\t\xc6\x15cr9?\xec\xfcbvh\xafC?\xb1\x15\xfa\x14\xa0\xe5A?i\x95\x9dG\xc8d=?\xbe\xb6\xa4\x1e\xc1\xde>?\xc7qZ\x17\x99\x937\xbf\xc1\x1e/\x9d\xd0f??A\x12\x86\x89p\x14:?\x9d\xe9\x03\x80\x86\xfb\xfd\xbe_\xc8t\x05\xb5\xf40\xbf\xe3k\x9a\x0br\xee.\xbf\xf2\xf9\xc9\xeb\xc3\xe6\x19\xbf6\xb2\x8b3\xb7t$\xbf*\x92@\x02\xcc\x08/?~\xda\xf3suu/\xbf\x92\x1f\xe2\xe8\x89\x8e:\xbf\x8c\x11\xb8_\x9b\xcb\x14\xbf]\x18%\xc6>\xa7)\xbf\xeb\x82$\xb72\xa0\x17\xbf2\xb6\x95\xa1\x91h\'\xbfK\x08.\xa7t=2\xbf\xe2\x95+b\xf1\x84-\xbf\xb0#et\xda\x8c\xf5\xbe\x81\x83\xb2\x90\x84\xfe\xf8?\xf9\xcf\x7f\xda\x84\x13\xf9?\xc2\xfa\x81\xda\x92\x10\xf9?\t\xdcR\xa5$\x06\xf9?~\xb31c\x97\x0f\xf9?\xec\xeeA\xd5t\x04\xf9?\xb1S\x9b\x93\n\r\xf9?\x0bc^\xe68\x0b\xf9?q(\x1e\x1e\xd7\x0b\xf9?&\x07\xdd\xe3\x02\xf8\xf8?bWB\xe9\xec\xf6\xf8?^\xa8A\xce\xf0\x01\xf9?[R\xb1\'\x1a\xf9\xf8?\x11\x86b\xf1\xdc\'\xf9?\r\x81M\xe1+\x00\xf9?R\x06\xb4F\x9b\xdf,\xbfO\xbc\xb5\x96\xa5\x94A?\xc4\x14\xc0\xa7\xb0\xb4\x16??\x1e\x13\xcb\xfd\\A?_36\x1f0}A?\x14\xad,\x16x\xaf\xec\xbeW\x13\x14\xfc~56?\xe9\xc7\xf9FH5-?4\n"\xa9\xdd\xaa\n?\xc1\x19I\x1d\x95\xee&\xbf\xea\xa6z\xcf&\x0b\x12?\xdc\x18iw$\x8b\x12?7\xf7\xef\'\xe9Z3?\xbaT\x9e\x08\xc3\xd5\x08?\xe7\xe3\xc6\xba\x7f\xff\x1c?\xdcv[W\xb91C?B%\xb4\xd5\xb1B:\xbf\x84L-\x0c=\xc5\xe7\xbe\xc4{_Te\x00*\xbf\xce\x85\xf4\xb9vX"\xbf\xbaN\x91=\x9dL#?!J\xe5\xcf\x1a\xd9\x1f\xbf\xa3iS\x17(Y<\xbfJ\x7f\xe6\xbc\x04\x84\'\xbff#G*\x8e\x02\x05?6BM\x18\xec\x1d\xff\xbeTVI(\x87\x86\xfb\xbe=\xaf\xd11\xf1l#\xbf\x88\xa4\xd2;\xff\x16\xe5>\xce8\xef\xdb\xc6`\x02?\xe6\xd5\xdcr\xcb\xe5;?\x98\xfe\xdd\x1cz\xb4H?\x8d\x02\xe1\xf3hz??\xf9T\xba\xbf \xe1I?M\xbe\xc1\x9c.\x9aH?\'\x92C\xdb5m@?\xc6\xf9*$q\xd0E?K\xdf}\x96\xdb*>?\xb9\x1a\xbd\xa3Z\xb0;?\x1c\xcaT\xbc\x95t<?\xbeXb\x0c\x13\x0c;?\xbe\x9b\x9a\xe2\xdfl>?\x1b \xef\x99\x07\xecA?\x08d\x17\xbe\x83\x13A?\xbb\xb5!\xa2<\xa5>?68(\xd5\xc5\xd0G\xbf\x11N\x95`\xc6[R\xbf\xb2\x0ch\xa8`\xe1N\xbf*\x7f\xee\xeaW\x9fp\xbf\xd5\xb5\xf5\xb7C\xaaN\xbfV\x9d\x82\x1b\x850Q\xbf\x0e9\x15\xb0\'cT\xbfe?HN\xe7\xe5`\xbf\x992\xec\xa4S\xe6E\xbf\xc6\xef\x948\xb5\x07Q\xbf\xbd[<\x03pNT\xbf\'x\x98 \xb8 O\xbf4\x97lL8\xbdQ\xbf\xc0\xdc\xc4\xd9\xd8\xe23\xbfC;\xc0_\x7f=R\xbf\x0cu-\xd8\xa8\xa5\x87?=\x18\xc8\x9a\xe9v\x81?F\x08TL\x030\x89?5t\x87M\xf1X\x87?\xc8\xb8+\x1fWb\x8a?\x18\xabr\xc2*\x9b\x86?\x8c \xf3\x8dZ\x86\x85?\xf5\xe0\x1f\x0fMK\x87?r:\x1aI\x98\xe7\x86?\x9f\xec\x0c\x90y\x00\x88?\xdff\xf9V\xbbY\x87?\xd8\xfa(\xf8\xd4\xdc\x83?\nf\xe8@\x915\x87?\x98\xb4\xd95/0\x86?Z\xfa\x00u[\xe9\x87?x\x8d\xcc g\xb4M\xbf\x14\x8f\xa4\x1c\xd0\xe5P\xbf\xf5&X \t9M\xbfO\x07\x00\x85&\x18Q\xbf\x0ez\xfc\xbc\xdc\xc3P\xbf\x05\xe2\xba\xe8,\xeeM\xbf<\x1d\xa2j\x94MP\xbf>\x18\xa2G|\x89N\xbfN\xaa\xbd)\r\xa2N\xbf]\x96\xe2\xac\xfb\nN\xbf\x058\xd9\xe0\xddmN\xbf\xe3\x9b[\xc6`{O\xbf\xb4G\xf6?ZlQ\xbfn\xe1^\xeaG\x89M\xbfy\x9eZ0+\xecN\xbf\xfcA\xf4\xce\xdb\xc6D?{X\xba\xd7\x14\x8c*\xbf\x1d\x9bAM*\xe4)?\xe8|\xd6\xd5\xb8n\x1b\xbf\xae[\xef e\x1a*\xbf\xf0\x15TF`\x072?\xe0\x0f+\xf0\xe5^\xe5>\xc8P!Y\x9d\x13\x16?\xe2\x97*\x17\t\x8bA?\xf2$\xc3]\xbf\xcaA?\nQ1\xf8\xea\x1d2?8T\x8ez\xdf\xe57?\x80\xef\x83\xc3\x8c\x10\x16?\xa4\xb1\x9b\x96f\xda-?\xa2F\xee\xd9\x14\xaf*?\xfc\xc5\x10;\xd1\xab#\xbf>\xd42M\x13I3\xbf)\x02\xc7\x08<D4\xbf\xf3\xfe\x988< ,\xbf\xa8\xe5\xf2\r\xbe`4?\x14\x0c\xc7(\x90\r>\xbfn8\x1b\xe5\x9b\x9c1\xbf\xd0\xfb\x86\xf4\xb9\r?\xbf\xa2l<\x05P-(\xbf\x0b\x92n\x13\x96\x8d*\xbf\xfe\xf00*\x9c\xad.\xbf\x8f=\x17tAc+\xbf\x91\x95\xc3\xc4Gu4\xbfn\xe0;_9\xe31\xbf\x8ct ;\x8c\xf73\xbfV[\x17\x91\xb7Q7?\x7f\xc6\x86\x01&\x08C?\xaf\xf3\xfe\xb1\xe7}<?(^\xf3\x94J8C?\x1a\xc6d\x9f\xff\xd5E?[\xbd\x0c\x8cVo9?\x8b\xf2Zn\xd1"B?\xe9S\xa0\xe8,\xe3@?\xa9\xfb`\xdf\xd2\x8e6?\xf2\x1e\x9d\x8c\x92\x8b7?\xb7k\x11\xe8>\xd0<?&\xe9\x1b\xff\x01\x01>?\x18\xb3\xfb\xd9G\xda@?\x0c\xfa>\x80\x93\x85>?\x02\xc2\x05\xbf\xa1\x05>?\x06+Pf\xbb\x01Q?\x15\xedcq\xa7\xb4.\xbf+w\xcap\xd8\xf8N?\xf7 \xfa\xd1b\xf4M?\x7f\x1f\x8b\x0cr\x07N?\xb7\xcfkV\xed\xf2_?*q@\xff\x153F? \xf4\x8d\xa4DKN?r\x11\x05\xafd\x8eM?_^\xd8\x17\x8bTT?\xd1\xe8N\xf0m-P?~$\xfc\x01d\xccK?\xddIK\x06\xef\xd4K?\xf2\x9c\xae\xa5\xac;W?\x15\x0f\xae\x81@]M?\x12\xba\xbcc\xe9\x0cp\xbf\xeai\x85\x897Gp\xbf\x90T*\xed\x06wq\xbf@i\xfa\xe76\x97q\xbf\xf2\x99T\xe0\xc7Xp\xbf\x17\x97\x91\x8b8+p\xbf\xf0U{\x99\x0b\xfeo\xbf\xa5\xdf\xbf\x85r\xe6n\xbf\x80>xI\xfa\x04q\xbf\xc4\xbc\x89*\x9c\xf8o\xbf\xdeH\xbcz{ p\xbfEs\x19\xe8\xf7\xe1p\xbf\x0c+u)\xaf\xacp\xbfb\xce\xcb\xe8\xae\xd9p\xbf`\xdc\xc2\xff\xacep\xbf\xf6\xe2eY\x1a\x02f\xbf\x90\xb0a\x19\x0cTf\xbfu,\x90\'i:g\xbf%\xf4Q\x98G\x89g\xbf8\x13\r2\x96\xefg\xbf\xc3\xfc\xacQb\xc6\x80\xbf\xce4.\xe5\xb1\x18j\xbfF-\x16\x00R\xa2g\xbf\x89$\xb1c\x18\xb9g\xbf\x01X\xa6J\xc9qf\xbf\x1c>\xeb\x1f\xca\xd5h\xbf\xea\xa8\xeb\'\xe5\xefg\xbf#\xf2\xc7,\xf5\xdef\xbf\x8f~\xcc\x19\xd4\xb9g\xbff\x89\x10qa\x0cg\xbf\xafR(\x98L\tC\xbf6\x16\x86l@S0?\xcf\xe2\tyS51\xbfh\xa5\xb3\xae\x80\xa4\r?\xb3=\xf0]\xcf\xa07?=\x1b~s\xa4\xcb7\xbf6\x9b\xe7`\xa6W\x1c?\x98:v-g\xb8"\xbfbA\x04?\x83I5\xbf\xc5\x84=\xfc\x0e\x0fB\xbf\xd4\x95\xbat<\xe2(\xbf0\xe1\xfc\xedSQ5\xbf\x92!\xc3t\xc2H&?S\x06\x01\xad\xc9\x856\xbf\x1b%?0\xb9\x1b2\xbf\xee\xb6\xef\x10\xdcE\xb2\xbf\x1a6\x1d\xcf\xe7<\xb3\xbf\x1e\xb9YQQ\xba\xb2\xbf\xd9y\xe8\x80\x9a8\xb2\xbfvt\x8bAM\xb9\xb2\xbf\x05N\xaf\x14\x10i\xb2\xbf*e\x90\xdfuV\xb2\xbf\x01\x1c\x04\x0481\xb2\xbf\t\x14\x9a\xce\xac!\xb2\xbf*\x19\xf7\xcf\xfcP\xb2\xbfR\xdd@\xdd(?\xb2\xbfu\x0b+\xe4\xc7V\xb3\xbf8Gu\x85s]\xb2\xbf]\x9a\xf9:\xa6&\xb3\xbf)\x14\x85p\x00\xc1\xb2\xbf2\x1c1:\x81\xac\xe4>C\x9d\x10\xa0<\xfd-?\x90\xd2%.Fo\x10?pN\x8f\x9e\xdf\xcb??s\x94\xe2o6\xe7=?\xcd\x98\xa05\xbe\x9c\x0b?\xe0\xa8\xb0\x89q\xeb6?\xf6\x8a\x8a;\x9d\xcb2?\xccK\x84\x8a\x1d\xff\x17?r\x7f#Px\x00\r?\x0e\x08\xd7(\x8f\xf1<?\x89K\x91\xf2\x80\x04(?\x84\x08\x1d\xa1\xd8<1?v\x15G`x\xe7\xfd>h\xff\xc7\x1c^\xc8\x1b?\xd6\xd7asU\xbb:?\x97u\x1f\x1c\x92\xd0Q?\xc7\x83\rZ$\x13I?\xdc%]C\x18\x9dF?1P!\xe7\x11QJ?\xca}-\x9c\xb4\x03D?\xe7{\xae>\x12\xf2D?(|\xe5)\xdd\xa0B?\n"\xc6R\xa8k5?\x05\x98\xb2\xdbY\xaa:?\x86\x17\xb6\xadq\xc66?\x1e\xe6\xcb\x1e\x83WA?\x94\xab\xe0,\x9cxG?\n\xecR_g*I?]\x95\xd0\x9b\xa6[G?|\x18$\x8c\x8e\xb5@??G\x7f\xe3h\xc62?\xdbW0\x85\x90\x83@?\xd8>\x94-\x86\xda%?\x1a\xe9\xa0I\xc6\x98*?\x03\x82\xd5Y\xfe\xdd<?>\x90\x81\xd2\x90\xa09?nD\x08\xb1\xce\x8d=??\x12\x02\xa8\\\xc8E?\xba\x99\xf1\xac\xa9\x92C?$\x9b\xc5[\xe7\xce>?7\xdb\xdc\x94\xba\x1bB?&\\\xc6$nH9?\xa4Y\xe8\x93|\x05@?\xf5\x1a\xa7c\xef\x96>?m\xed\xca\xb3A\x8bR?\xc7;\xcb\xaazzS?\x88\xaf\x9d@O\x81Q?\x02|\xa3>\xee\x07T?\xa8\xbe\xd7\xfa]\xa4T?\xf78\xf2\xa0\x02/Q?\x7f\x11.\t\xb0\xd0S?#\x83C\xd9\xdabS?\x1c\xc2\xfe\xed\xe9\x8cT?\xbf\xcf\xd9N:EQ?Dab\xc5%iR?\x1d\xe1\xe6\x83@\xd8R?\xfc\xa4\x1f6\xad\x18R?\xd7!R\xff.\xa3R?\x15\x03\x95\x84Q$S?(\xdf\x18%\xbd`\xc5\xbf\xf9\xd62\xc5t\xf1\xc4\xbf\x8d\xf1T\xe8(-\xc5\xbf\x8e\xa0\xb5\xee\x92_\xc5\xbf\xe1\xad\xf7q\xd9F\xc5\xbf\xb8\x8b\xe0\xbb\xcd/\xc5\xbf\xa3{\xf5,\xe2T\xc5\xbf\xd8\xf1\x1c\x7fwg\xc5\xbf\x80Q\xd2\xd1\xf3b\xc5\xbf\xb7GQ&\xbee\xc5\xbf\x19\xe5b\xa0\x90\\\xc5\xbf\xd4*E\xb4\x84\xa2\xc5\xbf\xbcz\x86\xe9\x14G\xc5\xbf\x88K\x8d\xa0P"\xc5\xbf\xdc\x1f\rD\xf4+\xc5\xbf\xc0_\x81\xa5Q\xb7E\xbf^\xd3\xd7\x15H\xd36?\xe3\xbd Q&\xb4/\xbf\xa6\xc3\xf7?b\xb7#?\xa3\x8a\xbdYFx,?\x1f\x8c\xfdR\xa7t=\xbfn\x1b\x07\x85g\xfd\x04\xbf\x07!\x19\xa6jl"\xbfm\x8a\xc9Iq\x0b:\xbfOe\xc6\x91\x15\x80G\xbfk\x1d\xa6\xce\x80=L\xbf\xe0\xf2E\x9d\xa2\x957\xbf:\xdc\xe1\x96\x9c\x13\x04\xbf,\x9f\xd8!S\x9b*\xbf^\x1a\x10\x92\x04`#\xbf\xef\xe6\x1b\xacwC,?tKY\xf9R>,?WL\xb2=@M1?n\'R\x8de\xeb ?\x0e\x11)n\xdb\x94\x17?\xca\xb3I\x93\xbf\x0c\'?\xc9\xf5o\xd7\xa4\xb7+?\x1a\xb88\x8a\xaeJ1?d\x93\xb5j\x8a\x91A?\x8c\xfb\x83\x93@\xc83?\xda\x8d3\x06Z\x0f\x12?\xec\xc5\x1fBK\x8c2?\xa7\xe0s\x10\xe910?q\x1c\xcf\xa3}\x851?\xbd7\x9f\xe9=\x06(?\xc8m\xb3\xa5\x88s4\xbf\xb8\x16\xf8\xb8c\n-\xbf\x90`\xfdW\xa746\xbf\xe8B!3\x83x+\xbf=I\x8e3;?2\xbfU\xd9\xc2]\x05\xd3=\xbf\xb5\xed=[\xd5+,\xbf+:\xd0\x8e\xb1\x170\xbf\xf6j\xb7E\xf6NZ\xbfT\x81\xc6\xed\x1c\xd9<\xbfe\xc1\xe4k\xea\xc84\xbfN\x9a0\xf9b\x1b4\xbf\xb2=wY`\x00\x11\xbf\xc3\x857\x1e\x8f\xf24\xbf\xabip\x85\xb5\x1d>\xbf\xf0\xcc7\x1fk\xf5p\xbf\xfc\xdd\xd8\x15?\xd6h\xbf\xcc\x91~[\x9a\xcck\xbfP\xecG\xfe\xe2bj\xbf_R\xef\xfcY\x91i\xbf%S`\x97\xfb\x16m\xbf\x855h\xbc\x0e\xacm\xbf\xa5\xfd\x1f\xf1xix\xbf\x82\xb6\x0c\xda=-m\xbf\x15\x871\xee\t\xa0m\xbfo\x90\xc5\x90LKo\xbfV\x82p\xa2\x8ano\xbf\xcb\x1boC_\xc2l\xbf_~\x93;\xf4\x04n\xbf\xe1\x17\x1cM\xb2`m\xbf\xfbpM\t\xe8=h?\x92\x8f\x11\xff\x99?j?\xfe\\,\xd7\x81\x96g?\xdf9\x1f9\xba\xfbi?\x1a\x87\xdau@\xabj?^\xa6\x1b\xd1*Of?\xccZ\xe9\x19\xbb0f?u\x86\x19M\x1b\xfei?\xbf\x93\x9b\xc8X\xa6;?\xc7$B\xc9\xa3\x81g?\xd8\xaf<J0\xe5h?\xacN\x14h\xbcQh?Y\xdb\xfa\xcb\xf4"h?\xb9\xda\xff\x9e\xa2\xaai?\xc4\xc9P%B\xb9g?`\x05Se\x8a7<\xbf\xab\xfdJ \x9d*5?\x10Us\xa2m\xd2"\xbf\x0c|\t\x9f\x0c\xddD?\x92\xa7\xd9\xadH\xe4>?\xa3c\x0f\xa5\x94\xd9U?$\x85\xd9\xa9\xcfK+?4\x83\x8b\x17\xb1\x1c!?\xa8\x11\'[,iJ?y\xef\xcf\xff\xf3\x14=\xbf\xb9a\x1c\xec\xf4{&\xbfy\xf6d\xf4\x91~\x19\xbf\xa9mf\x9e\xf9^ ?-\xc9B\xb0wC#\xbf\x08\xcf9\x18\xe2t\x08\xbf^@\xc1\xbb\x86\xacv?n\x1als\xc4kr?\xf9H\xaa\xa25\xf9t?\xdff\xfd\n\xf16r?\xf2\x01\xd7\xc4,\xdeq?\xdc\xb2\xa9\xd3\xaa\xddu?\xb2v\xd0\x9d(\x03s?B\x95h\x93A\x92s?\xdd\xce\xdd\xd0\x8f\x1ar?F\xd9+\x0e\xaehv?\x0f\xeb\xfeN\xc8\x14u?QI\x98\x13\xe3lt?Q\xfc1\xa7\x0e\x93s?\xe2\xa9lS\xad\xdbt?$\xea\x18l\x1b6t?\xf7\xcf\xfa\xb4\xd6\x82"\xbf\x06S\xd2\x0bt\xdc`\xbf\x91\x93\x7f\x15\xab\xd4o\xbfS\xf7FO\x916]\xbf\xb3G\xb8\x03 Qa\xbf\xffK\xe2e\xdeTb\xbfyH\x9e\xb8\x12we\xbf\xac\x1c\xe2\xe8G!b\xbfY\xde`\x170\xe3_?big\x8b\xf7\xf3`\xbf\x9a\xc7m\x12\xa7VY\xbf(\x06-*\xe9\\`\xbf\xb3=z\xc0{\x8cg\xbf\x92\xc1\xd6vv\xd5[\xbf#\xff\x87\xeb\x87\x17b\xbfnS\x8b\x91CGR?`\xf9\x84\xe1\x10\xb60?z{<\xdcA\x82P?\xff\xcbym\x02\xd9<?\xf0\xbe\x8f\x92\xe9\x9e>?\xfd\x8e7\x85 \xb1P?\x865o\xcb;\xff??hC\xba\xbc\x06\xf0@?\x9bH"e\x12\xf4E?\xf8NG\xb8/4T?f\xdfj\x9c\x98HN?\xbe\xdb@S\x1e~M?V\x08\xebkH\xfe<?\x9b\xabi\xfb\x84\x15L?\x18\x94\x8bJ\xc7\xc6H?O\xecF*\xc5\xb3<?\xfd\xb3\xae\xd3\xc1\x88\xec>\x18\xa6?\xe3\xad+6?\xfb\xd7\x84Y\xd7#"?\xed\x9e\xc37?z\x1c?\x90J\x1fX\xe8O0?\xb6"\xcb \x85f,?\x999\xbc\xc0\x13H2?\xa3\x88tw\xcb57?D\n\x96\xb31\xb71?{u:\x9aK\x1f<?F\xddJ\xe9\xaaF/?\xd4\xc6\xc3\xaeO\xf27?\x8f\xfd&It\xca+?K\x11\xc3\xa6\xddV:?\x86\xa8cc\xff\xa9n?@\xe7US\x9e\xa7j?(\x7f\xea\x80HKm?B\xf4rt\x82\xc9i?\xcd.\x9d8\xf7\xa2h?$\xb3\xd29\xb5\xbfl?\xe7/\xfb\xea\xe5\xb7j?\xf2\x9b\x0c\xce\xe6\x8bj?\xd8_\x91\xe7\xf5\x80l?\xe3\xd4\xd7;\x0e\xfep?j\xf3\xbe\x14\xc4\xedm?\x8a%\xf7~\x12Jm?\x08\xe5|\xba\x9c\xbfk?Q\x18\xa5\x14\x19\x9an?@G#\x14S\x1en?\x05\xb3Q\xb7\x8eP\xae?\xc5@j\xb4C\xaf\xad?\x1a\x9a\x01w\x95S\xad?)\x96(\xab\x16\xb9\xad?{\xaa\xe9\x95\xf6\xee\xad?J*\xe3\xfd\x198\xad?\x90\xc72\xed2\xc6\xac?XU\x12r\xec\x90\xad?\x8e\xae\xf8\xe8\xb2a\xad?\x0e}/\x97\xf9;\xad?\xfa\xb3+o \x10\xad?>u\xec\xd7\xced\xad?\xc6\xba\x89W\x7f\x91\xad?\xa8:\x17\x12!N\xad?x0\x99r*~\xad?\x83\x0c\xd8\xcc\xbd\xdcs?ul\x1b\x82\xb2\x84w?\x04u\xbd\xbd^\x92v?\xae\xdf\x00x\xa7Xw?\x9f\xec\xf5\xb6\x1fNw?\x95\x99U\xb8~\xf1v?\xc2\x05)\x0c\xab\x16x?\x9f\xc5\xbd@=\xbbx?\xcf\x99<<kdx?\x80\x9c2\xc15:w?o\xc9d\x10A\x98v?\xaf\x04\xb6\xa3\x9d\xb9w?\x93\x9e\xf1\x96\xa2\xc5w?\xdb3\'\xc4\xe6\xb0w?\x13\xd0\xec)\xe7@w?N\xd6\xf4\xd5\xceAe\xbf1G\xc2\x81\xdd\xa3d\xbf\xe4\x88\xfa}<\xdbd\xbf\xb71\x91?ied\xbf\x8c\xb2\xf1\x98\xbd\xe2d\xbf\xe6Ia,z\x07d\xbf\\ \xdd\xb1\xf1\xf0d\xbf\x10&_\xce\x1d\xddd\xbf\xe1\xea\xfa\x83\xe0ld\xbf\xe7\x1a\xa2R\x06\xecb\xbfp\xe3\xf3\xa2\xe5\xadd\xbf\x94\x83\xb24y\xe0d\xbf\ru-\xbcb|d\xbf\xbc\xd5\x03\xa4\xf8\x83d\xbf\xa4\xc8\xe4\x99\xad\x05e\xbf\xfc\x05\x03\xbb\xf7/G?ijeI\xefM:?\xa2\xc8S\xd7<M8?\xcb%\xf7V\x81\'#?8oq\xdc\x82\xcf\x08?+0\xb2^\x8c\x1dK?g\'\x8e|\x894&?U\x0c\xd0\xea]\xd27?\xc1\x99\xee\x80\xf2\x8b4?\xdb\xf0\x9c\xf5\x1f\x98G?\xaeE\xd6\xe9\xd4\xb03?9^\xc73w\x17\x00?h\xde\x08\xeb\x85S)?\xb4\xe2\xb1[\x0eH@?\x15x\xc2\x8f\xc3\xb0+?\x93\x1bY}\xbf\x01r\xbf\xf0\xe0\xcf\x8a\x98,r\xbf\xc3[`>\'\rr\xbf\xfd\x07\xd1\xddkwr\xbf6\x8aR\\!ur\xbf\x87\x7f;i\xea\rr\xbf\xec\xb8\x05|\xb5Mr\xbfX\xab\xe0\xf8,!r\xbfx\xccs\x80\xf2\x11r\xbf\xe5\xad\x8cq#\x02r\xbf\xb2\x16SDZ"r\xbf\x06\x1f\xfbC\xf8\x18r\xbf\x8b\xa9\xdd\xe6\x13$r\xbf\xba\x11\x81\x17\xbb[r\xbf/4\xbe\x01t\x17r\xbf=A\x10X\xb3<j\xbf\xc4?\x00\xc9\xdaKi\xbf\xc8}\xb5\xf7q\xbdi\xbf^\xe9I\xeb\xdfqh\xbfOX\xc3NM\xcfh\xbf\xd0<\x93.\xf0\x8dk\xbf7@6\x06\xb62i\xbf\xd1\x9b\xdd\x99j\x0ej\xbfO\x0cF#oSj\xbf0\xcdi\xce^Ej\xbf\x16ID|\xc7ci\xbf\x8d\xad\xf9\x02O\xb9i\xbf\xdc\xf8=\xd6\x15\xe8h\xbf\xa9P\xeb\'\xf9\x0cj\xbf\xc2<\x10=\x96\xedi\xbf\xbem\xdd4j\xe1E\xbf+\xbb\x85\xce*cK\xbf\x82\x04\xc3Y\xab\xbaG\xbfC|\x04e\x9b\x87K\xbf\xcd\xf21\x0e\\\xf3K\xbf\xd3uTy\xca,F\xbf\xd4\xfa\xc1\x1f\xc0\xceJ\xbf}q\x1aI\xed\x9dI\xbfTe\xff\x9fuSG\xbfS\x05TB\x05^E\xbf\x9c\xc2\xd5\xa4_\x99G\xbf6L\x13\xad\xf4\x9bI\xbfG\x8b\xb4\xc39\xabI\xbf\xa8\xa6\x9a\xb8\xff\xe1G\xbfN\xc8\xadw\xdd\xbdH\xbf\x1e\xf0\xc6\xedN2=\xbfrGP\x88\xa5:4\xbf\xf0"=\x84}u7\xbf\x8e\x10\x95\xcf=\x052\xbfY\x12\xd3\xa2.\xc54\xbf\x16\x19\xbc\xce\xb6i@\xbfN\xc8\x85\xdf\xf2\x066\xbf\x08\xbf\x81\x14\xfd\xea5\xbf\xb3\t\xad\xb8}\xc44\xbf\xd0n\x95\xbb\x0cg5\xbf\xb8Q\xe9pk\xbf4\xbf\xa3#\xc4\x80\xc80:\xbf[\xf4.)\r\x0f7\xbfN\xed\xb4\x9d\xefq8\xbf\x87\xbe\x82<\r\x984\xbfU7\x9a\xfb\xbe\x089?\x9bA\x13X\xee\xa2;?\xd5CB%6\x13>?\xd3\x1e\xe5\xbb&\x9d3?A\x12\x87a=\x1a1?\xf6\x9a\xad\x80\x9a\xf3;?\xfa\xd8\x1a\x0b\xcb-4?\xc6\r\x14"\r\x030?\x89\x9e\x84t\x83\xab<?\xb0\xc17\xca\xab^A?\x92\x00\xcf\xe8g\x948?[8\xb0\xc8\x15\x923?-\xdb\x1e\xc3\x85\xca6?~\xc9\xeb\xa6\xbep;?\xc4\xf9=D}\xb8:?\xb3\xe6\xf7;\x98k4\xbf\x13T\xefp7\xb92?r\xbb\xbc\xe6\xc7\xd9,\xbf\x03B\r\x81\xcd@3\xbfP\x08\xe6\xb0\xe9\xea1\xbf!\xed\xaf\x15\xfe\x8f\x1d\xbf\x9bB\xe0?r\xae9\xbf\xa0,\x83\x90\n\xc60\xbf)l\xe7\x84\xfb\xa4;\xbf~wM\xa8r80\xbf\x9e\xd0-\x07aB*\xbf\xde\x80"\xb8\xbbj"\xbf@\xc3\x0b\xd5q\xc1%\xbf\xef\x97\xc1\xc8V\xb3\'\xbf\xd11g\t\x9b\xbe%\xbfQ\x8d\xd7N\xdaK:?\xb9\x81\xdd;A&F?\xe4\xe2\xc3T\x0b\xaf@?\xf2\xba\x02\x19I\x99F?\xe1C\xb2x\x97\x10G?.\xd9\x95\n\x93\x19@?\x917\x17O=\xc8D?[\xee@d\x9e\x94C?}Qy7\x1cB@?\x97b-k\\\xf89?I\xcd\x8a\xf2\xd4\xe8??Y\x88\xb3\x1c\x14\x16A?TG\x94h\x13\x9bB?w\xde`k\xa6\x83@?p\x06\x0f\x86B\xccB?\xfd\x7f\x8f\x02\x92\xa5e?G\xa4\t;J\xf3^?A8\xa7\x12j\xb9`?#\x91\x0b\xda\xf3\xa7W?z\xdb\xd7\x92>\x1bW?8\x1ex\xff\xeb\\a?\xd8m\xf3\xd7\xdfqY?\xfd:\x9a\x8c\xcfrY?\xaa\x97\x16O\x1a^`?Y^\x95\\F\xf2c?\xae?\xfe\x17\x1f\xb0`?\xe1\xf0,\x06gF`?]\x00\x05KB|Y?\xaa\xc6\xa0\x86e\xfd_?{W\xa7`X\xd4]?\x17\xeb\xa3\x92\xed\x97I?:\xa5\xe9\x94\xec\xf39?\x9d\xa5d\x0cY\x10B?mT\xdb\x05*\xb92?)z\x13\xbfr4*?\xcbYx\x86\xe4\xb0C?`<\x9f\xa7\x89;8?\xa7k_\xd2E0??\x88c\x1b\xd4\xb3[@?\x8f\xde\xb6\xca\xe4`F?-K\xd0I\x8e\xbdC?\x9c\x14\xd5 \xd7\xfe\xea\xbe\xf3\xbb\xa0Kks??\x15\x1e%S\x1fZD?\x01\xdc\xdd\x94f\x88\x11\xbfM\xe5FT\xa0\x04\xe6>[m\xbd\x06\x92!>\xbf\x19\xc1W\xbe\xba|0\xbf!\x15\x1b\xfa\xa3\x05/\xbf\xad{N1\x83\x06.\xbf\xf4\xcf\xc5\xbc\xcd\x86#\xbf\x07P\xd6]\x9c\xb71\xbf\xc7\xda>\xd8gz1\xbf\x85\x98\xcb5!\x94\xfa>1[\xae\xc5\x1cr&\xbf\x94\xfc\t\xc63$*\xbf\x14\xecZF\x95W1\xbf\xa3\x0c\x17\x81,\xfb(\xbf1\x0b\xf9\xa7\x86\xfc%\xbf\xaf\xfb\xcd,\xca\x171\xbf\xf6|\xc9+\xb83\x9e\xbfx\x9f\xc2\x0e\xddT\x9e\xbfVix\xab\xfev\x9e\xbf}\x05/yLP\x9e\xbf\xaa7\xe4\x8a\x90~\x9e\xbf\xdf\xeau}\x1c4\xa0\xbf\xd0\xb7\xdf\xa7\xfb\xbb\x9d\xbf\tE;\x990\xc1\x9d\xbf\xbbV\x13\xac\xd3\x0c\x9f\xbf#6\xe8\x1e\x83\xf9\x9d\xbf\xd3\x08A\xb4\xc5\xd4\x9e\xbf\x1f\xea\x90u\x0b\xf6\x9d\xbf\x91\xa6\xd7TJ{\x9d\xbf0\x99\xffm\x1c)\x9e\xbfX\xf1_\xbfD\xe2\x9b\xbf<t^\xa9\xcf\xca%\xbf|}\x9a\x18,<:\xbf\xffq\xc7Vaj=\xbf|\x85\x0f\xf0E\xb61\xbf}o\xfa\xd6\x07\xa2:\xbfh\xbbLN\x08}7\xbflE\xda\xd2M`8\xbfb\x1d\x10E\xc0\xd83\xbfpg\xdb\xa7\xc8\xd98\xbf03\xe2\xea:\xa2C\xbf\x92\x86\x12`$\x05;\xbf\xeb\x7f\xc9\xb4\xddj?\xbf\xc8?2\x80\xb2\xd0=\xbf/\x03?\xdf\xc1\xc1@\xbf\xd3\xe6\xc9\xaf\x15yC\xbf\\\xbbX\x97\rw>\xbfz\x85\xd1\xc0\x87\x05\x1f?]\xe8qg\xc0\x19=\xbfWd\x82\x9b[\x06\x16?0(\x04\x9c\xfa\x88>?\xf8\x1b\xf8\x8d\xd8e8\xbf\x13\xe8\x0e\x13\xf8\xca!\xbf|\x8au\x1fQ#2\xbf\xd1R:\x84j\xfe0\xbf\x8b5\xaf\x19\x91\xdb?\xbf\'\xbc\xdd\x18\x13\xbf>\xbf6\xe6^\xb0\x89\xf73\xbf\x14\xdfD\x1d\x9a\x92*\xbf\xa8\x0bj\x0f\'\xd94\xbfb\xee\x87\xbb0j1\xbf$o\x97\x85\x83\xb0Z\xbf\xac\xbaB\xc1\x86\x8a\\\xbf]~o,\xa2n[\xbfQl\xd8^\xbe\xcb\\\xbf\x92\xf37 6_M\xbf\x97}2\xaa:IL\xbf\x8aR3a\xb9=B\xbf\xd9O\xd2\x9c\xce\xab\\\xbf\xf9\x81\xdaf$uZ\xbf\xb9\x9f\xa9\xdc\xb0 r\xbf~\xc9\xde7v\xc9\\\xbf\x9fn\x02\xdd\x96\xdbZ\xbf?P\xd3\x90\x91\xd9^\xbf\x1a\xddp$\xc1{^\xbfG$\xc5\xc7qRa\xbfQ\xe2\x8b\xd4\xa5\xf6\xeb>\xd9\xd9/P\xb6\x9b9?\xbd\xc9\xd2\x82\xf0\xff0?\xd1$\x9d\x8d\xa3\x16B?\xa4K\xb6\xbd\x80kF\xbf0\xcd\xac1b\x9a0?A\x80\xee\xb1\x1b\xd9B?\xa6Y\x10\xf9\xb0\t3?\xa1\xe5\xc5\xe2\xe7\xde\x1f?\xb8\x94\xfc\xbe9G\x12?{\xa6D\x86\xf5sG?\x92!W\xc4\x8fH<?\xde\x87\x17\x89\xce#E?WP\xab\xd6Z\xd42?n x\xed\xd2^\'?\x80\x0bex+\x8d\xf9>\xc9H\x8e9\xed+A?X=\x03\xf0\x9bm&?\xa0y\x01i\xf1\x00<?qQ- \r\xf5U?8>\xf7\xaduQ:?K\x07\x96\xe9\xd5\x99;?\xb00\xb3\x06\xfe\xf34?\xf3^-\x10\xecN2?\x80Z\xeb\xda<\x08 ?\xd5\xa8"\x0e\xcb\xf0 \xbf\xd8\xb5\x92\xcd\xae<\xf1\xbe\xb6\xe2xn\xf7^)?\xcb|\xcf\x99\xc4r(?v\xf6V\xd2\xa7<\x13?a\xa2\xbc\x99\xfb+L\xbf FU\xb7%eQ\xbf\x1e\xc7}V\xbf:P\xbfu=\x0c\x9bBqQ\xbf\xc4\xeeUx\xb9\xe7Q\xbf\xe0Tc\xa7\xe8YH\xbfM\x04\xd7\x9c\xc8\xd8R\xbfwJ\xc2^\xee\xdbP\xbf\x94\\\xe4\xea\xc1\xbeO\xbf\xd8h\x99\xbc\x95]L\xbf6BP\xa7\x0f\x83R\xbfr\x96\x83\xbe\xc4\x86Q\xbfb\xc7\x1bVx\xe1P\xbf\xe0`C\xfe~bM\xbf0\xad\x80\x0f|9P\xbf3Z\xdc\xf6\x81\xcc\xc1\xbf\x05\xf88D\xacQ\xc1\xbfk\x96\x81\xa8*\x98\xc1\xbf\x98m\x89\x08TF\xc1\xbf\xde,\xdd\xd4\x8a;\xc1\xbf\xcb\xb1\xca\xc4\x05\xb5\xc1\xbf\xae\x8d\xeb\xae\xccE\xc1\xbf`\x9d\xd5HWf\xc1\xbf\x8d\x1c+\xf5\xddM\xc1\xbf!YRGM\xc7\xc1\xbf\xd6C\xb2\x8bu\x9a\xc1\xbf\xa8)+\xcc\x9e\x97\xc1\xbf#\x92d>\xa1k\xc1\xbf\xf9\x96\x07\xbdU\x9c\xc1\xbf-\x9f\xb4\xfbw\x8e\xc1\xbf\xa5^\x9c8DP<\xbf\xc1\x94\xda\x02\x0b\xb3%\xbf\x13\xa0\xe7O\xd6\xf1>\xbfKkB8\xec\xf9$\xbf\xf7d\x16\x88\x84\xc9\xec>y\xad$\xdcQ\x86<\xbfz\xb7\x9ez\xe9\x1e5\xbfM9\xf0\xe8\x92g1\xbf\xf9\xb7u\xf1kT9\xbf\xcb]\x80\x088\x10C\xbf\x11\x8d\x9d\xc6\xcbB@\xbf\x8a\xa2\xb4\xfd\xae\xc4<\xbf\xc7\xf0K\xb3bT1\xbf\x10\x17\xda^4\xde=\xbf\xfc\xec%u@\x804\xbfb\xe8C\x12\xbe9a\xbf<\xf0\xc3\t\xfe\xf0a\xbfS2d \xe7\xcf`\xbf\x91\xb1}K2Bb\xbf\x92\x96\xf4\xef\xfd\xdaa\xbf\xbd\xcc\xde\x86\x9aYa\xbf\xed,~\x8eO\xd2`\xbf\x87\xa7\xad\x89y\xcd`\xbf\xebD\xbb\xef\x8c\x1fa\xbfpG69\x15\xdb`\xbf\xd1m\xf5\x8f\xbf\xe3`\xbf\xf8W&\xc3\xed\xa8`\xbf\xfa8}\xeel9a\xbf\xd4\xc476M\xfc`\xbf/\x1d\x1cq\xa4\xca`\xbf\xcb\xa9\xae`\xfal\x07\xbf2\xac\'\xe6\xc4\x062?F|\x96nCC2?\x1e\xd5*\xb4\xaa0"?QT\xe2\xb9\xc1\x8f6?\x7fY\xec\xaa\xa2\xce"?\x8f\xb9\x8f\xbc\xe9\x07/?\x1c\x90g5F\x1a\'?(k\x80\x1c\x06\xc7&?\xe0&\xebz\xba1$?\x0ej5\xb5\x80\xe2\x1d?=\\\xa6\xdf\xcf\x86!?=y\'2d\x93"?#\xbf3\x1f\xd4\xd7*?\xf9\xdcf^l\xc3$?-n8\x08thJ\xbf\xce\x7f\xf3O\x08$6\xbf\xdfw;2\xf3\x8aF\xbf\t ,D\xd3\xae0\xbf\xed\xa6\xa7\x00\x96\xdb1\xbf\xc7)\x0e\x12\t\xe6D\xbf&g\xcaqFF>\xbf\xacN\xc0 \xd5\x06C\xbf\x07\x104c\xbe\xe8D\xbfl\xce\x8f\xea\xb5\x7fL\xbf\xb9\x03\x83g\xda_F\xbf|5q\xfc\xe0]D\xbf\xc6\xe9\xa2Z\xfbU<\xbf%D \xe7\xbd\xabE\xbf~\x1d4|\x1c\xe4E\xbf\xaf\x13(\xb6j-V?\x98\x02\x14\x1e\xd7|Z?@f\x1bC\xdeZY?\xd2/\xfa\x0e\xc2~Z?\x8a\x87\x97\xcf\\4Y?\xbc\x1aw\x83\xda\x14Y?&@\xa0\x7f\xe4JZ?G\x1e\x15\x15\\\x17Z?\x90\xba\x0c\xf1\xe9AZ?W\xee8\xd5\xf0\xf9X?\x99\x14G\xfb\xd5\x8dY?\xa5\xa3\x9aV\xdb\xbcY?\xc2\x18\xc7\xc7pEZ?\x01G\tx\xc0\x94Y?\xb8\x8e\xeb&?\xccY?G\xc7\xb7\xac>\x815\xbf\x8c\x19nQ\x9dZ,\xbf:\xd1F\x96Ny-\xbf\x82H\xa2\xd4\xf5\xaa&\xbf\x01\xaf*_.\xac1\xbfc\xcdhI\x81,\'\xbf\xd8\xe3/Di\xa3+\xbfh\xbe\xb13\xba\xa64\xbfw\xa5\xa2\r\xde,-\xbf\xedI\xcc^/C4\xbf\xf0\x1d\x9b+\x0c\xe6$\xbf\x88x\xe8\x8b\xc3\x07/\xbf.\'#qO\x060\xbf\xf8\x12\x8d<?~0\xbfZ\x8a>4a\xf92\xbf\\\xa4\xd4H\x12\\g?\xd1\xa5\xeb\xca\xeb\x0bb?\xa8\x1fT\x0cU5`?\xb4\x9e\x88vt\xd7_?\xe5X\xc4\xcb\xe5cQ?\xc3n\x1e\x1cW\xdd`?j\xcd\xe6\xc8\xce\xfdu?#\x97\x81\xc8$\xf2j?\x91\xd2\x87\x90\xa1\xb6V?\xc3\x8e\xf1\xfc\xee+l?D\xa6Z\xe5z\x1da?(\xe1?+2De?;\x04\x8f\xfeux:?[$\x87\x80\x05\x94p?\xf4\x93\xfd\x08N\xe9_?\x7fY\x82\xbc}SN?\x0e\x1e\xf3\xfe\x05\x11S?\xa3tOO\xdf@O?\xf0TQ\x18\x8a\x8cQ?\xe4\x153\x98\x00\x87P?\x1f?\t\x19}\xdaQ?Gr\xe5\xc4\x06\xdcQ?HlB\xda+bQ?1\x0e\x04h\xc3\xd6T?\x98(\\&\x80\x0bP?\x86\xf6\x0c\xab\xdeNN?U\x16HT\xdb\xb2P?P\xe9\x9d\x89\xec=Q?`\xe9\xc9^]BQ?o\x13:\xd0d\xd4O?\xcdM0|Y\xaa\x81?\xf5\xc7\xd6\xc57\xdc\x80?\xbdl\x87\xa7\xd0B\x7f?\x93\x90\xd4\xbe\x8e\xdf}?\x1a0\xf5\xe3LO\x7f?\xcf\xf0\xe0]e\xe1\x7f?t\x16[\xa8#\x01\x8a?\x03J\xe8{\xf2f\x83?*n\xda\x04\x8b\xfbz?\xb0\xad-\xd8\x03\x0e\x85?S%\xcf\xf8}\x0b}?\x14\x154[\x0b+\x81?\x9b0\x88\x03.cu?\x85o\xcca\x16\x0f\x86?\xf6\x9fb\x17qQ\x7f?\x8c\x9c\xa9\xb5\xbe\xbfa?!\x9d0\x81\xe47P?\xdf\xc8mv?\xb0T?\xb0\xb6\x1a\x1ar\x96]?6z\x9e\xf4\xf4\rb\xbf\xa1U\xb5\x0f\x81\x00P?\x8e\xf2-a\x0cMR?F^;X\xbd\xc8O?n,[\x10\x8d7Q?\xd6\xc8\x82\x14!?F?N%*\xb7FHV?4ax\xdc\x0b\xc8N?\xa4\x1c_\x94\xb8\xbcK?\xce\xfe\xf9\x89\xe6}V?\x8b7\xe2\x04\xe1\x80M?\xc4\xc7\xe6\xe1\xae\x00~\xbf$\x82\xa2#\x17\xc4~\xbf\xe3\xeb\x1f\xd7\xca\x02~\xbfC\x85\x9a\xa9\x84F~\xbfP\xb6\x19\x93\xaf-~\xbffbY\xee \x87~\xbf\xf1\xd7\x16\xcc\x1c\x8f|\xbfj\xab$\xd3\xb8\xbe~\xbf`Cv3\x1ck~\xbf\xc8\xb8\x1d\x17\x01\xd9}\xbf\xbf\xc8D\x93[6~\xbf\xc8\xa7\x97q\xd0A~\xbf\x827\xc6\xf2\xe6\xe5}\xbf\x88\xda\xb6\xa9\xfbS~\xbf\xdd\xc0\x07\xf2\x1c\xbb}\xbf\xfb\xd0H\xa7M>s\xbf\xe3\xbc\xfc\xaf\xa5rm\xbfPv+3#\x83q\xbf\xdd\xc1\xbc\x80\x89\xe4o\xbf_\xcd\x95\xd3rzd\xbf\xc5\xc6\x0bIs\x94q\xbf\x9cZ\xb4\x99\xf5\xa8m\xbf\x10\x80\x97\xd9g=o\xbf\xec\xe1\x0e\x8ac\x11q\xbf\xd3\xb9\x90\xb5`\xbfp\xbf{\xe9J-\xcaMr\xbf\xa6\x0c)\xcd\xf7\x82p\xbf\x88\x11w\xfaBRp\xbf\xd4\x97\x0c&\xfa;p\xbf\xa4\x7f\x82l\xe0fp\xbf\xe4\xf8\xd2\xc7\xe6!_\xbf\x879\xc3\xcb\x12\xe6S\xbf\xf8\xd1w\xfd7XU\xbfb\xbb;8-\x95_\xbf\xb7!\xac\x86\x1eJL?|o?\xf7N\x18T\xbf\xb8{\xeb6\xcc\xcdT\xbf\xa2\xff\x8f\x90z\xddS\xbf\x8e;\xc6`\x11\xdaT\xbf\xf0\x8e,\x98\xcdvJ\xbf\n\xc0!\x19\xc6qP\xbf\x19)\x90\x16z\x13R\xbf\xeb\xd2\xac\xa2\njS\xbfWWG?\xddzW\xbf((\x80e_\x9dS\xbf\xe0H\xe3lId\xe0?.\xc3\x9b\xbd\x14x\xe0?B,8\x84\xfeg\xe0?!\x12uA\xd3\x82\xe0?\xb2\xad!\xd2Ao\xe0?{4\x99\xe6\x9ac\xe0?\xf6\x976\xaa\xb4m\xe0?#\xea\xe3\xd7xq\xe0?\xc0oH\xb4Vb\xe0?\xac\xaci\xddeZ\xe0?\xcc8\xe6lCa\xe0?e`U\x12Oi\xe0?\xe30W\x058o\xe0?n\x89\x1d"\xecf\xe0?\xf9\x1d\xd5\x83\xccg\xe0?\x8cu\xf8\xf44\x88\xa5\xbf\x81\x1b\xdb\xf2%\x7f\xa5\xbf8\xfae\x1f\x02\xa0\xa5\xbf\xe6\x03)\xa1\xb2\x9e\xa5\xbf\xf5\xb9F\xf3\x8b\x9f\xa5\xbf\x84\xe4\xa3\xd0\xac[\xa5\xbf>\xcf\xc3co\x86\xa5\xbf\xc4K\xfb\xcb\x85[\xa5\xbf^\xc4\xd4S\x15\xb4\xa5\xbf\x1et\xb9\xf4\x07\x8a\xa5\xbf 3\xca\x93\xda\x8e\xa5\xbf9u\x10\x8a\xf2\x8d\xa5\xbf\xf6{\xb6\xf5\xe2\x9c\xa5\xbf\x14\xa2L\xb9q\x8e\xa5\xbf\xa9\x02\x0e\xb1L\x90\xa5\xbf2\x98ja<\x92p\xbfg\xc6\xa7.\x7f\x9eo\xbf\x83f\xfd!\xa3\xc0k\xbf\xec\xe31\x81\xa8\x94i\xbf\x98\xb8\xdaA\xdbll\xbf\x95Di\xd9 \xc5k\xbf\xa9S\xf1\xcd\xf6\xb9}\xbf\xcd\t\n\xf0\xc2\x8ds\xbf\xee\xab-,\xb0\x0ef\xbf\x18\x1bh\x1bw&v\xbf\xda\xe0\xa8\xbc\xfcch\xbf\x8c\xedKW\x18\xa7p\xbf\xa1R\xfe \xff\x0fZ\xbf\x19_r\xf9v\x8bw\xbf\xa1\xf3\x83\x0b\x9c\x87k\xbf\xb6\xaex\x8b\n\x9bO\xbf\xd9.K\x86>\xf5E\xbf\xfbQ^\xfaX\xb1>\xbf\x03\x89\xc2\xef&\xe6[\xbf\x1ei\xf8\xb4\xfe/]?\xad\xbd\x1f!\x06\xde7\xbf\xa5\x17\x14\xc0.\xd3F\xbf\x90\x1blu\xf3\xdb@\xbf[\x93?\xd7\xaa*:\xbf\x0b\xc0\xdd/\x99,>?\x8c\x1ew&\xdaI#\xbf/C]G\x97\xe5.\xbf\xcdV\x96&o\xf8?\xbf\xf8\xe5\x9c\x1b\x9d\xcfE\xbf\xa3\x16\x0c\xc1\xfc\xdc8\xbfmR.\xb3R\xb9\xf2\xbft.\xd2\xcb\xfb\xa0\xf2\xbf7M\x1d\xf7\xf4u\xf2\xbf\x8c\x80"\xd1\x85^\xf2\xbf\xf0,eEXv\xf2\xbf\x9eC5{\x00\x81\xf2\xbf\xb7\x0b\xc7\xb7-\xde\xf3\xbfy\xb2w?\xed\xf8\xf2\xbfV\x92C\xb2\x0c1\xf2\xbf8GM170\xf3\xbf\xf2\x96\x9a\xa6\xbfR\xf2\xbfx\xf6\x1c\x01\x90\xb7\xf2\xbf[\xff\x86\x01\xbd\xcf\xf1\xbf\x9eA\x10U\x98T\xf3\xbf\xc8\x80d\x1a\xcbt\xf2\xbfg\x1f\rh\x0fs:?k\x9b\x10\xee\n\xbd@?\xa4\xc1D4q\x84"?\xe4^\xf9y\xc1\x9dP?OZ~\x81$\x1fH\xbf%\x98Tmwe6\xbf\xf9\xd8\xafz\xd6\x8cC?Da\xd3\xbf\xf4\xeeF?4S\x0ch\xb6\xf6$?. \xa6\'`\xeb6\xbf\x91qw\xdb\x18\x12??Z\xde\xf9\x83\xccU0?/O\xc0\xce>\xf3/?\x7f;l*u/4?\x93\x148\xd1v\x87.?\x1f5:\x9b~\x92f\xbfk\xf4\xfb\xef\xab\ng\xbf\xae\xaa#\nX\xdeh\xbf\xeb\xac!\x01_\x8eh\xbf\xd5&e\xbaq\x91x\xbf\xe3a|y\xc7iX\xbf\xa7\xb7\xe3\xae\xd2\x8ek\xbf_\xb8\x16+ZGf\xbf\xbe={\xe3\xaa\x0bg\xbf\x08\x93^d\x1a\xd8f\xbf\x80\x8d \xad\xce\xe6f\xbf\xf4;\x9a\xc0\xc4\xbef\xbf\xd7\x98\x19\xd5\xa9\x99f\xbf\xcaK\xd7\xd1\x8b,p\xbf\x19V\x93\xebn\x17k\xbfv\xcc\x89\xea\xb7>K?,\xbd\x0c\x16\xc7;2?\x06\xf9HH\xb1>D?G\xaf\nE\xaaEB?\x88w\x83\xf4\xba8B\xbf*-B\x8fl\xf3C?\xde\x01\x93\xbeK\xef>?\x0e\xc14y\xe2J7?\xa9C7\xd3\xc6\x1bB?\x19\x87\xc9\x01\xbaOD?\xa5\x98\xa9t1\xaa9?\xda\xb1\x9a\x90\x96z=?\xbbj\xb3\xa6\x0fz8?\xe0\x93%7\xe4\x0fG?&\xbd}"R\x0f@?\x1a\xe1V\x14\x99\x16&?\xaf\xd8\xef\xfcE`??\\\xe7\xa2\xc5cV$?\xe3\xbd\x8eI.\xd4:?\x99\xff\xedLJAB?{\xfe\t6T\xf4\x14?\xccc\xe0\xc4{\xf54?\t"]\x1d\xeea8?\x01\xde\xd3U\x96\xc4"?h\xb5\x9b\x18\xc5\xe4\xb0>\xa5>*\x00\x90\xde\'?^>\x1a0:h.?\x8d\xb4X\x1aq\xce3?;\xac`\xd4\xeb`\x11?\xbe\x9d\xd8\x9f\xff\x08\x12\xbf\xb9s\x87\x85\xf6:\xaf?\xdbT&K\xddb\xaf?\xf8HY\x81\xd9\xd8\xae?0Y\x14\xcc\xa7\x13\xaf?\x89\x84\x86\x15\xa1\x03\xaf?SW$\xa5:\x98\xb0?\x8b\xe7\xaa\x16\xe2 \xaf?\xd0\x9b`v\x1aV\xaf?c\xa3D09\x15\xaf?\xaa9\xc3\xbcs\xe3\xae?\x0cC\xbaG\xa6\xd4\xae?\xf9\x95\xf8\xf3\x01\xfa\xae?\xa0,D\xec\xa4"\xaf?)\xff\x86\x92\xc4\xdc\xae?A^L\xe3\x0b\xba\xae?\xec]\x81\xa2\xff^,?\xa9u\xe0\xf2\x93\xf93?\xe0U\x87S6|B?\xf1\xc0\x05\x9a>\xaa??\xabr\x9aF\xff\xff6?\x1f\xccI\xee\xa2.:?#\x0b\xfd\x0c\xd6\x807?R\x80\x9d\xcb\x19\xcd,?\x06P(\xdb,\xd3>?\x87\t\xad%H\x07:?\xb0\x88#\x96i\x11>?\x1b/\x1d\xf3\x93_7?;\xff\xe8\xea/m;?\x1d\xa3\x87\xb8\xc9C9?\xe9\x99\x01\x05~\xf5*?\xe9.H"NiF\xbf\x0e\xc7\x96r\xd1x]\xbf\xc3\x06ek\xd6\x92i\xbf\x12h\x94\xfei9i\xbf\x9d\xf0b\x89\xb9\nq\xbf\xe0XVR+Y\x85?z\x91\xa2r\xa04w\xbf\xcd;\xcdI&\xe7w\xbf\x95\xcc7\xe0\xac8o\xbfn\xb3\x19.\x9cdp\xbf\xf8\x82\xc4!\xe7\x1fr\xbf\xf9vP(\xbe}k\xbf\xa4\xb0\xec\xf5\xferu\xbf\xbd\xb4\xe0\xab\xda\xed@\xbf\xc4\x04\xe7\x8a\xac\xf5q\xbf\xee>\xbc\xcd\x14\x0eR?a\xf0\x04\x07N\xe4+?\x9d\x16.b\x88\xb0;\xbf\xa5$\x8c\x7f$\xcf#?/?\x9f\xdc\xad@ ?\xec\xf8Y\xf8\x88PQ?Hk\xdbw(\xcc8?\\4\x05\x8f\xed\x05;?\xe7y|\xb1\x91\x85@?D\xb6)\x9a\x0c\xabS?\x19%U\xdbj\xa9L?\x9a\xd6\x07\xa1FIJ?\x0eR9h\x18\x8fB?\xb8}\xbf\xd1\xd1iK?/i\xd2\xab\xcc\x93F?\x12\\\xde\xce\x817\xb6?\xaeK{W\xf7\x1f\xb6?\x9fXy\xfd\t\x1e\xb6?\x92\xcf{\x01e\xe7\xb5?\\\x802\x85\xb1\xfe\xb7?\x9a\'\x81\xea\x8b\x17\xb6?E\x1a\x15N\xfa\x0c\xb6?\x97\x1c\xd6\'\xb7\x16\xb6?\x82\xe9\xd9q\xc7\xd8\xb5?A\xfb\xf5=<\x1d\xb6?\x1eXw\xd8\xfb\x1a\xb6?\xbf\xd7g\x08Y\xd3\xb5?\xbb;\x90o\xd5\x15\xb6?\xf8\x1f\xcb\x92\xff\xcd\xb5?&}\xc6\x8c\xd5\x1c\xb6?\x84\xde\xb8\x82"\xe67\xbf*D\'\xcb\xe4\xdc9?5\xf9u\xf7\x80\xc2N?U\x96J\x10z\x086?\xcd\xb4V\xb3I\xcc9?L.\x97\xe5Oq\x13\xbf\xf3\xb7~\xc2\xe8\x97\x1b?\xdcVLp\xe4\xc1\x01\xbf\xcf^\n\xf0\x9f\x9d!?;\xb9\xdc\xf4\x8a\xe90\xbfcs\xb1\x9cp\xd0;?\x8e\xe5?\xceC\xf9\x1f\xbf^\x979\xf5+\xcb\xfa>}\xd3Y\xcb\xc1\x99\x1b\xbf\nT!3\x1ds\x0e\xbf\xea\x9f\xb9Y\xbf8}\xbf\x83\xc1v#\xf6 \x8f?+1\x04\xfcV\xe9\x88?#\x92\x01\x92\xd3\xbe\x85?k\xd2H\x98\xad\xec\x85?!\x15\x0f\xdb\x9f$\xa1?\xacAd\x92\xd1\xd8\x86?\xaf:\x13B\xc6h\x87?\xcb[\x82\xa6`V\x84?\xf4\x0ci\x16\xce\\\x91?\x9d\xebF\x07\xec\x08\x83?\x05>\x10\x86G\x9b\x87?a\x0f\xfe\xe2G\x02\x88?\x16\xdf\xcf\xf4\x82h\x85?\xc5\xd9d\'\xbb\x16\x87\xbf\xb7c\x07o\xf88:\xbfK\xa2\xd9\x1d\xc5\xd89\xbf\x1b\x88`\xa0\x82\xf87\xbf\x1f\x85\x87\x0b\x1e\xe3>\xbf\x08\x88]\xb6\x9aa6\xbf\x1cW\x8f\xceD\x18D\xbf\x99`2K\x85\xec:\xbf\x9fF\x04\xaeQ\x89<\xbf\xeb1\xe2\xd90 >\xbf\x97\xe2+\xe6\x8c\xf4A\xbf\x1f\xf0\x87^\x1c\x90E\xbfT\x00\x01\x94\x08*?\xbf8\x00\xff\xc9\xfd\xb2=\xbf\xa0\xffuw\xb3T?\xbf!\x99\x01#t\xe79\xbf\t\\\x89\xa4=\xe9K\xbf\xbe<$]\xc0\xf3F\xbf\xe3\xf8Y\xf1l\x0c>\xbfc\\\x11w+6F\xbfe\xed\xec\x1a\xa7\xf3G\xbf\xfd\xb6\xeb\xb2\xad\xe8P\xbf\x9cPq\xfe\xb8>J\xbf\xb7\x1bl\xd1\x93iJ\xbf\xcd$\xf8\xee\x0eEC\xbf\xd6>\r}\xd7\xb0N\xbf_\x91\xb7\xeaIwD\xbf\x8ac\\\xe9\xfe\x9bK\xbf\xfc\xa2\xe6":\xc0C\xbf\xfe$M\xf3\xc7vP\xbf}\xff\x8b\xd9\x99 N\xbf\xc1<\x15V\x9fT\xbe?\xfd\x81K\x80\xbb\x97\xc1?\xf6qQ"8\x96\xc1?\xd9\xc5\x9f[\xedv\xc1?\xd8K\x816\xf3\x84\xc1?O\xb6J\xcd\x06-\xc4?l\x11\xfa\xc5A`\xc1?R\xd6\x0b\xd0F\x8b\xc1?_\x94O\x12%Y\xc1?|\xc8\xd4\xf1\xa5v\xc1?N\xec\x16H\xcaa\xc1?<\xf27\xc6h^\xc1?,2,"\x1f\x86\xc1?2f\xbb\xc0\x9a@\xc1?\xc2\xa5Q&m-\xc1?B\xe3\nym}2?H\xcb\xf1\xbb\x08\xea\x1a?e\x82n<\xbe\x978?\xaa\x13\x9eg.\x16\x1e\xbf\xf1l\xf9L*\xfa(\xbf\xf0\x83\x89\r\x90DF?fH\x00\xc5\x11d.?\x1cF\xde"8\xc9*?\x96s\xef\x9d\xa3\xb5A?\xcec\x8e\xe3>":?\x940\x1a\xdf\xc6y5?\xd7b\'\xbfn\xc3$?\x08\x7f\xd0\xc8\x93\xe1 ?l\xd7\x87\xe9\xe7\xdb2?/\x14\x00W\xd3N\x0b\xbf"r\xd9?\xa9\xed@\xbf\x91\x85\r\xae\xdd\xbfC\xbf\x17\x95\x0e|\x9d)1\xbf\xed\xb0f\xf6\xa9\x1c3\xbf\xb7\x0f\xa4\\\xa2M5\xbf\x9b\x9c\xd9\xd1\x90\xb55?\xcc\xc8\xa6\x86\xaft8\xbf,\xbf\xd0|H;+\xbfYBT\xc4&\xac3\xbf\x82\t<\xbfm8C\xbf\x8b<\xa0ZP\x083\xbf\x01\xca\x13\x18\xeeb4\xbf\xa7\x91\xa1\xff\xe6g4\xbfj\x90z\x83\xafp;\xbfdY\xe5\xd4\x91\xd7R?\x019k\xd45\xec??\x05lH\xc3qw<?\x82y\x8c\x9fw\xca=?\xde\xacpl\x96\xae3?\xd2\xc5\xbf\x17\xfe\x143?{\xb6\x89\xa2=\xdc;?\xc4\x89\xb6B\x9c\x197?\x8c\x0b\xdf_\xee\x9b:?\x99|\rCp!D?x\xa5\xd6[\xdeOB?\xa8\xab\x7f\xf8\xf4b\x12?@\xe7\x7fgR\xa9D?P\xc2\xf2\xa8\x0e\x958?\xce\xd61\'s,??\xd8T\xc8\x90b\xe28?\x93J\x84\xd0\x94=\x99?U\xe1\xf0?o\x0f\x98?\x83\x18\xd5\\\x95\r\x99?W\xa3\xd7\xc2vB\x98?\x8d4g\xadp4\x97?\x91+\x81\xefgs\x97?\x19\x87},\xe4v\x98?@\xb7\xa2\x0e`\x0f\x98?\'\xbb\xf6\xc7\xa3|\x99?\xff\xe9\x04\xfaI"\x99?\x91\xd6\x9b\xa4\x07\xd6\x98?\x99\x93U\xa3\x80\xfe\x98?\x12\xb1\\Uk\xc3\x98??\x8bC\xa3]\xde\x98?H\xb8\x94E\x17\xa4\x98?'
p103
tp104
basS'strict'
p105
I00
sS'readonly'
p106
I00
sg59
g0
(g60
g2
Ntp107
Rp108
(dp109
g64
(I00
I00
I00
tp110
sg65
S'float64'
p111
sg67
g100
sg68
I00
sg38
NsbsS'allow_downcast'
p112
Nsbsg38
Nsg55
(itheano.gof.utils
scratchpad
p113
(dp114
bsg12
Nsg59
g108
sbag0
(g8
g2
Ntp115
Rp116
(dp117
g12
g0
(g13
g2
Ntp118
Rp119
(dp120
g17
(lp121
g0
(g33
g2
Ntp122
Rp123
(dp124
g37
Nsg38
Nsg39
I01
sg40
g41
(g42
(I0
tp125
g44
tp126
Rp127
(I1
(tg50
I00
S'\x02'
p128
tp129
bsg55
(itheano.gof.utils
scratchpad
p130
(dp131
g58
Nsbsg59
g0
(g60
g2
Ntp132
Rp133
(dp134
g64
(tsg65
S'int8'
p135
sg67
g50
sg68
I00
sg38
Nsbsbasg55
(itheano.gof.utils
scratchpad
p136
(dp137
S'trace'
p138
(lp139
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p140
I166
S'__pow__'
p141
S'return theano.tensor.basic.pow(self, other)'
p142
tp143
a(S'/usr/local/lib/python2.7/site-packages/theano/gof/op.py'
p144
I399
S'__call__'
p145
S'node = self.make_node(*inputs, **kwargs)'
p146
tp147
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p148
I533
S'make_node'
p149
S'inplace=False)(input))'
p150
tp151
a(g144
I401
g145
S'self.add_tag_trace(node)'
p152
tp153
asbsS'outputs'
p154
(lp155
g116
asS'op'
p156
g0
(ctheano.tensor.elemwise
DimShuffle
p157
g2
Ntp158
Rp159
(dp160
S'drop'
p161
(lp162
sS'shuffle'
p163
(lp164
sS'augment'
p165
(lp166
I0
aI1
aI2
asS'input_broadcastable'
p167
(tsS'inplace'
p168
I00
sS'new_order'
p169
(S'x'
p170
g170
g170
tp171
sS'_op_use_c_code'
p172
S'g++'
p173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p174
(dp175
bsg59
g0
(g60
g2
Ntp176
Rp177
(dp178
g64
(I01
I01
I01
tp179
sg65
g135
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p180
(dp181
g138
(lp182
(S'/Users/ankitkumar/Documents/projects/dfa/control.py'
p183
I6
S'<module>'
p184
S'dfa= theanoDFA(15,len(total),init=2)'
p185
tp186
a(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p187
I52
S'__init__'
p188
S'self.L2_sqr += (self.WT ** 2).sum()'
p189
tp190
a(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p191
tp192
a(g144
I401
g145
S'self.add_tag_trace(node)'
p193
tp194
asbsg154
(lp195
g77
asg156
g0
(ctheano.tensor.elemwise
Elemwise
p196
g2
Ntp197
Rp198
(dp199
S'__module__'
p200
S'tensor'
p201
sS'scalar_op'
p202
g0
(ctheano.scalar.basic
Pow
p203
g2
Ntp204
Rp205
(dp206
S'output_types_preference'
p207
ctheano.scalar.basic
upcast_out
p208
sg172
g173
sg38
S'pow'
p209
sbsg38
S'Elemwise{pow,no_inplace}'
p210
sg172
g173
sS'destroy_map'
p211
(dp212
sS'nfunc_spec'
p213
(S'power'
p214
I2
I1
tp215
sS'inplace_pattern'
p216
(dp217
sS'__doc__'
p218
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p219
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p220
(dp221
g138
(lp222
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p223
tp224
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p225
tp226
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p227
tp228
a(S'/usr/local/lib/python2.7/site-packages/theano/gof/type.py'
p229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p230
tp231
asbsg59
g0
(g60
g2
Ntp232
Rp233
(dp234
g64
(I00
I00
I00
tp235
sg65
S'float64'
p236
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p237
(dp238
g138
(lp239
(g187
I52
g188
S'self.L2_sqr += (self.WT ** 2).sum()'
p240
tp241
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p242
I452
S'sum'
p243
S'acc_dtype=acc_dtype)'
p244
tp245
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p247
tp248
a(g144
I401
g145
S'self.add_tag_trace(node)'
p249
tp250
asbsg154
(lp251
g70
asg156
g0
(ctheano.tensor.elemwise
Sum
p252
g2
Ntp253
Rp254
(dp255
S'acc_dtype'
p256
g236
sg65
g236
sg172
g173
sg202
g0
(ctheano.scalar.basic
Add
p257
g2
Ntp258
Rp259
(dp260
g207
g208
sg172
g173
sg38
S'add'
p261
sbsS'axis'
p262
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p263
(dp264
g138
(lp265
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p266
tp267
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p268
I1797
g149
S'return CAReduce.make_node(op, input)'
p269
tp270
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p271
I1299
g149
S'broadcastable=broadcastable)()'
p272
tp273
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p274
tp275
asbsg59
g0
(g60
g2
Ntp276
Rp277
(dp278
g64
(tsg65
g236
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p279
(dp280
g138
(lp281
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p282
tp283
a(g187
I52
g188
S'self.L2_sqr += (self.WT ** 2).sum()'
p284
tp285
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p286
I213
S'__radd__'
p287
S'return theano.tensor.basic.add(other, self)'
p288
tp289
a(g144
I401
g145
S'self.add_tag_trace(node)'
p290
tp291
asbsg154
(lp292
g27
asg156
g0
(g196
g2
Ntp293
Rp294
(dp295
g200
g201
sg202
g259
sg38
S'Elemwise{add,no_inplace}'
p296
sg172
g173
sg211
(dp297
sg213
(g261
I2
I1
tp298
sg216
(dp299
sg218
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p300
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p301
(dp302
g138
(lp303
(g286
I213
g287
S'return theano.tensor.basic.add(other, self)'
p304
tp305
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p306
tp307
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p308
tp309
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p310
tp311
asbsg59
g0
(g60
g2
Ntp312
Rp313
(dp314
g64
(tsg65
S'float64'
p315
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp316
Rp317
(dp318
g12
g0
(g13
g2
Ntp319
Rp320
(dp321
g17
(lp322
g0
(g8
g2
Ntp323
Rp324
(dp325
g12
g0
(g13
g2
Ntp326
Rp327
(dp328
g17
(lp329
g0
(g83
g2
Ntp330
Rp331
(dp332
g37
Nsg87
g0
(g88
g2
Ntp333
Rp334
(dp335
g38
Nsg92
(lp336
g41
(g42
(I0
tp337
g44
tp338
Rp339
(I1
(I15
tp340
g100
I00
S'\xe4S3\x91\xa4\xbd|?[\xe9\xb2w\xb3\x1ev\xbfQ&\xda\x99K\xed`?!x\x9ft3O{\xbf\xf6\xb5\xc9}S;{\xbf\xadb\xa6|Q;q?\x08\xc3iA\xcc,n\xbf\x89\x80\x80\x1e\xca\xc4h\xbf\xfe\x97l\xc4j\xf2]?\x82Ho\xb3m\x8bz?\x1f\x0e;\x91;S]?.\xeb\xf0^\x80DO?3R\xabk\x01\x8b^\xbf\xff\xe0\xa0\xb2\xee\xac`?\x7f\xd3\xcf\x08;\xb6L?'
p341
tp342
basg105
I00
sg106
I00
sg59
g0
(g60
g2
Ntp343
Rp344
(dp345
g64
(I00
tp346
sg65
S'float64'
p347
sg67
g100
sg68
I00
sg38
Nsbsg112
Nsbsg38
Nsg55
(itheano.gof.utils
scratchpad
p348
(dp349
bsg12
Nsg59
g344
sbag0
(g8
g2
Ntp350
Rp351
(dp352
g12
g0
(g13
g2
Ntp353
Rp354
(dp355
g17
(lp356
g123
asg55
(itheano.gof.utils
scratchpad
p357
(dp358
g138
(lp359
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p360
tp361
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p362
tp363
a(g148
I533
g149
S'inplace=False)(input))'
p364
tp365
a(g144
I401
g145
S'self.add_tag_trace(node)'
p366
tp367
asbsg154
(lp368
g351
asg156
g0
(g157
g2
Ntp369
Rp370
(dp371
g161
(lp372
sg163
(lp373
sg165
(lp374
I0
asg167
(tsg168
I00
sg169
(g170
tp375
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p376
(dp377
bsg59
g0
(g60
g2
Ntp378
Rp379
(dp380
g64
(I01
tp381
sg65
g135
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p382
(dp383
g138
(lp384
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p385
tp386
a(g187
I53
g188
S'self.L2_sqr += (self.state_definition**2).sum()'
p387
tp388
a(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p389
tp390
a(g144
I401
g145
S'self.add_tag_trace(node)'
p391
tp392
asbsg154
(lp393
g324
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p394
(dp395
g138
(lp396
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p397
tp398
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p399
tp400
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p401
tp402
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p403
tp404
asbsg59
g0
(g60
g2
Ntp405
Rp406
(dp407
g64
(I00
tp408
sg65
S'float64'
p409
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p410
(dp411
g138
(lp412
(g187
I53
g188
S'self.L2_sqr += (self.state_definition**2).sum()'
p413
tp414
a(g242
I452
g243
S'acc_dtype=acc_dtype)'
p415
tp416
a(g246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p417
tp418
a(g144
I401
g145
S'self.add_tag_trace(node)'
p419
tp420
asbsg154
(lp421
g317
asg156
g0
(g252
g2
Ntp422
Rp423
(dp424
g256
g409
sg65
g409
sg172
g173
sg202
g259
sg262
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p425
(dp426
g138
(lp427
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p428
tp429
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p430
tp431
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p432
tp433
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p434
tp435
asbsg59
g0
(g60
g2
Ntp436
Rp437
(dp438
g64
(tsg65
g409
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p439
(dp440
g138
(lp441
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p442
tp443
a(g187
I53
g188
S'self.L2_sqr += (self.state_definition**2).sum()'
p444
tp445
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p446
I117
S'__add__'
p447
S'return theano.tensor.basic.add(self, other)'
p448
tp449
a(g144
I401
g145
S'self.add_tag_trace(node)'
p450
tp451
asbsg154
(lp452
g20
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p453
(dp454
g138
(lp455
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p456
tp457
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p458
tp459
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p460
tp461
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p462
tp463
asbsg59
g0
(g60
g2
Ntp464
Rp465
(dp466
g64
(tsg65
S'float64'
p467
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g33
g2
Ntp468
Rp469
(dp470
g37
Nsg38
Nsg39
I01
sg40
g41
(g42
(I0
tp471
g44
tp472
Rp473
(I1
(tg50
I00
S'\x01'
p474
tp475
bsg55
(itheano.gof.utils
scratchpad
p476
(dp477
g58
Nsbsg59
g0
(g60
g2
Ntp478
Rp479
(dp480
g64
(tsg65
S'int8'
p481
sg67
g50
sg68
I00
sg38
Nsbsbasg55
(itheano.gof.utils
scratchpad
p482
(dp483
g138
(lp484
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p485
tp486
a(g187
I56
g188
S'self.L2_sqr *= regularization'
p487
tp488
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p489
I144
S'__mul__'
p490
S'return theano.tensor.mul(self, other)'
p491
tp492
a(g144
I401
g145
S'self.add_tag_trace(node)'
p493
tp494
asbsg154
(lp495
g10
asg156
g0
(g196
g2
Ntp496
Rp497
(dp498
g200
g201
sg202
g0
(ctheano.scalar.basic
Mul
p499
g2
Ntp500
Rp501
(dp502
g207
g208
sg172
g173
sg38
S'mul'
p503
sbsg38
S'Elemwise{mul,no_inplace}'
p504
sg172
g173
sg211
(dp505
sg213
(S'multiply'
p506
I2
I1
tp507
sg216
(dp508
sg218
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p509
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p510
(dp511
g138
(lp512
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p513
tp514
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p515
tp516
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p517
tp518
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p519
tp520
asbsg59
g0
(g60
g2
Ntp521
Rp522
(dp523
g64
(tsg65
S'float64'
p524
sg67
g100
sg68
I00
sg38
Nsbsg38
NsbsS'predict'
p525
ctheano.compile.function_module
_constructor_Function
p526
(ctheano.compile.function_module
_constructor_FunctionMaker
p527
((dp528
S'profile'
p529
NsS'function_builder'
p530
ctheano.compile.function_module
Function
p531
sS'accept_inplace'
p532
I00
sg17
(lp533
g0
(ctheano.compile.io
In
p534
g2
Ntp535
Rp536
(dp537
g38
NsS'update'
p538
NsS'value'
p539
NsS'borrow'
p540
Nsg105
I00
sS'implicit'
p541
I00
sS'mutable'
p542
I00
sS'variable'
p543
g0
(g8
g2
Ntp544
Rp545
(dp546
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p547
(dp548
g138
(lp549
(g187
I75
g188
S'self.functions()'
p550
tp551
a(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p552
I154
S'functions'
p553
S'X = T.matrix()'
p554
tp555
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p556
I771
S'matrix'
p557
S'return type(name)'
p558
tp559
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p560
tp561
asbsg59
g0
(g60
g2
Ntp562
Rp563
(dp564
g64
(I00
I00
tp565
sg65
S'float64'
p566
sg67
g100
sg68
I00
sg38
Nsbsg38
NsbsS'shared'
p567
I00
sg112
Nsbag0
(g534
g2
Ntp568
Rp569
(dp570
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g0
(g8
g2
Ntp571
Rp572
(dp573
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p574
(dp575
g138
(lp576
(g187
I75
g188
S'self.functions()'
p577
tp578
a(g552
I156
g553
S'y = T.scalar()'
p579
tp580
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p581
I714
S'scalar'
p582
S'return type(name)'
p583
tp584
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p585
tp586
asbsg59
g0
(g60
g2
Ntp587
Rp588
(dp589
g64
(tsg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg567
I00
sg112
Nsbag0
(g534
g2
Ntp590
Rp591
(dp592
g38
Nsg538
Nsg539
g90
sg540
I01
sg105
I00
sg541
I01
sg542
I00
sg543
g85
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp593
Rp594
(dp595
g38
Nsg538
Nsg539
g334
sg540
I01
sg105
I00
sg541
I01
sg542
I00
sg543
g331
sg567
I01
sg112
Nsbasg154
(lp596
g0
(ctheano.compile.io
SymbolicOutput
p597
g2
Ntp598
Rp599
(dp600
g543
g0
(g8
g2
Ntp601
Rp602
(dp603
g12
g0
(g13
g2
Ntp604
Rp605
(dp606
g17
(lp607
g0
(g8
g2
Ntp608
Rp609
(dp610
g12
g0
(g13
g2
Ntp611
Rp612
(dp613
g17
(lp614
g0
(g8
g2
Ntp615
Rp616
(dp617
g12
g0
(g13
g2
Ntp618
Rp619
(dp620
g17
(lp621
g0
(g8
g2
Ntp622
Rp623
(dp624
g12
g0
(g13
g2
Ntp625
Rp626
(dp627
g17
(lp628
g0
(g8
g2
Ntp629
Rp630
(dp631
g12
g0
(g13
g2
Ntp632
Rp633
(dp634
g17
(lp635
g0
(g8
g2
Ntp636
Rp637
(dp638
g12
g0
(g13
g2
Ntp639
Rp640
(dp641
g17
(lp642
g0
(g8
g2
Ntp643
Rp644
(dp645
g12
g0
(g13
g2
Ntp646
Rp647
(dp648
g17
(lp649
g0
(g8
g2
Ntp650
Rp651
(dp652
g12
g0
(g13
g2
Ntp653
Rp654
(dp655
g17
(lp656
g0
(g8
g2
Ntp657
Rp658
(dp659
g12
g0
(g13
g2
Ntp660
Rp661
(dp662
g17
(lp663
g0
(g8
g2
Ntp664
Rp665
(dp666
g12
g0
(g13
g2
Ntp667
Rp668
(dp669
g17
(lp670
g0
(g8
g2
Ntp671
Rp672
(dp673
g12
g0
(g13
g2
Ntp674
Rp675
(dp676
g17
(lp677
g545
ag0
(g8
g2
Ntp678
Rp679
(dp680
g12
g0
(g13
g2
Ntp681
Rp682
(dp683
g17
(lp684
g0
(g8
g2
Ntp685
Rp686
(dp687
g12
g0
(g13
g2
Ntp688
Rp689
(dp690
g17
(lp691
g469
ag0
(g8
g2
Ntp692
Rp693
(dp694
g12
g0
(g13
g2
Ntp695
Rp696
(dp697
g17
(lp698
g0
(g8
g2
Ntp699
Rp700
(dp701
g12
g0
(g13
g2
Ntp702
Rp703
(dp704
g17
(lp705
g545
asg55
(itheano.gof.utils
scratchpad
p706
(dp707
g138
(lp708
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p709
tp710
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p711
I4853
S'tensordot'
p712
S'a_shape_0 *= a.shape[s0]'
p713
tp714
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p715
I255
S'<lambda>'
p716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p717
tp718
a(g144
I401
g145
S'self.add_tag_trace(node)'
p719
tp720
asbsg154
(lp721
g700
asg156
g0
(ctheano.tensor.basic
Shape
p722
g2
Ntp723
Rp724
(dp725
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p726
(dp727
g138
(lp728
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p729
tp730
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p731
tp732
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p734
tp735
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p736
tp737
asbsg59
g0
(g60
g2
Ntp738
Rp739
(dp740
g64
(I00
tp741
sg65
S'int64'
p742
sg67
g47
(S'i8'
p743
I0
I1
tp744
Rp745
(I3
S'<'
p746
NNNI-1
I-1
I0
tp747
bsg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p748
(dp749
g138
(lp750
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p751
tp752
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p753
tp754
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p755
I407
S'__getitem__'
p756
S'lambda entry: isinstance(entry, Variable)))'
p757
tp758
a(g144
I401
g145
S'self.add_tag_trace(node)'
p759
tp760
asbsg154
(lp761
g693
asg156
g0
(ctheano.tensor.subtensor
Subtensor
p762
g2
Ntp763
Rp764
(dp765
S'idx_list'
p766
(cnumpy.core.multiarray
scalar
p767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p768
tp769
Rp770
tp771
sS'perform_cache_cdata'
p772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p773
(dp774
bsg59
g0
(g60
g2
Ntp775
Rp776
(dp777
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p778
(dp779
g138
(lp780
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p781
tp782
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p783
tp784
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p785
I219
S'__rmul__'
p786
S'return theano.tensor.basic.mul(other, self)'
p787
tp788
a(g144
I401
g145
S'self.add_tag_trace(node)'
p789
tp790
asbsg154
(lp791
g686
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p792
(dp793
g138
(lp794
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p795
tp796
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p797
tp798
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p799
tp800
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p801
tp802
asbsg59
g0
(g60
g2
Ntp803
Rp804
(dp805
g64
(tsg65
S'int64'
p806
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp807
Rp808
(dp809
g12
g0
(g13
g2
Ntp810
Rp811
(dp812
g17
(lp813
g469
ag0
(g8
g2
Ntp814
Rp815
(dp816
g12
g0
(g13
g2
Ntp817
Rp818
(dp819
g17
(lp820
g0
(g8
g2
Ntp821
Rp822
(dp823
g12
g0
(g13
g2
Ntp824
Rp825
(dp826
g17
(lp827
g545
asg55
(itheano.gof.utils
scratchpad
p828
(dp829
g138
(lp830
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p831
tp832
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p833
tp834
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p835
tp836
a(g144
I401
g145
S'self.add_tag_trace(node)'
p837
tp838
asbsg154
(lp839
g822
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p840
(dp841
g138
(lp842
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p843
tp844
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p845
tp846
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p847
tp848
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p849
tp850
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p851
(dp852
g138
(lp853
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p854
tp855
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p856
tp857
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p858
tp859
a(g144
I401
g145
S'self.add_tag_trace(node)'
p860
tp861
asbsg154
(lp862
g815
asg156
g0
(g762
g2
Ntp863
Rp864
(dp865
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p866
tp867
Rp868
tp869
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p870
(dp871
bsg59
g0
(g60
g2
Ntp872
Rp873
(dp874
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p875
(dp876
g138
(lp877
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p878
tp879
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p880
tp881
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p882
tp883
a(g144
I401
g145
S'self.add_tag_trace(node)'
p884
tp885
asbsg154
(lp886
g808
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p887
(dp888
g138
(lp889
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p890
tp891
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p892
tp893
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p894
tp895
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p896
tp897
asbsg59
g0
(g60
g2
Ntp898
Rp899
(dp900
g64
(tsg65
S'int64'
p901
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p902
(dp903
g138
(lp904
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p905
I3790
g149
S'shp = as_tensor_variable(shp, ndim=1)'
p906
tp907
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p908
I174
S'as_tensor_variable'
p909
S'return stack(*x)'
p910
tp911
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p912
I3681
S'stack'
p913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p914
tp915
a(g144
I401
g145
S'self.add_tag_trace(node)'
p916
tp917
asbsg154
(lp918
g679
asg156
g0
(ctheano.tensor.opt
MakeVector
p919
g2
Ntp920
Rp921
(dp922
g65
S'int64'
p923
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p924
(dp925
g138
(lp926
(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p927
tp928
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p929
tp930
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/opt.py'
p931
I565
g149
S'return T.Apply(self, inputs, [otype()])'
p932
tp933
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p934
tp935
asbsg59
g0
(g60
g2
Ntp936
Rp937
(dp938
g64
(I00
tp939
sg65
g806
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p940
(dp941
g138
(lp942
(g711
I4861
g712
S'a_reshaped = a.reshape((a_shape_0, a_shape_1), ndim=2)'
p943
tp944
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p945
I297
S'reshape'
p946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p947
tp948
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p949
I3958
g946
S'rval = op(x, newshape)'
p950
tp951
a(g144
I401
g145
S'self.add_tag_trace(node)'
p952
tp953
asbsg154
(lp954
g672
asg156
g0
(ctheano.tensor.basic
Reshape
p955
g2
Ntp956
Rp957
(dp958
S'ndim'
p959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p960
(dp961
bsg59
g0
(g60
g2
Ntp962
Rp963
(dp964
g64
(I00
I00
tp965
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp966
Rp967
(dp968
g12
g0
(g13
g2
Ntp969
Rp970
(dp971
g17
(lp972
g85
ag0
(g8
g2
Ntp973
Rp974
(dp975
g12
g0
(g13
g2
Ntp976
Rp977
(dp978
g17
(lp979
g0
(g8
g2
Ntp980
Rp981
(dp982
g12
g0
(g13
g2
Ntp983
Rp984
(dp985
g17
(lp986
g469
ag0
(g8
g2
Ntp987
Rp988
(dp989
g12
g0
(g13
g2
Ntp990
Rp991
(dp992
g17
(lp993
g0
(g8
g2
Ntp994
Rp995
(dp996
g12
g0
(g13
g2
Ntp997
Rp998
(dp999
g17
(lp1000
g85
asg55
(itheano.gof.utils
scratchpad
p1001
(dp1002
g138
(lp1003
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1004
tp1005
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p1006
tp1007
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1008
tp1009
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1010
tp1011
asbsg154
(lp1012
g995
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1013
(dp1014
g138
(lp1015
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1016
tp1017
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1018
tp1019
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1020
tp1021
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1022
tp1023
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1024
(dp1025
g138
(lp1026
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1027
tp1028
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p1029
tp1030
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1031
tp1032
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1033
tp1034
asbsg154
(lp1035
g988
asg156
g0
(g762
g2
Ntp1036
Rp1037
(dp1038
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1039
tp1040
Rp1041
tp1042
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1043
(dp1044
bsg59
g0
(g60
g2
Ntp1045
Rp1046
(dp1047
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1048
(dp1049
g138
(lp1050
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1051
tp1052
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p1053
tp1054
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p1055
tp1056
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1057
tp1058
asbsg154
(lp1059
g981
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1060
(dp1061
g138
(lp1062
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p1063
tp1064
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1065
tp1066
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1067
tp1068
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1069
tp1070
asbsg59
g0
(g60
g2
Ntp1071
Rp1072
(dp1073
g64
(tsg65
S'int64'
p1074
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1075
Rp1076
(dp1077
g12
g0
(g13
g2
Ntp1078
Rp1079
(dp1080
g17
(lp1081
g0
(g8
g2
Ntp1082
Rp1083
(dp1084
g12
g0
(g13
g2
Ntp1085
Rp1086
(dp1087
g17
(lp1088
g469
ag0
(g8
g2
Ntp1089
Rp1090
(dp1091
g12
g0
(g13
g2
Ntp1092
Rp1093
(dp1094
g17
(lp1095
g0
(g8
g2
Ntp1096
Rp1097
(dp1098
g12
g0
(g13
g2
Ntp1099
Rp1100
(dp1101
g17
(lp1102
g85
asg55
(itheano.gof.utils
scratchpad
p1103
(dp1104
g138
(lp1105
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1106
tp1107
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1108
tp1109
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1110
tp1111
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1112
tp1113
asbsg154
(lp1114
g1097
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1115
(dp1116
g138
(lp1117
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1118
tp1119
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1120
tp1121
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1122
tp1123
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1124
tp1125
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1126
(dp1127
g138
(lp1128
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1129
tp1130
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1131
tp1132
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1133
tp1134
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1135
tp1136
asbsg154
(lp1137
g1090
asg156
g0
(g762
g2
Ntp1138
Rp1139
(dp1140
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1141
tp1142
Rp1143
tp1144
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1145
(dp1146
bsg59
g0
(g60
g2
Ntp1147
Rp1148
(dp1149
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1150
(dp1151
g138
(lp1152
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1153
tp1154
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1155
tp1156
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p1157
tp1158
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1159
tp1160
asbsg154
(lp1161
g1083
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1162
(dp1163
g138
(lp1164
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p1165
tp1166
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1167
tp1168
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1169
tp1170
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1171
tp1172
asbsg59
g0
(g60
g2
Ntp1173
Rp1174
(dp1175
g64
(tsg65
S'int64'
p1176
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1177
Rp1178
(dp1179
g12
g0
(g13
g2
Ntp1180
Rp1181
(dp1182
g17
(lp1183
g0
(g8
g2
Ntp1184
Rp1185
(dp1186
g12
g0
(g13
g2
Ntp1187
Rp1188
(dp1189
g17
(lp1190
g85
asg55
(itheano.gof.utils
scratchpad
p1191
(dp1192
g138
(lp1193
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1194
tp1195
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1196
tp1197
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1198
tp1199
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1200
tp1201
asbsg154
(lp1202
g1185
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1203
(dp1204
g138
(lp1205
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1206
tp1207
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1208
tp1209
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1210
tp1211
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1212
tp1213
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1214
(dp1215
g138
(lp1216
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1217
tp1218
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1219
tp1220
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1221
tp1222
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1223
tp1224
asbsg154
(lp1225
g1178
asg156
g0
(g762
g2
Ntp1226
Rp1227
(dp1228
g766
(g767
(g745
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p1229
tp1230
Rp1231
tp1232
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1233
(dp1234
bsg59
g0
(g60
g2
Ntp1235
Rp1236
(dp1237
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1238
(dp1239
g138
(lp1240
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1241
tp1242
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p1243
tp1244
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p1245
tp1246
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1247
tp1248
asbsg154
(lp1249
g1076
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1250
(dp1251
g138
(lp1252
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p1253
tp1254
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1255
tp1256
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1257
tp1258
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1259
tp1260
asbsg59
g0
(g60
g2
Ntp1261
Rp1262
(dp1263
g64
(tsg65
S'int64'
p1264
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1265
(dp1266
g138
(lp1267
(g905
I3790
g149
S'shp = as_tensor_variable(shp, ndim=1)'
p1268
tp1269
a(g908
I174
g909
S'return stack(*x)'
p1270
tp1271
a(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p1272
tp1273
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1274
tp1275
asbsg154
(lp1276
g974
asg156
g0
(g919
g2
Ntp1277
Rp1278
(dp1279
g65
S'int64'
p1280
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1281
(dp1282
g138
(lp1283
(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p1284
tp1285
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1286
tp1287
a(g931
I565
g149
S'return T.Apply(self, inputs, [otype()])'
p1288
tp1289
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1290
tp1291
asbsg59
g0
(g60
g2
Ntp1292
Rp1293
(dp1294
g64
(I00
tp1295
sg65
g1074
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1296
(dp1297
g138
(lp1298
(g711
I4862
g712
S'b_reshaped = b.reshape((b_shape_0, b_shape_1), ndim=2)'
p1299
tp1300
a(g945
I297
g946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p1301
tp1302
a(g949
I3958
g946
S'rval = op(x, newshape)'
p1303
tp1304
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1305
tp1306
asbsg154
(lp1307
g967
asg156
g0
(g955
g2
Ntp1308
Rp1309
(dp1310
g959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1311
(dp1312
bsg59
g0
(g60
g2
Ntp1313
Rp1314
(dp1315
g64
(I00
I00
tp1316
sg65
g111
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1317
(dp1318
g138
(lp1319
(g187
I75
g188
S'self.functions()'
p1320
tp1321
a(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1322
tp1323
a(g711
I4864
g712
S'return _dot(a_reshaped, b_reshaped).reshape(outshape, outndim)'
p1324
tp1325
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1326
tp1327
asbsg154
(lp1328
g665
asg156
g0
(ctheano.tensor.basic
Dot
p1329
g2
Ntp1330
Rp1331
(dp1332
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1333
(dp1334
bsg59
g0
(g60
g2
Ntp1335
Rp1336
(dp1337
g64
(I00
I00
tp1338
sg65
S'float64'
p1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1340
Rp1341
(dp1342
g12
g0
(g13
g2
Ntp1343
Rp1344
(dp1345
g17
(lp1346
g35
ag0
(g8
g2
Ntp1347
Rp1348
(dp1349
g12
g0
(g13
g2
Ntp1350
Rp1351
(dp1352
g17
(lp1353
g0
(g8
g2
Ntp1354
Rp1355
(dp1356
g12
g0
(g13
g2
Ntp1357
Rp1358
(dp1359
g17
(lp1360
g545
asg55
(itheano.gof.utils
scratchpad
p1361
(dp1362
g138
(lp1363
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1364
tp1365
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p1366
tp1367
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1368
tp1369
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1370
tp1371
asbsg154
(lp1372
g1355
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1373
(dp1374
g138
(lp1375
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1376
tp1377
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1378
tp1379
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1380
tp1381
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1382
tp1383
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1384
(dp1385
g138
(lp1386
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1387
tp1388
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p1389
tp1390
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1391
tp1392
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1393
tp1394
asbsg154
(lp1395
g1348
asg156
g0
(g762
g2
Ntp1396
Rp1397
(dp1398
g766
(c__builtin__
slice
p1399
(Ng767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1400
tp1401
Rp1402
Ntp1403
Rp1404
tp1405
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1406
(dp1407
bsg59
g0
(g60
g2
Ntp1408
Rp1409
(dp1410
g64
(I00
tp1411
sg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1412
Rp1413
(dp1414
g12
g0
(g13
g2
Ntp1415
Rp1416
(dp1417
g17
(lp1418
g0
(g8
g2
Ntp1419
Rp1420
(dp1421
g12
g0
(g13
g2
Ntp1422
Rp1423
(dp1424
g17
(lp1425
g85
asg55
(itheano.gof.utils
scratchpad
p1426
(dp1427
g138
(lp1428
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1429
tp1430
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p1431
tp1432
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1433
tp1434
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1435
tp1436
asbsg154
(lp1437
g1420
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1438
(dp1439
g138
(lp1440
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1441
tp1442
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1443
tp1444
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1445
tp1446
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1447
tp1448
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1449
(dp1450
g138
(lp1451
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1452
tp1453
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p1454
tp1455
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1456
tp1457
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1458
tp1459
asbsg154
(lp1460
g1413
asg156
g0
(g762
g2
Ntp1461
Rp1462
(dp1463
g766
(g1399
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1464
tp1465
Rp1466
NNtp1467
Rp1468
tp1469
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1470
(dp1471
bsg59
g0
(g60
g2
Ntp1472
Rp1473
(dp1474
g64
(I00
tp1475
sg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1476
(dp1477
g138
(lp1478
(g552
I163
g553
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p1479
tp1480
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p1481
tp1482
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1483
I3705
S'concatenate'
p1484
S'return join(axis, *tensor_list)'
p1485
tp1486
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1487
tp1488
asbsg154
(lp1489
g1341
asg156
g0
(ctheano.tensor.basic
Join
p1490
g2
Ntp1491
Rp1492
(dp1493
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1494
(dp1495
bsg59
g0
(g60
g2
Ntp1496
Rp1497
(dp1498
g64
(I00
tp1499
sg65
S'int64'
p1500
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1501
(dp1502
g138
(lp1503
(g711
I4864
g712
S'return _dot(a_reshaped, b_reshaped).reshape(outshape, outndim)'
p1504
tp1505
a(g945
I297
g946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p1506
tp1507
a(g949
I3958
g946
S'rval = op(x, newshape)'
p1508
tp1509
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1510
tp1511
asbsg154
(lp1512
g658
asg156
g0
(g955
g2
Ntp1513
Rp1514
(dp1515
g959
I3
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1516
(dp1517
bsg59
g0
(g60
g2
Ntp1518
Rp1519
(dp1520
g64
(I00
I00
I00
tp1521
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1522
(dp1523
g138
(lp1524
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1525
tp1526
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan.py'
p1527
I505
S'scan'
p1528
S"nw_seq = seq['input'][offset + k - mintap:]"
p1529
tp1530
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1531
tp1532
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1533
tp1534
asbsg154
(lp1535
g651
asg156
g0
(g762
g2
Ntp1536
Rp1537
(dp1538
g766
(g1399
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1539
tp1540
Rp1541
NNtp1542
Rp1543
tp1544
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1545
(dp1546
bsg59
g0
(g60
g2
Ntp1547
Rp1548
(dp1549
g64
(I00
I00
I00
tp1550
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1551
(dp1552
g138
(lp1553
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1554
tp1555
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p1556
tp1557
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1558
tp1559
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1560
tp1561
asbsg154
(lp1562
g644
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1563
(dp1564
g138
(lp1565
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1566
tp1567
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1568
tp1569
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1570
tp1571
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1572
tp1573
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1574
(dp1575
g138
(lp1576
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1577
tp1578
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p1579
tp1580
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1581
tp1582
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1583
tp1584
asbsg154
(lp1585
g637
asg156
g0
(g762
g2
Ntp1586
Rp1587
(dp1588
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1589
tp1590
Rp1591
tp1592
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1593
(dp1594
bsg59
g0
(g60
g2
Ntp1595
Rp1596
(dp1597
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1598
Rp1599
(dp1600
g12
g0
(g13
g2
Ntp1601
Rp1602
(dp1603
g17
(lp1604
g651
ag0
(ctheano.scalar.basic
ScalarVariable
p1605
g2
Ntp1606
Rp1607
(dp1608
g12
g0
(g13
g2
Ntp1609
Rp1610
(dp1611
g17
(lp1612
g637
asg55
(itheano.gof.utils
scratchpad
p1613
(dp1614
g138
(lp1615
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p1616
I384
g149
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p1617
tp1618
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p1619
I384
S'<genexpr>'
p1620
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p1621
tp1622
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p1623
I374
S'my_as_scalar'
p1624
S'return theano.tensor.scalar_from_tensor(a)'
p1625
tp1626
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1627
tp1628
asbsg154
(lp1629
g1607
asg156
g0
(ctheano.tensor.basic
ScalarFromTensor
p1630
g2
Ntp1631
Rp1632
(dp1633
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1634
(dp1635
bsg59
g0
(ctheano.scalar.basic
Scalar
p1636
g2
Ntp1637
Rp1638
(dp1639
g65
g742
sbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1640
(dp1641
g138
(lp1642
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1643
tp1644
a(g1527
I546
g1528
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p1645
tp1646
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1647
tp1648
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1649
tp1650
asbsg154
(lp1651
g1599
asg156
g0
(g762
g2
Ntp1652
Rp1653
(dp1654
g766
(g1399
(Ng0
(g1636
g2
Ntp1655
Rp1656
(dp1657
g65
g742
sbNtp1658
Rp1659
tp1660
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1661
(dp1662
bsg59
g0
(g60
g2
Ntp1663
Rp1664
(dp1665
g64
(I00
I00
I00
tp1666
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1667
Rp1668
(dp1669
g12
g0
(g13
g2
Ntp1670
Rp1671
(dp1672
g17
(lp1673
g0
(g8
g2
Ntp1674
Rp1675
(dp1676
g12
g0
(g13
g2
Ntp1677
Rp1678
(dp1679
g17
(lp1680
g0
(g33
g2
Ntp1681
Rp1682
(dp1683
g37
Nsg38
Nsg39
I01
sg40
g41
(g42
(I0
tp1684
g44
tp1685
Rp1686
(I1
(tg100
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1687
tp1688
bsg55
(itheano.gof.utils
scratchpad
p1689
(dp1690
g58
Nsbsg59
g0
(g60
g2
Ntp1691
Rp1692
(dp1693
g64
(tsg65
S'float64'
p1694
sg67
g100
sg68
I00
sg38
Nsbsbag0
(g8
g2
Ntp1695
Rp1696
(dp1697
g12
g0
(g13
g2
Ntp1698
Rp1699
(dp1700
g17
(lp1701
g637
ag0
(g8
g2
Ntp1702
Rp1703
(dp1704
g12
g0
(g13
g2
Ntp1705
Rp1706
(dp1707
g17
(lp1708
g0
(g8
g2
Ntp1709
Rp1710
(dp1711
g12
g0
(g13
g2
Ntp1712
Rp1713
(dp1714
g17
(lp1715
g0
(g8
g2
Ntp1716
Rp1717
(dp1718
g12
g0
(g13
g2
Ntp1719
Rp1720
(dp1721
g17
(lp1722
g0
(g8
g2
Ntp1723
Rp1724
(dp1725
g12
g0
(g13
g2
Ntp1726
Rp1727
(dp1728
g17
(lp1729
g0
(g33
g2
Ntp1730
Rp1731
(dp1732
g37
Nsg55
(itheano.gof.utils
scratchpad
p1733
(dp1734
g58
Nsbsg59
g0
(g60
g2
Ntp1735
Rp1736
(dp1737
g64
(I00
tp1738
sg65
S'float64'
p1739
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp1740
g44
tp1741
Rp1742
(I1
(I15
tp1743
g100
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
p1744
tp1745
bsbasg55
(itheano.gof.utils
scratchpad
p1746
(dp1747
g138
(lp1748
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1749
tp1750
a(g1527
I619
g1528
S'tensor.shape_padleft(actual_arg), 0),'
p1751
tp1752
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1753
I3636
S'shape_padleft'
p1754
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p1755
tp1756
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1757
tp1758
asbsg154
(lp1759
g1724
asg156
g0
(g157
g2
Ntp1760
Rp1761
(dp1762
g161
(lp1763
sg163
(lp1764
I0
asg165
(lp1765
I0
asg167
g1738
sg168
I00
sg169
(g170
I0
tp1766
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1767
(dp1768
bsg59
g0
(g60
g2
Ntp1769
Rp1770
(dp1771
g64
(I01
I00
tp1772
sg65
g1739
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1773
(dp1774
g138
(lp1775
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p1776
tp1777
a(g1527
I619
g1528
S'tensor.shape_padleft(actual_arg), 0),'
p1778
tp1779
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1780
I3339
S'unbroadcast'
p1781
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p1782
tp1783
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1784
tp1785
asbsg154
(lp1786
g1717
asg156
g0
(ctheano.tensor.basic
Rebroadcast
p1787
g2
Ntp1788
Rp1789
(dp1790
g172
g173
sg262
(dp1791
I0
I00
ssbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1792
(dp1793
g138
(lp1794
(g1780
I3339
g1781
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p1795
tp1796
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1797
tp1798
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1799
I3284
g149
S'return Apply(self, [x], [t()])'
p1800
tp1801
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1802
tp1803
asbsg59
g0
(g60
g2
Ntp1804
Rp1805
(dp1806
g64
(I00
I00
tp1807
sg65
g1739
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1808
(dp1809
g138
(lp1810
(g1527
I620
g1528
S'actual_n_steps'
p1811
tp1812
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan_utils.py'
p1813
I363
S'expand'
p1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p1815
tp1816
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1817
tp1818
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1819
tp1820
asbsg154
(lp1821
g1710
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1822
(dp1823
g138
(lp1824
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1825
tp1826
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1827
tp1828
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1829
tp1830
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1831
tp1832
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1833
(dp1834
g138
(lp1835
(g1527
I620
g1528
S'actual_n_steps'
p1836
tp1837
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p1838
tp1839
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1840
tp1841
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1842
tp1843
asbsg154
(lp1844
g1703
asg156
g0
(g762
g2
Ntp1845
Rp1846
(dp1847
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1848
tp1849
Rp1850
tp1851
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1852
(dp1853
bsg59
g0
(g60
g2
Ntp1854
Rp1855
(dp1856
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1857
(dp1858
g138
(lp1859
(g1527
I620
g1528
S'actual_n_steps'
p1860
tp1861
a(g1813
I364
g1814
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p1862
tp1863
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p1864
tp1865
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1866
tp1867
asbsg154
(lp1868
g1696
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1869
(dp1870
g138
(lp1871
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p1872
tp1873
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1874
tp1875
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1876
tp1877
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1878
tp1879
asbsg59
g0
(g60
g2
Ntp1880
Rp1881
(dp1882
g64
(tsg65
S'int64'
p1883
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp1884
Rp1885
(dp1886
g12
g0
(g13
g2
Ntp1887
Rp1888
(dp1889
g17
(lp1890
g0
(g8
g2
Ntp1891
Rp1892
(dp1893
g12
g0
(g13
g2
Ntp1894
Rp1895
(dp1896
g17
(lp1897
g1717
asg55
(itheano.gof.utils
scratchpad
p1898
(dp1899
g138
(lp1900
(g1527
I620
g1528
S'actual_n_steps'
p1901
tp1902
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p1903
tp1904
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1905
tp1906
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1907
tp1908
asbsg154
(lp1909
g1892
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1910
(dp1911
g138
(lp1912
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1913
tp1914
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1915
tp1916
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p1917
tp1918
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1919
tp1920
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1921
(dp1922
g138
(lp1923
(g1527
I620
g1528
S'actual_n_steps'
p1924
tp1925
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p1926
tp1927
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p1928
tp1929
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1930
tp1931
asbsg154
(lp1932
g1885
asg156
g0
(g762
g2
Ntp1933
Rp1934
(dp1935
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1936
tp1937
Rp1938
tp1939
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1940
(dp1941
bsg59
g0
(g60
g2
Ntp1942
Rp1943
(dp1944
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p1945
(dp1946
g138
(lp1947
(g1813
I366
g1814
S'dtype=tensor_var.dtype)'
p1948
tp1949
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1950
I2090
S'zeros'
p1951
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p1952
tp1953
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1954
I2608
g145
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p1955
tp1956
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1957
tp1958
asbsg154
(lp1959
g1675
asg156
g0
(ctheano.tensor.basic
Alloc
p1960
g2
Ntp1961
Rp1962
(dp1963
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1964
(dp1965
g138
(lp1966
(g1954
I2608
g145
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p1967
tp1968
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p1969
tp1970
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p1971
I2494
g149
S'return gof.Apply(self, ([v] + sh), [otype()])'
p1972
tp1973
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p1974
tp1975
asbsg59
g0
(g60
g2
Ntp1976
Rp1977
(dp1978
g64
(I00
I00
tp1979
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag1717
ag0
(g1605
g2
Ntp1980
Rp1981
(dp1982
g12
g0
(g13
g2
Ntp1983
Rp1984
(dp1985
g17
(lp1986
g1703
asg55
(itheano.gof.utils
scratchpad
p1987
(dp1988
g138
(lp1989
(g1616
I384
g149
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p1990
tp1991
a(g1619
I384
g1620
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p1992
tp1993
a(g1623
I374
g1624
S'return theano.tensor.scalar_from_tensor(a)'
p1994
tp1995
a(g144
I401
g145
S'self.add_tag_trace(node)'
p1996
tp1997
asbsg154
(lp1998
g1981
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p1999
(dp2000
bsg59
g0
(g1636
g2
Ntp2001
Rp2002
(dp2003
g65
g742
sbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2004
(dp2005
g138
(lp2006
(g1813
I367
g1814
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p2007
tp2008
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p2009
I904
S'set_subtensor'
p2010
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p2011
tp2012
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p2013
I957
S'inc_subtensor'
p2014
S'return the_op(real_x, y, *real_idxargs)'
p2015
tp2016
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2017
tp2018
asbsg154
(lp2019
g1668
asg156
g0
(ctheano.tensor.subtensor
IncSubtensor
p2020
g2
Ntp2021
Rp2022
(dp2023
g766
(lp2024
g1399
(Ng0
(g1636
g2
Ntp2025
Rp2026
(dp2027
g65
g742
sbNtp2028
Rp2029
asS'destroyhandler_tolerate_aliased'
p2030
(lp2031
sg172
g173
sS'set_instead_of_inc'
p2032
I01
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2033
(dp2034
g138
(lp2035
(g2013
I957
g2014
S'return the_op(real_x, y, *real_idxargs)'
p2036
tp2037
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2038
tp2039
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p2040
I1109
g149
S'[x.type()])'
p2041
tp2042
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2043
tp2044
asbsg59
g1977
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2045
(dp2046
g138
(lp2047
(g187
I75
g188
S'self.functions()'
p2048
tp2049
a(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p2050
tp2051
a(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p2052
tp2053
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2054
tp2055
asbsg154
(lp2056
g630
asg156
g0
(ctheano.scan_module.scan_op
Scan
p2057
g2
Ntp2058
Rp2059
(dp2060
g529
I00
sg17
(lp2061
g0
(g8
g2
Ntp2062
Rp2063
(dp2064
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p2065
(dp2066
g138
(lp2067
(g187
I75
g188
S'self.functions()'
p2068
tp2069
a(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p2070
tp2071
a(g1527
I465
g1528
S'nw_slice = _seq_val_slice.type()'
p2072
tp2073
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2074
tp2075
asbsg59
g0
(g60
g2
Ntp2076
Rp2077
(dp2078
g64
(I00
I00
tp2079
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp2080
Rp2081
(dp2082
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p2083
(dp2084
g138
(lp2085
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p2086
tp2087
a(g1527
I592
g1528
S"arg = safe_new(init_out['initial'])"
p2088
tp2089
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan_utils.py'
p2090
I75
S'safe_new'
p2091
S'nw_x = x.type()'
p2092
tp2093
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2094
tp2095
asbsg59
g0
(g60
g2
Ntp2096
Rp2097
(dp2098
g64
(I00
tp2099
sg65
S'float64'
p2100
sg67
g100
sg68
I00
sg38
Nsbsg38
NsbasS'tap_array'
p2101
(lp2102
(lp2103
I-1
aasS'n_mit_mot'
p2104
I0
sS'_hash_inner_graph'
p2105
I-6970693807409396088
sg154
(lp2106
g0
(g8
g2
Ntp2107
Rp2108
(dp2109
g12
g0
(g13
g2
Ntp2110
Rp2111
(dp2112
g17
(lp2113
g2081
ag0
(g8
g2
Ntp2114
Rp2115
(dp2116
g12
g0
(g13
g2
Ntp2117
Rp2118
(dp2119
g17
(lp2120
g2063
asg55
(itheano.gof.utils
scratchpad
p2121
(dp2122
g138
(lp2123
(g552
I178
g553
S'S, _ = theano.scan(recurrence, sequences=transition_tensor, outputs_info=state0)'
p2124
tp2125
a(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p2126
tp2127
a(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p2128
I175
S'recurrence'
p2129
S's_t = theano.dot(s_tm1,T.nnet.softmax(T_t)) # TODO: prob dist'
p2130
tp2131
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2132
tp2133
asbsg154
(lp2134
g2115
asg156
g0
(ctheano.tensor.nnet.nnet
Softmax
p2135
g2
Ntp2136
Rp2137
(dp2138
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2139
(dp2140
g138
(lp2141
(g2128
I175
g2129
S's_t = theano.dot(s_tm1,T.nnet.softmax(T_t)) # TODO: prob dist'
p2142
tp2143
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2144
tp2145
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/nnet/nnet.py'
p2146
I359
g149
S'return Apply(self, [x], [x.type()])'
p2147
tp2148
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2149
tp2150
asbsg59
g2077
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2151
(dp2152
g138
(lp2153
(S'/usr/local/lib/python2.7/site-packages/theano/__init__.py'
p2154
I142
S'dot'
p2155
S'rval = l.__dot__(r)'
p2156
tp2157
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p2158
I441
S'__dot__'
p2159
S'return theano.tensor.basic.dot(left, right)'
p2160
tp2161
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p2162
I4732
g2155
S'return _dot(a, b)'
p2163
tp2164
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2165
tp2166
asbsg154
(lp2167
g2108
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2168
(dp2169
bsg59
g0
(g60
g2
Ntp2170
Rp2171
(dp2172
g64
(I00
tp2173
sg65
S'float64'
p2174
sg67
g100
sg68
I00
sg38
Nsbsg38
NsbasS'seqs_arg_offset'
p2175
I2
sS'vector_seqs'
p2176
(lp2177
I00
asg211
ccollections
OrderedDict
p2178
((lp2179
tp2180
Rp2181
sS'n_nit_sot'
p2182
I0
sS'n_outs'
p2183
I1
sS'mintaps'
p2184
(lp2185
g767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2186
tp2187
Rp2188
asS'n_sit_sot'
p2189
I1
sS'nit_sot_arg_offset'
p2190
I3
sS'as_while'
p2191
I00
sS'truncate_gradient'
p2192
I-1
sS'n_seqs'
p2193
I1
sg38
S'scan_fn'
p2194
sS'mode_instance'
p2195
g0
(ctheano.compile.mode
Mode
p2196
g2
Ntp2197
Rp2198
(S'cvm'
p2199
g0
(ctheano.gof.optdb
Query
p2200
g2
Ntp2201
Rp2202
(dp2203
g38
S'OPT_FAST_RUN'
p2204
sS'require'
p2205
c__builtin__
set
p2206
((lp2207
tp2208
Rp2209
sS'subquery'
p2210
(dp2211
sS'position_cutoff'
p2212
NsS'exclude'
p2213
g2206
((lp2214
tp2215
Rp2216
sS'include'
p2217
g2206
((lp2218
S'fast_run'
p2219
atp2220
Rp2221
sbtp2222
bsS'info'
p2223
g2178
((lp2224
(lp2225
g2101
ag2102
aa(lp2226
g2193
aI1
aa(lp2227
g2104
aI0
aa(lp2228
S'n_mit_mot_outs'
p2229
aI0
aa(lp2230
S'mit_mot_out_slices'
p2231
a(lp2232
aa(lp2233
S'n_mit_sot'
p2234
aI0
aa(lp2235
g2189
aI1
aa(lp2236
S'n_shared_outs'
p2237
aI0
aa(lp2238
g2182
aI0
aa(lp2239
g2192
aI-1
aa(lp2240
g38
ag2194
aa(lp2241
S'mode'
p2242
aNaa(lp2243
g211
ag2181
aa(lp2244
S'gpu'
p2245
aI00
aa(lp2246
g2191
aI00
aa(lp2247
g529
aI00
aatp2248
Rp2249
sS'_cmodule_key'
p2250
((t(S'CLinker.cmodule_key'
p2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p2252
S'md5:f52f5718bd2358862745753c2c77eac4'
p2253
(g2137
((g2077
((I-1
I0
tp2254
I00
tp2255
tp2256
tp2257
(I1
(I00
tp2258
tp2259
tp2260
(g1331
((g2097
((I-1
I1
tp2261
I00
tp2262
tp2263
(g2077
((I0
I0
tp2264
I00
tp2265
tp2266
tp2267
(I1
(I00
tp2268
tp2269
tp2270
tp2271
tp2272
sg2234
I0
sS'vector_outs'
p2273
(lp2274
I00
asS'n_tap_outs'
p2275
I0
sg2237
I0
sg2242
NsS'output_types'
p2276
(lp2277
g0
(g60
g2
Ntp2278
Rp2279
(dp2280
g64
(I00
I00
tp2281
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbasg2245
I00
sg2229
I0
sS'shared_arg_offset'
p2282
I3
sg2231
g2232
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2283
(dp2284
g138
(lp2285
(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p2286
tp2287
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2288
tp2289
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan_op.py'
p2290
I440
g149
S'[t() for t in self.output_types])'
p2291
tp2292
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2293
tp2294
asbsg59
g2279
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2295
(dp2296
g138
(lp2297
(g1527
I1044
g1528
S'offsets)'
p2298
tp2299
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan.py'
p2300
I1029
S'remove_dimensions'
p2301
S'out_ls.append(out[offsets[idx]:])'
p2302
tp2303
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p2304
tp2305
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2306
tp2307
asbsg154
(lp2308
g623
asg156
g0
(g762
g2
Ntp2309
Rp2310
(dp2311
g766
(g1399
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2312
tp2313
Rp2314
NNtp2315
Rp2316
tp2317
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2318
(dp2319
bsg59
g0
(g60
g2
Ntp2320
Rp2321
(dp2322
g64
(I00
I00
tp2323
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2324
(dp2325
g138
(lp2326
(g187
I75
g188
S'self.functions()'
p2327
tp2328
a(g552
I179
g553
S'Sfinal = S[-1]'
p2329
tp2330
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p2331
tp2332
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2333
tp2334
asbsg154
(lp2335
g616
asg156
g0
(g762
g2
Ntp2336
Rp2337
(dp2338
g766
(g767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2339
tp2340
Rp2341
tp2342
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2343
(dp2344
bsg59
g0
(g60
g2
Ntp2345
Rp2346
(dp2347
g64
(I00
tp2348
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p2349
(dp2350
g138
(lp2351
(g2154
I142
g2155
S'rval = l.__dot__(r)'
p2352
tp2353
a(g2158
I441
g2159
S'return theano.tensor.basic.dot(left, right)'
p2354
tp2355
a(g2162
I4732
g2155
S'return _dot(a, b)'
p2356
tp2357
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2358
tp2359
asbsg154
(lp2360
g609
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2361
(dp2362
bsg59
g0
(g60
g2
Ntp2363
Rp2364
(dp2365
g64
(tsg65
S'float64'
p2366
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2367
(dp2368
g138
(lp2369
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p2370
tp2371
a(g187
I75
g188
S'self.functions()'
p2372
tp2373
a(g552
I181
g553
S'O = T.nnet.sigmoid(theano.dot(Sfinal, self.state_definition))'
p2374
tp2375
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2376
tp2377
asbsg154
(lp2378
g602
asg156
g0
(g196
g2
Ntp2379
Rp2380
(dp2381
g38
S'sigmoid'
p2382
sg202
g0
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p2383
g2
Ntp2384
Rp2385
(dp2386
g207
ctheano.scalar.basic
upgrade_to_float
p2387
sg172
g173
sg38
S'scalar_sigmoid'
p2388
sbsg211
(dp2389
sg213
Nsg216
(dp2390
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2391
(dp2392
g138
(lp2393
(g552
I181
g553
S'O = T.nnet.sigmoid(theano.dot(Sfinal, self.state_definition))'
p2394
tp2395
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2396
tp2397
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2398
tp2399
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2400
tp2401
asbsg59
g0
(g60
g2
Ntp2402
Rp2403
(dp2404
g64
(tsg65
S'float64'
p2405
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg540
I00
sbag0
(g597
g2
Ntp2406
Rp2407
(dp2408
g543
g623
sg540
I00
sbag0
(g597
g2
Ntp2409
Rp2410
(dp2411
g543
g616
sg540
I00
sbag0
(g597
g2
Ntp2412
Rp2413
(dp2414
g543
g658
sg540
I00
sbag0
(g597
g2
Ntp2415
Rp2416
(dp2417
g543
g0
(g8
g2
Ntp2418
Rp2419
(dp2420
g12
g0
(g13
g2
Ntp2421
Rp2422
(dp2423
g17
(lp2424
g0
(g8
g2
Ntp2425
Rp2426
(dp2427
g12
g0
(g13
g2
Ntp2428
Rp2429
(dp2430
g17
(lp2431
g0
(g8
g2
Ntp2432
Rp2433
(dp2434
g12
g0
(g13
g2
Ntp2435
Rp2436
(dp2437
g17
(lp2438
g572
ag0
(g8
g2
Ntp2439
Rp2440
(dp2441
g12
g0
(g13
g2
Ntp2442
Rp2443
(dp2444
g17
(lp2445
g602
asg55
(itheano.gof.utils
scratchpad
p2446
(dp2447
g138
(lp2448
(g187
I75
g188
S'self.functions()'
p2449
tp2450
a(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2451
tp2452
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/nnet/nnet.py'
p2453
I1708
S'binary_crossentropy'
p2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2455
tp2456
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2457
tp2458
asbsg154
(lp2459
g2440
asg156
g0
(g196
g2
Ntp2460
Rp2461
(dp2462
g200
g201
sg202
g0
(ctheano.scalar.basic
Log
p2463
g2
Ntp2464
Rp2465
(dp2466
g207
g2387
sg172
g173
sg38
S'log'
p2467
sbsg38
S'Elemwise{log,no_inplace}'
p2468
sg172
g173
sg211
(dp2469
sg213
(g2467
I1
I1
tp2470
sg216
(dp2471
sg218
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p2472
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2473
(dp2474
g138
(lp2475
(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2476
tp2477
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2478
tp2479
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2480
tp2481
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2482
tp2483
asbsg59
g0
(g60
g2
Ntp2484
Rp2485
(dp2486
g64
(tsg65
S'float64'
p2487
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2488
(dp2489
g138
(lp2490
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2491
tp2492
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2493
tp2494
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p2495
tp2496
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2497
tp2498
asbsg154
(lp2499
g2433
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2500
(dp2501
g138
(lp2502
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p2503
tp2504
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2505
tp2506
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2507
tp2508
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2509
tp2510
asbsg59
g0
(g60
g2
Ntp2511
Rp2512
(dp2513
g64
(tsg65
S'float64'
p2514
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp2515
Rp2516
(dp2517
g12
g0
(g13
g2
Ntp2518
Rp2519
(dp2520
g17
(lp2521
g0
(g8
g2
Ntp2522
Rp2523
(dp2524
g12
g0
(g13
g2
Ntp2525
Rp2526
(dp2527
g17
(lp2528
g0
(g33
g2
Ntp2529
Rp2530
(dp2531
g37
Nsg38
Nsg39
I01
sg40
g41
(g42
(I0
tp2532
g44
tp2533
Rp2534
(I1
(tg47
(S'f4'
p2535
I0
I1
tp2536
Rp2537
(I3
S'<'
p2538
NNNI-1
I-1
I0
tp2539
bI00
S'\x00\x00\x80?'
p2540
tp2541
bsg55
(itheano.gof.utils
scratchpad
p2542
(dp2543
g58
Nsbsg59
g0
(g60
g2
Ntp2544
Rp2545
(dp2546
g64
(tsg65
S'float32'
p2547
sg67
g2537
sg68
I00
sg38
Nsbsbag572
asg55
(itheano.gof.utils
scratchpad
p2548
(dp2549
g138
(lp2550
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2551
tp2552
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2553
tp2554
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p2555
I216
S'__rsub__'
p2556
S'return theano.tensor.basic.sub(other, self)'
p2557
tp2558
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2559
tp2560
asbsg154
(lp2561
g2523
asg156
g0
(g196
g2
Ntp2562
Rp2563
(dp2564
g200
g201
sg202
g0
(ctheano.scalar.basic
Sub
p2565
g2
Ntp2566
Rp2567
(dp2568
g207
g208
sg172
g173
sg38
S'sub'
p2569
sbsg38
S'Elemwise{sub,no_inplace}'
p2570
sg172
g173
sg211
(dp2571
sg213
(S'subtract'
p2572
I2
I1
tp2573
sg216
(dp2574
sg218
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p2575
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2576
(dp2577
g138
(lp2578
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p2579
tp2580
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2581
tp2582
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2583
tp2584
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2585
tp2586
asbsg59
g0
(g60
g2
Ntp2587
Rp2588
(dp2589
g64
(tsg65
S'float64'
p2590
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp2591
Rp2592
(dp2593
g12
g0
(g13
g2
Ntp2594
Rp2595
(dp2596
g17
(lp2597
g0
(g8
g2
Ntp2598
Rp2599
(dp2600
g12
g0
(g13
g2
Ntp2601
Rp2602
(dp2603
g17
(lp2604
g2530
ag602
asg55
(itheano.gof.utils
scratchpad
p2605
(dp2606
g138
(lp2607
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2608
tp2609
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2610
tp2611
a(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p2612
tp2613
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2614
tp2615
asbsg154
(lp2616
g2599
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2617
(dp2618
g138
(lp2619
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p2620
tp2621
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2622
tp2623
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2624
tp2625
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2626
tp2627
asbsg59
g0
(g60
g2
Ntp2628
Rp2629
(dp2630
g64
(tsg65
S'float64'
p2631
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2632
(dp2633
g138
(lp2634
(g187
I75
g188
S'self.functions()'
p2635
tp2636
a(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2637
tp2638
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2639
tp2640
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2641
tp2642
asbsg154
(lp2643
g2592
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2644
(dp2645
g138
(lp2646
(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2647
tp2648
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2649
tp2650
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2651
tp2652
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2653
tp2654
asbsg59
g0
(g60
g2
Ntp2655
Rp2656
(dp2657
g64
(tsg65
S'float64'
p2658
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2659
(dp2660
g138
(lp2661
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2662
tp2663
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2664
tp2665
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p2666
tp2667
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2668
tp2669
asbsg154
(lp2670
g2516
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2671
(dp2672
g138
(lp2673
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p2674
tp2675
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2676
tp2677
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2678
tp2679
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2680
tp2681
asbsg59
g0
(g60
g2
Ntp2682
Rp2683
(dp2684
g64
(tsg65
S'float64'
p2685
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2686
(dp2687
g138
(lp2688
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2689
tp2690
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2691
tp2692
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p2693
tp2694
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2695
tp2696
asbsg154
(lp2697
g2426
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2698
(dp2699
g138
(lp2700
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p2701
tp2702
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2703
tp2704
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2705
tp2706
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2707
tp2708
asbsg59
g0
(g60
g2
Ntp2709
Rp2710
(dp2711
g64
(tsg65
S'float64'
p2712
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p2713
(dp2714
g138
(lp2715
(g552
I184
g553
S'cost = T.nnet.binary_crossentropy(O, y)'
p2716
tp2717
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p2718
tp2719
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p2720
I27
S'__neg__'
p2721
S'return theano.tensor.basic.neg(self)'
p2722
tp2723
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2724
tp2725
asbsg154
(lp2726
g2419
asg156
g0
(g196
g2
Ntp2727
Rp2728
(dp2729
g200
g201
sg202
g0
(ctheano.scalar.basic
Neg
p2730
g2
Ntp2731
Rp2732
(dp2733
g207
ctheano.scalar.basic
same_out
p2734
sg172
g173
sg38
S'neg'
p2735
sbsg38
S'Elemwise{neg,no_inplace}'
p2736
sg172
g173
sg211
(dp2737
sg213
(S'negative'
p2738
I1
I1
tp2739
sg216
(dp2740
sg218
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p2741
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2742
(dp2743
g138
(lp2744
(g2720
I27
g2721
S'return theano.tensor.basic.neg(self)'
p2745
tp2746
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2747
tp2748
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2749
tp2750
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2751
tp2752
asbsg59
g0
(g60
g2
Ntp2753
Rp2754
(dp2755
g64
(tsg65
g2712
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg540
I00
sbasg2242
g2198
stp2756
Rp2757
(lp2758
g0
(g88
g2
Ntp2759
Rp2760
(dp2761
S'provided'
p2762
I0
sg38
NsS'required'
p2763
I01
sg92
(lp2764
Nasg541
I00
sg105
I00
sg106
I00
sg59
g563
sg112
Nsbag0
(g88
g2
Ntp2765
Rp2766
(dp2767
g2762
I0
sg38
Nsg2763
I01
sg92
(lp2768
Nasg541
I00
sg105
I00
sg106
I00
sg59
g588
sg112
Nsbag0
(g88
g2
Ntp2769
Rp2770
(dp2771
g2762
I0
sg38
Nsg2763
I00
sg92
g93
sg541
I01
sg105
I00
sg106
I00
sg59
g108
sg112
Nsbag0
(g88
g2
Ntp2772
Rp2773
(dp2774
g2762
I0
sg38
Nsg2763
I00
sg92
g336
sg541
I01
sg105
I00
sg106
I00
sg59
g344
sg112
Nsba(lp2775
NaNag96
ag339
atp2776
Rp2777
sS'train'
p2778
g526
(g527
((dp2779
g529
Nsg530
g531
sg532
I00
sg17
(lp2780
g0
(g534
g2
Ntp2781
Rp2782
(dp2783
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g545
sg567
I00
sg112
Nsbag0
(g534
g2
Ntp2784
Rp2785
(dp2786
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g572
sg567
I00
sg112
Nsbag0
(g534
g2
Ntp2787
Rp2788
(dp2789
g38
Nsg538
g0
(g8
g2
Ntp2790
Rp2791
(dp2792
g12
g0
(g13
g2
Ntp2793
Rp2794
(dp2795
g17
(lp2796
g85
ag0
(g8
g2
Ntp2797
Rp2798
(dp2799
g12
g0
(g13
g2
Ntp2800
Rp2801
(dp2802
g17
(lp2803
g0
(g8
g2
Ntp2804
Rp2805
(dp2806
g12
g0
(g13
g2
Ntp2807
Rp2808
(dp2809
g17
(lp2810
g0
(g8
g2
Ntp2811
Rp2812
(dp2813
g12
g0
(g13
g2
Ntp2814
Rp2815
(dp2816
g17
(lp2817
g35
asg55
(itheano.gof.utils
scratchpad
p2818
(dp2819
g138
(lp2820
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p2821
tp2822
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2823
tp2824
a(g148
I533
g149
S'inplace=False)(input))'
p2825
tp2826
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2827
tp2828
asbsg154
(lp2829
g2812
asg156
g0
(g157
g2
Ntp2830
Rp2831
(dp2832
g161
(lp2833
sg163
(lp2834
sg165
(lp2835
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp2836
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2837
(dp2838
bsg59
g0
(g60
g2
Ntp2839
Rp2840
(dp2841
g64
(I01
I01
I01
tp2842
sg65
g66
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g83
g2
Ntp2843
Rp2844
(dp2845
g37
Nsg87
g0
(g88
g2
Ntp2846
Rp2847
(dp2848
g38
Nsg92
(lp2849
g41
(g42
(I0
tp2850
g44
tp2851
Rp2852
(I1
(I28
I15
I15
tp2853
g100
I00
S'\x01\xcb}\x1e\x13\xecb\xbf* \x88\x84b#_\xbfx\x13\xe6A\x9e\xf3b\xbfV\xe4\x1a\xb2\x93\xdfb\xbfx\x16\x19\xef\xd7\xd3b\xbf\xc6\xa7\xd7\x82\x8d\xffb\xbf\xc7^-<\x10\xd6b\xbfZ\x90 nN$c\xbf\x05\xc1x\xf1\x9b\xd3b\xbf\xbd\xf2\xb0\x8e\xe0\xecb\xbf\x85\x0b\x15Jm\x00c\xbf\x7f\xc8\xe3\xe0:;c\xbf?\xde-\x87\xa5\xbbb\xbfc\xaa\x0c\xd6\x13(b\xbf\xa6\xcf{1\xb2\xf1b\xbf\xa80\xf71\x9a\x01\xf0\xbe-\xa2\xbaV\x196\xee>`\x8a\xcc]j*\xdb\xbe\x7f\xd5\x0c\xbc\xd9\xaf\xcd\xbeEOj\xc4\xf3\x8c\xc9>\xce\xf6/p\xf0\xf9\xe2\xbe\xd7\x04n\xc9\xb3#\xc0>\xe7{\xc7\x85\x9c9\xc4>D\x15`ImC\xe4\xbe-\xcb\x96ri\x7f\xe7\xbe\xa9)gJG?\xaf>\x8a+gD\xc60\xee\xbe\xb9\x14\t\xb5\xd4"\xcf>\xbc\x97\x05\x18\x83\xdc\xd0\xbeWR\xe6\xf5\x1a}\xd2\xbe\xa4\x19\xdb\x06I\xe8\xf1\xbe2\xab\xbaj\xe7\xee\xec\xbe\x18&\'%U\xca\xf0\xbe\xf3)\x86\xc3\\J\xf1\xbe\x84\xf7 \x01_\x80\xed\xbes\xb7j\xda\xc5f\xf1\xbe8\xfb\xe1\xbbR\xf7\xec\xbe\xd5~iN\xb8(\xef\xbe\xeep\xbd\xb5\xe1\x90\xf0\xbe\x07\xfca\xb1\xa6c\xf2\xbe_&\xe1\xb2\x12\xb1\xef\xbe,3}\x10)\x14\xf5\xbe\xf5z\xd2\xa7K\x9a\xee\xbe.\x1f\x81\\\xd7\xe3\xf0\xbe\x9fY\x9ev\xd2V\xf0\xbe\x1a\x91\x10\x98\xa8\xc2\xe6\xbe\xdcE\xb7,\x82K\xd8>\xb5\xb84\xc2\x15\x82\xe2\xbe\xff\xce\xab\xe9\xf5\xe5\xe2\xbe\xa4\xe63\x11\x06\xde\xd4>\x92\x05\xc3\xe0y\xe2\xe8\xbe\xfbIU\x0cY\xf0\xb2>\x0c\xd7\xef\xc6\x06\xe6\xcb\xbe5t\xb9\x10\xefH\xe4\xbe\xe4\xf1\xf4\rQ\xfa\xf5\xbe\x1af\x92\x1dV\xff\xdc\xbe\xf9v{\xe6\x8d\xea\xef\xbe\x8di|\x18\x0f\xb4\xd2\xbe(V\x9d=WM\xbe\xbe\x87\xc5^\xc38\x81\xdc\xbe\xdc\x83\\\x98G\xd0\x1b?\xc1o\x97~\xd8BC\xbfg8\xdaq\x1aA\x1a?\x07r\xb0\x92\xa9@\x19?\x15\x98\xb1@\xdb)\x17?u\xb4\xc0\x8b\x19\x96\x1a?\xf3\r\xae\xc5n\x94\x19?\x9f"\x03\x8c\xc4\xa6#?\r\xd5~\x0b\xa2\x7f\x1a?\x101pixw\x1d??\xfd\xe2\xe2\x8dG\x1a?\x90\xa4p`\xe6\xb3\x19?\xc0\xf6\xf8\xb1\x9a\x80\x16?\xad(\x17\x07`\x02\x1b?\xb5\xa0\x84\xef]N\x19?l\xb4\x01\xbb2t\r\xbf\xf7\x83\xf2\xa2@Y\xef\xbe\xd8b-\x8d~\x85\r\xbf\xa0\x07\x8d\xc8W&\r\xbf\x07\n\xb7\x8a\x98%\r\xbf:\x13l\xdf5\x97\r\xbf{\xa3\xef8!9\r\xbf\x9a\x0c\xfde$\x83\x0e\xbf\x0e"\xb9\x96\x05,\r\xbf\xac"\x01\n\xef\x15\r\xbf\xb1\xed"\xbeO^\x0c\xbf\x87\xcfw\x9f\xf7\xa6\x0e\xbf!\x037\x1f\xaf\xc2\x0c\xbf\x84z\xf1\x92\x16\xc4\x0c\xbf\xb2G5\xc0\xe5k\r\xbfH\xc0\x0f\x8e\xa1\x16\x0b\xbf_+\xb1\x9ajK\n\xbf\xe8\xeb\xe8\x08w\xdf\n\xbf\x85\x8c\xde\x7frL\x0b\xbfJ*`\xadF\xf1\n\xbf|8\xeeX\x8e\x19\x0b\xbf\xbb:\xe9\xf8\xe5\xbb\n\xbf\xedL\xdf\x01_\xd3\n\xbf\xc9\xc6F\xa2\xa7\x0c\x0b\xbfW\xc5\x08\xfa\x00!\x0b\xbf\n\xa5T{\xf0\xbb\n\xbf.\xd5\xa8\x0e\x15z\x0b\xbf\x10\x97`9K\xc5\n\xbf,\xecS:\x8d\xf0\n\xbf\xf1t\x03\xeaz\xf0\n\xbf\xf3\x91dHZ\xbf\xf1>\xc0\xe7Wm!0\xd4\xbe\xb3TVu\x02\xcc\xd6>\xce\xb7\xbf\x01\x809\xe1\xbew\x14$\xc9i\xfb\xee\xbe\x9e\x18X\xa7l\x1c\xe8>\x1f\x15\xcd\xf9\xadn\xe5\xbe\x05\xb5ej\xf0\xfa\xd1\xbe\xd5bBN\xd4\xe0\xd6>U\x84\xa3\x8f\x1b\x85\xf1>\x97\xden\xfdy\x9c\xd1>\xfaKb\xb0\xa0\x86\xf2>\x9aB\x9e\x96k{\xdc\xbe\xbc\x00\xce\xd2\x7f0\xd0>\xc8\x91\xe0\xb0\xb6B\xb5>;iZ\xa1x3\xf9\xbe\xe9L\xa9\x9cL!\xf6\xbe\x01\x10\xdb\xab\xa1\x91\xf6\xbe\x8a:\x1bB\xd1V\xe7\xbe\tM\xde\xd1-\xc4\xe2\xbe\xda3;\x9cY\xab\xf7\xbex7\xcaI"r\xf6\xbe\xc1Ro\xfd\x1f\x16\xf6\xbep"\xc5\xe1\r\xed\xf7\xbe~\x10(\x86$\x90\xfa\xbe\x1e\xfd\xd5\xd3l\xb4\xf7\xbev\x1b\xfd\x8a\xd4\x80\xf7\xbe\xbc0&\xe4\x91\x92\xf6\xbe[\xf1\xb5\xd0+\x9c\xfc\xbedc4\x13\xc9J\xf5\xbe\xcc\xc2\x9d\x86\x1b\x9e\xec\xbe\x91\xac\x19 \xe4\x03\xe7>\x8a\xceP&\xab\x87\xda\xbeR\x16\xd6\x88\xd3\x03\xf0>G\xfdt\x04\x0e\x98\xf8>\xe5\xddG\x18y\xdb\xe4\xbe\x07<4\xd1\xfa\xc2\xf3>\xf3@Jy\xf7I\xe6>3@\x15\xf8T\'\xa0\xbegOZ\x9a\x04\x13\xf4\xbe\xb8\xb0=\x8f\np\xbc\xbe\x8a\xec\xe2I\xf6S\xf9\xbei\xe2!\x16Bo\xe5>\xda\x0f@`\xea\xbe\xc8\xbe\xf7n\xa7b\x98\xec\xd1>\xbe\xd5\xc7;\xab\x98F?(d[oH\xb0F?\xb1/7_v\x8dF?\xda\xae\x8c\xf5NdE?Um4\x98\xff\x87E?5"\xbdccmF?\xfa\x18EZ8\xb6F?\x97:\x0fS\x92\x96F?(\x8b\xcd:\xa0\xcdF?i\xd4\xc3\xc1\x9e\xa2F?\xca\xb5\xd8k\xe2\xb3F?DU\x90\xec\x93%F?N\xe3\x9f=\xd3\xa3F?\x95\x06\x1b\x1dZRF?de\xa5\x10\x90\x9cF?!\xe9\x11\xed\xc7\xb1\xec\xbe\x1f~\x8b\x87\xc9l\xee>_\x0b\x8b\xb0<Z\xdc\xbeG!\xad\xc9\x1f(\xdf>\xe5\x084\xa6\xe9\xbc\xf0>\x96\xf9L\xba\xdc\x18\xe2\xbeg4V7\xe8\xcb\xe3>\xa7\x01\x97HP\x92\xde>\'*P\x95\xb2\xa1\xd9\xbe\x81\n\xc5\xf9\x8d*\xf1\xbe@9\x04Lhg\xcc\xbe)\xf9\x10.\x07C\xec\xbeq\x06fN@\x00\xd8>\n\xb8=\x9d\x10\xff\xd5\xbe$\xf0\x809\xc0\xeb\xae\xbe\x98QA\x92\xb9\x8f\xf2>x\x99\xec\x15\x86\xb7\xe9>K\x03\x03\xd6\xa3\x94\xf1>\xf7\x86\xdbJ\xfa\x1c\xec>\xec\xf8\xf74\xd0\xdf\xe0>l\x87\xc7?\x01\xe9\xf3>\x9f\x84\xec\xa2\x04>\xe5>z\xb6e\xbe\xb1\x8c\xe8>}\x9bnz\xcfP\xf4>H\x10\xae\xaf\xac\x94\xf6>c0\xe6{\x1d\xd8\xf0>Y2\x1d\x8f\xfen\xf1>\x00\xf9}\x0e[^\xe6>\xa56]\x15\xbf<\xef>T\xe7\x1cAN\xe1\xf0>N\xe3g\n\x03!*?QIO{\x82\xc0&?\xaeR\x98\x99Xn)?L\xd2\x96a\xc7P*?\xe7\xf9\xdb#3S*?G\x94 \x1d\x1a\\)?\xf14\xc5\xc01u*?\xbb<|\xdb\xd9t*?j\x871\x8c\xe1\x95*?:\xaf\xc2f\xb3\x9a)?\x13`\nh\xadp*?\\;\x02H\xca\x05\'?\x9b/ht\xbf\xfd)?\xf6\xc2\xc5\xc8\xe22*?!\x7f\x8c\xeb\xf9\x92*?(.U\x91 Q\x1d?\xf5\xf3\x8a\xef\x7f\x06 ?@\xdcD\x95\x86C\x1e?|\xaa\xbd\xd6\xddy\x1d?q\x1a\xa5\xeeLG\x1d?\x90[5\xacd\x0e\x1d?a\xef\xa6\xa1\x88\x9d\x1d?\xcc\xa4a}\x88T\x1d?(5\xc0^~\xf9\x1c?\xc7\xcf\x91\x8e\xfa\x8b\x1d?\xf7\xdaL\'\xaak\x1d?r\xa2\r\xf6Cr\x1e?\x96d\x8c\xa1\xb4\x15\x1f?$W\xaa\xa7w\xa3\x1d?\x7f\x8bs\xb1eq\x1d?\xf8\x0cb1)\x92\xe9>\x88\x06\x1a^S\xcf\xdc>\xd7\xf2\x8f\'\x94\xda\xec>\xf7\xc7;4\x9a\x9c\xe6>X`\xdes\x97\xe6\xe3>\xd5\xc3\xb5;\x7f5\xd8>>L\xdbtKR\xa8>\xfa\xabE\x08\xa8\x89\xe3>\x88\xed\x18\x10p\x8b\xe7>\x87\xcd\x90\xf6\x15\x92\xea>\xd6\xbc\xa5L6\xbb\xe6>\xac\x8a\xe30D\xd8\xf0>\xd2\r+q\xf5\x97\xe3>.y\xc1\x8e,\x14\xeb>~#\x19d\xbc\xbc\xe0>\xd2O\xba\xda6\x89\xf1\xbe\xd7\x8a\x91\r\x8aD\xd6>\xaf*G\x12I;\xe0\xbe\xa4\xddopT\xb3\x83> &\x00\xd0^\xc7\xe2>\x90\x00\xc9s\xf4\xd9\xd9\xbeq\x03i\xde,\xab\x9f\xbe\xdf\xab+}\xad\xaa\xc2>\x13\xf6\x85pW\x01\xd1\xbe0\xf4\xc4\x9fmi\xf3\xbe\x0c7!\xd1\x10\x04\xd5\xbe\x12z\x00\xc4\xdb\xed\xdb\xbe\x85[C\x9fgLo>\x97\x1c \x04+\xc2\xe2\xbeERk$\x1am\xc5\xbe\x1c\xbd+n.\xcf\x03?\xf3=\xb1y\xa3\xce\xfe>\xbc\xe1\xc7\xdeJJ\x02?\xbaE\x0f"rd\xff>\xf1\xec\x8fj\x1c#\xfe>o/\x02\xcb\x92>\x04?\x17<\x1f\xc2Y^\x00?\xc3z\x92\xa9\xc8\x07\x01?*&,\x00\xa4L\x02?t\x95\'=t\x1e\x04?\x04\x08 \xa83S\x02?\x02\xed/T\x1d\x99\x02?\ns\x1fc\x12\x98\x00?PM\xd7\x809\x8f\x02?%\x99\xff\x8dm\xc9\x00?\n\x00\x05\xcfUR\xe4\xbe\x0f\x84\x96fa\x1c\xd4>o=xA\x90\xb2\xe0\xbe\xa0&\x11\xfbw\x0f\xc2\xbe\xd2\x17\xd7\x9a\x8f5\xd9>W\xb9K\x1f\x1b\xcc\xe6\xbe\x9a7\x06c\xbc\xa0\xbf>\xc1D\xb4\xd6\\\x9c\x01\xbf\x8e\xe9j\'\x9f3\xdd\xbee\xf8\x0e\x14\xa1\xa5\xf0\xbeq\xdf6\xbf\xaa\x8e\xdc\xbe`\x94g\xe1\x99\x8e\xe0\xbe\xa3b\xd5(\xb9s\xe2\xbe&\x0e*A\x06\x12\xe0\xben\x91\xfb\xab\xdb\xf1\xc7\xbe\\{\xbb\x01\x1e8\xe0\xbe\xfe\x17l\x18z\x14\xeb\xbeN\xc1\xb4fB<\xea\xbe\xdb\x8f\x12\xb7\x911\xdb\xbe\xf6*\'\xa0\x96\xa5&?a\x9e<\x98\xf7\x1f\x84>J^Y\xd0.\xb4\x04\xbfq\xa8g\x13h\xc6\xd5\xbe\x91u\xc2\xc18\x0f\t?\x87tp\xab\xfb\x13-?\xfef\xdeM]\xbc\xea\xbem\xc5\xd4\x1b\x08\x99\xf6\xbe\xdf\x9a\xe6q\x83\x8e\xf9\xbe`X<\x13-{\xfc\xbe\xc9\x97\xe4\x922j\x1a\xbf\xa6B~\xe2\x8bK@\xbf\xc5\x0e\xe9\x85\xa1I@\xbf\xccfK\x16\xbeX@\xbf?\xda\xa7\x91nE@\xbf*\x86\xac:\xe6U@\xbf*\xcdy\x91SY@\xbfB3<\xa1CX@\xbf\xd0\xd0\x9e\xbd\x1cZ@\xbfO\x1c\x08\xf8vZ@\xbf\\\x168\xc64X@\xbf\x83\x00\xfa\xb3\xb3Z@\xbf}\xb7LL\xa5W@\xbfwD\xea\xc6\x11T@\xbf|\xd6\xa3\x0bRW@\xbf\xf3\xe5s^\xc6V@\xbf\xdfdx\xb3^\xa5\xf8>\n\x1b\x1bI\x8b\xb4\xaa\xbe\xd0\xa9U\x08\x04\xc2\xee>\x9c?1\x0bN\xde\xeb>\xa7\x17\x03R\xe4\x98\xef>\xc0<\x9f<\xba\xa9\xea>\x9a\xe7\xda\x08mv\xda\xbe\xfc\xb2)\xae\xc1U\xcc>\x8f\xfe\x1e\xe5*7\xf0>8\x9f\xb0\xfb?P\x06?q \x07\x8c\xe4\xbd\xe1>)\xe6\x8f\xfc\xd4 \xf1>:\x8d\xf0\x93\x08\x8a\xac>\xe3Y\x91:\xcc\x96\xdd>\x91d\xa6R\xa3b\xd4\xbe\x9a\xc8\x14H\xc2\xa0\xec>8\xe2\xc7\xca\x8c}\xce\xbe%:\x97\x8b\x98$\xe3>\x96\xb1\xdb\xdcE\xe2\xc5>d\x83\xe5L\xf7\x06\xeb\xbe\x08\x8d\xf4>K8\xf4>c\x98\x0eJVm\xc4\xbe\x88\xe0\xdb\x1aQ\x03\xca\xbe\n\xc0\xb2|v,\xd6>\x00\xb0\xaaV\x85^\xe2>\x01\x03\x89\r\x01\xfb\xdb>\xb1\xb72\x11\xab\xfb\xe1>\x81D\xdeYR\xee\xc9>\xb7s&\xaex\x0b\xdc>\xa8\xc8\xe2\x8a\x17\x13\xe2>\xa5!5\x1f\xf8&\xe2>\'\xc3\xa3\xae\xad\xfa ?\r\xa04\xeb\x9d\x94\x0e?z\xec|\xe5\xfe\x8c\x1e?\xe3\x8e\x0fi\xa1\xb9\'?\xb3.\x9c\xb2\xa2v\x02?\xe5\x84\x8cH\xb4\xf0\x1b?\xdf\x0e\x93F&L\x1a?\x96\xd9\xc7\x93\xd9\x9f\x15?\xcc\xf7\xab\xaa\xbb\x1f\x11?\x17DD\xb0\xf8\xb5\r?\x9f\x12\xc8\xefQr\x01?M\xc0^7\x9c\x1b\x17?\x88l\xaa\x0ch\xc4\r?\x08u\x80D\xbb\x9d\x0f?\xd3\x03\\\xb8\xb5\xb0\xe0>\xa7o#Y\x02\xa5\xca>N0\x1d\xca\x89|\xd7>\x15\x81}[Z1\xcc>U\x05)\xf6c\xdb\xf5\xbe:\xa1?FS\x94\x05?\x9a\x0fFF\x82\xb8\xd7>\xa1}^\xac\x03\xbe\xd5>\xd1\xb0\x08F\x87\xeb\xec>\xe1J\t\xf08w\xf5\xbeDe\x05\xe1YP\xdf\xbe\xff\xdb(\xb8D1\xf3>c\x02\xbf\x18\x040\xb1\xbe\x98\x10\xb3KlO\x10?$\xa6Q&\x91\x92\xe5>\x91S\xdf\x859y9\xbf\xc5W\xb9\xf6\xd2\x9d9\xbf\xf7\x88T\xf4r\x7f9\xbf\x12\x84\x99j\xca\x839\xbfSd)\x05@P9\xbf\xb2B\xe0\xc6\xc7\x989\xbfE\x9f2/\xb5\x889\xbf\x80\xc6p\xcd\x81\x839\xbf@\xf2\xef\xd1\xd1\x839\xbf^\x92\xf4V\xff\x849\xbf\xe8]\xe0\xeev\x889\xbfW\xa6<\xfc\xe1~9\xbf\xba\xbc\x15Owz9\xbfI=\x1e^\xe7~9\xbf\xf5\xaeW\xfaX}9\xbf\x08\x0c\xb8\xb4\xac\xe5\xf9>\x12\'\xc9Q\x90\xe6\xc8\xbe\x97\xae\x81q\xc81\xf2>M\xed\xec\xa2\x03\xd1\xe0>\xe1\x11H~o\x96\xc8\xbe2\t\xcc\xfc\xa7\xc7\xe8>\xc7\x82\x8f\xaa\x9f\x80\xc1\xbe\x18\x81\x05\xf7+\xd3\xd7>\xc3^C\x12@\xff\xee>u\x96\x84\xeb\xafQ\x00?\xba\x8fN\xd5\xa8\x9f\xf1>*\xdd\\\x1bv\xbb\xfe>|\xa7\xba=\xf5\xa3\xd8>\x17B\x87\x170\xc7\xf0>\xdb\xb6\xac\xfd\x11"\xd8>\xcc\xceS\x95\xbe\xd1\xe7>\xba6\xef\x81j=\xdd>\x1c[I\xfei/\xdd>(\x08\x0eW\xf3\x83\xf2>\xb1\xa8\x07\x92\xee\xce\x02?\xee\xbc\xcc0\x8b\xf1\xfd\xbe\xd7\xbd\x94.\xe8\x07\xe5>GVF\x18\xcb\xf9\xe1>5WSw\x94\xd3\xbf>\xcc\xae\x96\xbc\xe0\xf6\x06?\xd7\x95\xe9:\xd4\x10\xbe>\xf8"\xa0\xddw\x9d\xfc>U\x059MZk\xe2>1@\x9c\xa1\xda\xf6\xeb\xbe\x01\x8eh\xd5\x9bP\xc0>\x88qL}\xbc\x1c\xf8\xbe\xf1\x9diq\x9f\x03\xd2>>H\x95S\xf5\x87\xea\xbe;QNQ\x01m\xe9\xbeq\x1e\x7f\xad\xb4\xa6\xd5>\x1e\xd0\xcc\x05\xcb\xcd\xe1\xbe)\x04\x05\x04\xf2\xe1\x82>~\x16\xe9\x1f\xd8\xba\xc1\xbe<\xf7\x1e1#\x10\xd3\xbe0\xb0\x9dX\x04\xd8\xfa\xbe\xe0U\xc1e\xef\x1e\xe8\xbeV\xa6\xee\xbd\xcd\xde\xf9\xbe\xbc\x9euu\xae\xea\xd9\xbeGw\xe8\x18\xb4\x18\xeb\xbe_E\xbd\rh\xcc\xc8\xbe|\xa6\x1a{y%\xf1>c-\xdcT~)\xc7\xbe\xc0k\x91\x94\x95\x0e\xe6>\x05\xd3\xecQ\\\xc3\xc1\xbe\x00Cy\xd7A\x0c\xd7\xbe\x88V\n\x9f]\xe0\xf3>.?{\xbe\xa6\x9e\xce>\x0e\n\x13\xa5\xd6W\xd4>NiYb\xc6\xb6\xdb>\xec\x07\xa9\x03\xd3\xda\xeb>\xf31\x1d\xc2W\x96\xe2>!l\x82\x00\xe2)\xec>\xc3\xb1\xa3\x01\xba\xe9\xbc>\x03.\xae\x89\xa2\xe4\xe7>s\xc3\xe5\xa3\xe2\xf3\xdc>AB\xb0\x87)\xcc\xe7\xbe\xd7(\xf73K\x1e\xdb\xbe-K\xc1\xba\xce\\\xe0\xbenR\x8f\x9b\'\xef\xd7\xbe\xd7\n\xab\x89\x83\xc4\xce\xbe\x9e\xb0K\x16\x07\xc4\xe2\xbeG8E\xc34\x9f\xf8\xbeq\x08\x99\x828U\xcc\xbeCw\xd0\xc6c\xee\xce\xbe\xc1\xe1\xd86/\xb7\x03\xbfu\xa4\x85\xb5\x8f0\xf9>\'\x96\xdc\xad\xf7&!\xbfu\x85s\xf1\xab\xfa\xd8\xbe\xd1\x07\xb6\xe0(#\x01\xbf\xca\xb1\xdfo\xec3\xd1\xbe7fK\xa5~\x06\xf0>G`\x03H\xb1\x8f\xee>\n\x92\xf7,!\x81\xf2>\xb7\xc7\xa9\xf6\xf4\xc2\xf4>\xfbs\x80\x04\xe4\xf7\xed>\xf5)\x8c\x91\xa28\xeb>\x0e\xce\x07F>E\xee>\xf5g:7\xe0\xb0\xf1>\xa7l\xf4\xeb\x88\xe4\xf0>IF(\x1e\xab\xa4\xf2>$\xe9\xd98\xd6\x0b\xc1>\xe1M\xc7\x87-\xa0\xea>\x00\x80\x80\x96\xac\xb1\xef>N\x11Cz\xc1Q\r?`\xdcT{U\xc4\xec>\x1a\x83\xfd\xc3\xbd\xa5,\xbfp\xae"\xd4\xe0\x19-\xbfp\x05%\x91/\x1c-\xbf7\xb1n\x0ex\xca,\xbf\xff\x1c\xfdO\xb1I-\xbf\xe1r\xf9\x92s\xe1,\xbf__\xec\x10\xe6N.\xbf\xff\xf4\xcbZ\xa4\x81,\xbf\x87\x00?\xe6\x93\x05-\xbf\x96D\x07\xc7-,-\xbf\x15u\xe7\x12\x8c\xce,\xbf\x89d\x02\x84\x0c\x1a-\xbf\x08\xe5\xb9T\xbb\r-\xbf\x92\xa1\xea\xb98\x86-\xbf;v\xdf\xb8\x1b\r-\xbf\x8dg\x13J\xd1\xbc\xf2>\x08\x80\x939r\xf5\xee>\xdb~1\xad\xbc\xa9\xf0>\xc8H3\xee/\xa6\xf5>C40\x81y\x98\xed>5SN\xc2}\xf1\xf0>\xc5\x98h\x01\x07\x8c\xf1>\xc3)VA\xb1L\xe3>\xa8\x98\xf7\xe1\x90\xbe\xf0>O\x06\'\x8f\x92L\xf6>\xecq\x03D\xa9M{\xbel8\xa4\xe8n\\\xf2>\xd3\n>\r\xd3\xdd\xef>\x9e\x05r\xdd\xf6\x9c\x10?\x01\x98f\xf6G\xb1\xeb>\x87 \x81\xe9\xc4\xab\x11?\x885u^"\xf6\x11?\xe7_\xb0q\x96\r\x12?\xde\xd0g\xb5\xba\x1c\x15?\x95\xae\xcf\x95f\x17\x12?\xaam\xcd\xf1a0\x11?\xe3\x11\x03\xbf\xe6\x81\x11?:\xaa\xa3<\x9dm\x11?H\x10\xce\x02\x89\x81\x12?\x8b\xc2\x14\xf3z\xb3\x13?|\xc8vz\x00\x1b\x10?W\x94\x90S]\x96\x12?DO\x90\x8c5\x10\x12?\x00\x0f<\x08\xf2\xb56\xbf\xec\x8faY\xf6B\x12?\xe1\x9f\\y\xa9\xf5\x19?\xb0\xf3Qp"\x1a\x1a?\xb0\x86\xdb\xd6aG\x1a?\xccOm\xe0\xb6\xb2\x1a?{q4\xb1\xf9\x07\x1a?h\x19\x0f\xa8\x91\x9f\x1a?\x15\x8d\xac\xbc\xcb\xe1\x19?\xfe\xa4\xfa\xd9\xd5\xc2\x18?\x13!\xf6T\x9dP\x1a?\x03b\xa34Ld\x1a?\x18\xc9X\x1bA\xd8\x18?\x92\xda\x8d@\xcf\x85\x1a?\x87\xe8\x8c4\xc5\xf1\x19?5\x81\xfa\x7f\xc3\x81\x1c?\x1b\xc7$\xd287\x1a?\xf6w\xe6U\x1d\xf9\xb6\xbe.6B\xe3\xf5\xb0\xbe>\x90R\xb1r\xa1E\xca>\xe5,\xae\x82F\xe3\xe5>D{\xab>\x12\xa2\xc8\xbe>5\xff\xc9\xad\xac\xb3\xbe\x03\xe3^\x85\xd3\xf1\xc3>\x95\x8f\xd1Y\x9c\x87\x01\xbf\xdewn\xd6\xa4\xb8\xe2>?\xb5P\xf7yT\xf5>\xcfK]B|O\x03\xbf\xbbS\xf9*\xe5\xf4\xe9>\xfcN\xf7W4\x9e\xbd>\x9eblZ]%\x16? cn\x94\xaeq\xc4\xbe$\xc1\xb9rV\xdd\xdb>\xbc\xf9(.%a\xd0\xbe%\xe5\xc0\x81\x91\x0f\xc7>\x03.\x87\xc9C\x8a\xda>\x8c\xf2\x90\x9dE\xc4\xd8\xbe\xef\xdfv\xde\x9b\xcc\xd2\xbe\xb7\xe3\xbd\xfe\x80\xce\xcf>\x9arn\xd3\xff\xcf\xef\xbeR\xc1\x1fV+\x84\xc7>\x00n\x17\'`8\xf2>\x11\xe5"X\x1f7\xfb\xbe;0n\xeb\xb3\xda\xce>\xba\x8dl"\xacR\xbc\xbe1\xdf\x95\x822\xcf\x1d?\xc0\xd4\x06\x1eC\x98\xcc\xbe\x98\xba~\xe7i\x85\x9e?q\xbd@l\x1f\xa2\x9e?\xe73E\xa2\xb6\x96\x9e?\x04\x0c\x9aJ\xfd\x8c\x9e?Ih\xd0\x12\xb5\x91\x9e?g\xc5\xcd\xab\xd4\x92\x9e?\x12\x8f\xb5\xd5\x04\x8f\x9e?{y:\xbb\x85\x8b\x9e?DiHD\x1a\xab\x9e?\x96,\x92\xe9\xec\x96\x9e?\x12\xf4~\x15\xdf\x8e\x9e?\x1a.\xb7\xb7@\x8b\x9e?-~\xb0\x0eM\x95\x9e?\xca\xd3\xd44\x95\x99\x9e?\x03=\x04\xad\\\x96\x9e?n`L4dB\xf9\xbe\xd5\xab\xb1b\xbe\xaa\xd7>\xe1\tB!#\xe4\xe7\xbezq\xf3\r\xc8\x10\xfd>\x9a\x9fAr\xfdy\xdc>\x07Gcuq\xf6\x05\xbf\'\xc3\x9b0\x915\xdb>\xfah\xf5{\xdbi\xe5>\xec\x00G4\x0b\xcd\xe8\xbe\x0ecX@1e\xd0\xbe|#\x12|\xf1\x89\xef>,~\xc6\xb9<6\xef\xbe6\x95\xbb\x08\x97e\xc6>\xd5#\x0bD\xff\xd3\xc6\xbeW\xfc\xa7\'f\x9a\xe6\xbe`O\x14 \xf5o\xdb>\xba]\xe3g\x85\xeb\xd2>\xe5\xe40\xb4\xea\xdc\xe0>Nc\x86&\xcc4\xe4\xbe\x1f9\x89{HP\xe6>\xc81\xe7\xb3\x8f\t\xe7>\x9c\xd4\x03\xeea\xba\xe7>i\xc4\x9b\xd8\xcf=\xea>\x9f\xc1K\xd5\xc7\x9e\xd5>\xecF\xa3\x11\x9be\x9f\xbee\x8a3\x0e\xcd\xbc\xf8>Rt\x11\xe4\xda\x1c\xcd>\n\x9b\xf7D\xba\xec\xe2>\x84\xa81\xcb\xa4;-\xbf\xcc\xa5\x8b$\xba\xdd\xe3>\'N*@\x94A\xc6\xbe\x0c\xd8\xd5v\xa1f\xc0\xbe\xff]\x0c7F)\xcf\xbe\xffv*M^\xba\xef\xbe\x1fr\rB\xe6\xa5\xa0>\x12\xc8\n\xdf\xc2\x87\xb2\xbe\x05\xbc\x85#\xb9\xb2\xab\xbeW\xdb\x89\x05\xd3\xd8\xde>ZH\xa0\xdd\x98]\xdf\xbe\xd1\x0e\xdb\xda\xc7\x0c\xeb\xbe:\xef\xb6\x14?\xf2\xf5>wK\x9e\xe2x\xab\xdf\xbe|\xcc}\x08\x9aB\xb6\xbe;\xf3\xa8\xbb\xe9\xb8\x17\xbf3\xab\xd8\xd9]\xcdo>\xbc\x14\x98f_\xea\xd5\xbeqv\xea4\x9b:\xec\xbe\xe9\x8f\x04(^\xa3\xec\xbe\xf1\x87\x87\\k\xf4\xf5\xbe6\x04fY\x1d\xb1\xec\xbe\xec\xd8\xf9\xfb\x80\xce\xec\xbe\xfa\xef\\\xe0T\x01\xeb\xbej\xc8~\xdb\xb0\xad\xf2\xbe\xee\x0b\xf8\x00\xc7\xa2\xef\xbeg\xbe_\xa0\xf6:\xf2\xbeHY@"\xae\xc1\xa0>\x15CEHK!\xf1\xbe\xc1p\xae-\x00\xd6\xea\xbe\x00\xa3d\x01$\x05\x12\xbfr\x17\x02\xc4\x92\xce\xe9\xbe\xa8\x1cF\xd2jD\xea>\x16\xb6\xb4\xb3\x83\x9e\xdd>\\l\xd8,\xe8z\xe9>?\xd3\xb6\xff\xfb\xfa\xe8>C6\xe6\x92p\xa6\xdf>\xc0\xa6X\x92O\x15\xe8>\xf5\xa5\x0f\x0e\xe0U\xe9>\xb3\x7fA\xc0p\x1a\xb7\xbe\\\xdbbl\x92J\xea>\x98\x90K\x93(\x04\xf8>\xb1\'\xa8R\xb9\x8c\xda\xbe\'\x86\x1a=\xe1\xdd\x03?s\xcf\xfe+Hw\xe5>n\xc0\x85\'{\xe6\x03?\xe4\x81\x19\xbc\xa6\xb1\xdc>P\xe8\xa7/zy\xff\xbe\xee\x06V\xce\x00G\xfb\xbe\x05B}\xad^$\xff\xbe\xb6a\xb8\xea\xb8\xe6\xea\xbeXA\xad\xa8\xec\xdd\xfb\xbev\xb5<K\xd2\x12\xfd\xbe\x12\x97\xa9s\x08\xed\xfd\xbe\x9b\xa3p\x9b\xe4\xc4\xf9\xbe\x17gG\xcf\xbe>\xff\xbe\x9cSP\xcc+\x8e\x00\xbf\x83\x9eR]\x12\x98\xf6\xbe\x1d\x0c\x86\xf6\xd7\xd9\x00\xbfUS0c\x0cW\xfc\xbe>\x94\x19\x85TD\r\xbf\x84\x87C)>\xe4\xfc\xbe;\xb0\xbc!V\xd4\xed>\x0f\xc2Py\xad@\xc6>\xe8{;\xb8\x96L\xe1>\xc0\xa7`\xf2\xe57\xb1>\x15\x94\xf6>{0\xc1\xbeH\xc8N=\x04C\xe0>\xc3n\x90\xf3\x84\xad\xe4>\xf3\xd4=\xe6\x05\xa3\xd2>\x9aK\x17>GP\xdc>Rv\x95\x01\xc7a\xee>\x95\xbaX\xdd\xf2\xed\xe2>\xcd\xeb\xf8l\xa9\xe0\xdb>\xf3\xad\xbf\xb1J\xb9\xd5>l\xc1\xe7\xc9\xfe\x9f\xe2>Q8l\xcb7\x9d\xe2>\xd1\xea\x9c\x17\xb7\xcf\x13?\x9fM\x88 XN\x13?\x15\x08\'o\x11\x05\x13?\xd5@\xbf\x998\x92\x13?\x84T\x8c\x95\xad\'\x10?Wm\xce\xf4n\x0f\x14?\x82\rt\x9a\xf5m\x11?\x08>q\n\x00\x82\x13?\xd1G-\xdb\x88\xbe\x14?\xf8bf\xb9\x18n\x14?\xd8?\xd1l\xeb8\x13?\xffP\xea\xeb \x01\x04?\x02?Yn6\x8c\x12?\x8b\xf6\x96\\FK\x14?\x0e:lN"\xbc\x14?\xfa\xef\x01u\xac\t\x06\xbf\xc2\x06\x90\xc6n^\x04\xbf\x88b\xcb!\xd8\x00\x05\xbf\x9f\xe2\x7fRz \x05\xbf\xe5"#\xefL\x16\x05\xbf\x0e\x1c\xdbi\xc9\x8d\x05\xbf\xfc\x85\x1f\xdf\xdf=\x05\xbfUb\xc2\xab\xff\x9f\x05\xbf\xa5~\x15J{O\x05\xbf\xf7\x0c\x01\xe1\xa1]\x06\xbf\x1f\x05nB\x82S\x05\xbfx\xc1\xa09\xd6\xbf\x05\xbf\x1f\x9e\xea\x82q\x8d\x05\xbf\'\xd5\xf8Q\xb4\xa0\x05\xbf\x920\x1d+\x91\x04\x06\xbf\xa7e%\xa3\xebH\xf8>x~DK\xbd\xe2\x00?\x18\xdex\x1d\x96\xef\x02?\x88\xf9w\x1cD(\xf1>\x12\x80gnW\x00\xeb>\xa0\xb6\xe5\x13\xab\x9e\xf7>\xb8r\x9f\x94\xfb\xd3\xf4>d\xd6\xdb\'5\xfa\xf8>\xc0G\xd6\xc0\x1f\x8f\xf6>\xa7j\x1br\nU\xfc>\x96W(@Rh\xf2>\xc5\x9c9F\xa6\xee\xf6>%\x97"\xdd\x85\x06\xfc>\xb6\x0e\x0c\xc0\x1c\xf8\xf4>8\x93z\xb9\xc8!\xf8>\xb6]\xc4\x1f)\xb3\xfe\xbe\xde\x9fnU\x1a\x0f\xf2\xbe\x80\xf3\xb1Dp\xc5\xfd\xbe{O\xfah\x1d\xd6\xf3\xbeI\xd5:\xbe2X\xf0\xbeW\r7\xff\x12]\x01\xbf7\x96\x87uxz\xf9\xbe\x15\xda\xc2(\xa7\xf5\xf5\xbe\xa0*\xfa\x13\xd2 \xf7\xbe/\x93.\x8d\x06\xbf\x00\xbf\xdc\x07\x9e`@\xd9\xfb\xbe#\x8eq-\x00}\x00\xbfa\xde\xd8"\xf2\x9a\xff\xbe8M\xbe\xc3\xe2z\xfb\xbeX<\x88J\x19\x7f\xfb\xbe\x9a\xbdb\xf1\x04\xc3\xfd>Z\xcf\xbcO\xa2\x91\xe9>:\xae&\xf5W\xa8\xf3>\x8d\x0bp\x9fD\xe0\xf1>\xc8\xf3N\xfc8\xfc\xe8>\x80\x18\xe8\xd34z\xf5>\x93S\xe1M8\xa6\xeb>L\x1f\xda\x08F@\xf1>\xa4\xa2\xa3g\x06\xdf\xf5>!D\x1f%\xd4<\xfa>\xbe\x1a\x94\xae*n\xf2>1e#\xa2-W\xf3>\x8c}\xb8Y\xc7m\xed>\xc7\xeak\xa8X6\xf4>\x17}\x92\xbc\x07l\xf1>L\xf5S\x063|\x00\xbfi\x94\xf1\x9b\x87#\x01\xbfl\xafc\xb8\xe4\xff\x00\xbf\xd3\x11g\x07\xf30\x02\xbf\x0c%yi\xa4c\x01\xbf\x90\x92\x1aq\xa0\x1c\x03\xbf\x9c\xd84\xd56.\x00\xbf\r%\x0fi\xfe-\xff\xbe1.\xb1\xfd\xaf\xc3\xff\xbes\'\xd7J9\xbb\x00\xbf\x15\x98\x02\xaf\x9f#\x00\xbf\xae\x15Z\xf2LD\xff\xbe\xfa\xe4\x00\xf2\xa4q\x00\xbf.\x9d\x803\xc5\x1a\x00\xbf%0\xf4,3\xe5\xfe\xbe\x8d6\xb0\x80\x9b\xce\xf9>,\\\xa3\x9f\xf6D\xed>\xb0\x17\xac\tG\xb1\xf2>\xe1\xf2\x14\xe0y_\xed>-*\xd2\xcfJ\xb5\xe9>\xe3\x86\x12\x02j\xde\xf3>I\x07?\x1d8~\xe6>\xdb\xa8\xe4u\xa2\x91\xee>\xdbq\x93{]\xfb\xef>iO\xb7\x83\xe9\x01\xf7>C\x94\xa7GvL\xf1>l\xab5\xaajG\xf5>\xa9N\x13\x00\xc4\n\xee>%\x96\xd7Z\x8d\x0c\xf3>\xff\x94\xd5\xe6\xf5A\xf3>[\xe7\xce\xef}\xd8\x17\xbf\xf8\xa9\x1dm7i\x14\xbfI\x19W\xd48\xc1\x16\xbf\xd7\xd5\xdc\xbe\xc3\xe8\x13\xbf\xe56\xe0!\xe6\x8f\x13\xbf\xcd\xfd\xaf\x9d\xb5\xba\x15\xbf\xde\x10\x8c\xa9\x01\xd5\x13\xbf\x88p\xb5U\xf1\x81\x14\xbf\xb1\xf0.@\x84;\x16\xbf\xcezR\xbf&8\x18\xbf\x81]}\xb9\x81j\x16\xbf\xa1H\xa9\x8f&\xe9\x15\xbf8\xe4\xc2%\x8b\x80\x15\xbf\xb6:\xb7vF\x8c\x16\xbfD\xfc\xe3g\xb8\x9b\x15\xbf\xc0\xac\xc2\xb0\xad\x92\xf3>Xl\x88\xecR\xf9\xe3\xbe\x0e\xc8\xd6_>\x98\xe4>\xa4\xfb1>\x89\x95\xd3\xbe\x98\x94\xd7f\x87J\xe1\xbe\xd3\xc7%\xb4O\xe5\xdf>x\xb4F\xc8\xb8\x9f\xc6>R|\x8a\x03\xa2.\x8b>J\xc2\xf8\xcf\xdd\x05\xd7>i\xe1\x05<\xd5p\xf6>\xffu[\xaf\xe4}\xca>\xd7\xd77\xf0\xc9O\xe0>\xb1\x9d)p\x8b\xa9\xbb>\x8a?\xc0\x99;\x14\xdb>\x91\xdf\x9f\\\xaa\n\xd2>\xa9\xa0\xb4\tA\x0f\xf6\xbe\xc7\x1c\xa6\xfe)\x19\xf8\xbe\x1fY\x94\xe6s\xde\xf3\xbe;=>\x90d\x19\xf6\xbeCDu\xcc\x9d<\xfe\xbes\xc2N\xcd\x15\xc2\xf3\xbe\xaci\x14}\x85\x05\xf1\xbe\x17\xf3D{\xfbU\xee\xbe!\x87\x00\xab\xfa;\xf1\xbe,\xf0\x11\x0b\xf6\x1a\xf4\xbe\x11S\x0f\xeb"$\xf1\xbe\xb0\x14;\xf7\xfe\xbd\xf1\xbe\xbf#\xae\x08\x88\x04\xf3\xbe^\x92\x15\n\x14\t\xf2\xbe\x80\x07\xa1\xd5\xe4t\xf4\xbe\xfb{"\x812L;?)\xbbW"\xac\xd28?:;\x93\n\xbd\x918?\xa9[\xf9\xcc\xfby8?\xfa\xf1\x11\xc9\xaf\xc17?\x9a4\xf1@\x19\x9a8?\xe1O\x16\x7f\x91\xe97?c\xb0|qbs8?\x7f\x0c\xdbHs\x198?\x11V\x82Q\x91h8?\xfa\xea\xbc\x9c<W8?\xe8-\xb4K\xf7\xf57?1e\xe7\x0b\xf2\x908?x\xb9\xee\xf1\x9bY8?\xbe\xf0~=\xaew8?\x80\xe0\xe2\xe8\xe3\x81\xf7>\xaf\xd1\x01L\xb7}\xf7>\x12y\x07V c\xf4>\x8f!q\x88\xb3>\xf7>\xff\xd0\x12Z\xc0\x0c\x0e?\xa52&\x9e\xbb\xb9\xf4>\xe3\x05\xf1\xe2\xda5\x05?\xfb\x04>\xbdg\xf7\xf4>d\xe7an\xfc\xd4\xfc>\'\xe0\x03\xb2b?\xef>\x1e\x8ckyhG\xf4>,\x909C\x94\xfc\xe4>{Z\x86\xbcJi\xfd>\x93@\xaf\x11 \xee\xf5>\x01C\x90\xa6\x06\xdc\xfb>\xc8\xefoYR\x8e\xf0>\xb0h`\x0ex\xf4\xe8>3\x8aKl\x90]\xef>~\x1c\r\xed\x9b\x8f\xed>\x7f\x18&\x17\xd3U\xed>\x97\xdf\x8c^\x84\xce\xef>\x93 \xa0wY\xb3\x13?\xfa\x9b\xe1C\x9c\xae\xec>\xc0\xee\x8e|\'\x84\xed>\x93\xe6o\xeb\xab\xe5\xf0>w/\xf2\xb0\xac\x17\xed>\x89\xb0\xaab\xbek\xf1>\xa9:"d\x82\xbc\xec>\xb7\xae\xfcs\xdc\xbe\xee>z\xc0(\xa5\xb2\xbf\xee>1\xdb\xf3Y\xc9\x05\xeb\xbe\x15^=\x8f3\x89\xc8\xbe\xbc\x8e\xc8\x82V\xed\xf0\xbe\xd7\x0c\xf5#}`\xcb\xbe{\xe2\x7f\'\\\x9b\x95>s\xb9i\xff[D\xea\xbe\xdc\xe1&\xc8\xf7\xb7\xd2\xbe\xce\xc9\n\xfc\xf9X\xd1\xbe\xfdh\xd7p9\xb8\xe0\xbe\xd5\xba\x8f\xbc\xd5\x18\xf3\xbe\x962\n=\x88\x0b\xe2\xbe\xf8S\x90\x06k\xe2\xea\xbe\xc2Y\xfb]z\xf2\xe0\xbe_|\x14\xd8{\x9f\xe4\xbezZ\xc6\t\x16\xf9\xe8\xbe\xda\x9a\xe8\x08V\xde\x00?\x01M-`\xce\xb7\xf5\xbe\x17\xd3\x85\xd0\xd8\x00\xf8\xbe\xf0n\x00\xed\xb6\x00\xf9\xbe\xc4\n\xef\xac\xd2\xbc\xf4\xbe\xdc\xa0\t\xa9\x96\xaa\xf8\xbew5\xf2rmu\xf7\xbe:\x9b\xb74~~\xf2\xbe\xf8\xb4*]\x96\xf7\xf5\xbe\xec\xa6\xc4\x1bJ\x10\xf9\xbe\xdb\xe5\x87F>\x19\xf8\xbep\xf3\xe6\xbcGm\xf8\xbe\x17\x16\xb5\x12\x02H\xf6\xbe\xd6V\xa8\xda\xcf^\xf9\xbe\xe5\x99\xa1\xa1\xb9\xf3\xe8\xbeZ\x81\xe2\xfdA\x06\xfe>QP\xc7U\x81h\xfc>\x88\xb0Y\x7fn\xd0\xfc>\xdcu \xf6#@\x01?V`\xc7\x00\xa9\xa4\xfd>\x99\xb6\xf5\x95x\x12\x01?R\x8a5\x0fG\xfe\xfd>\xed\xee\xdb\xc05\xcd\xfc>\xffVD\xaf\xe2\x8e\xfe>\x12\xb8n\x18\xec\x0c\xfd>\xd7c7v\x87\xa0\xfb>\xccC\x17>L\xd5\xfd>w\x8ao\x98\xdcU\xfd>\xdb[\xc7`i%\xff>\x00c\x9f`\x00\xf0\xfe>E\xd1\x9a\xf9\x8f\xdd\xbb>\xb1\x0c\x1b\x8b\xdeq\xe9>\xa7C\xd6\x8d\xf6\xb2\xed>#h\xd3+\xd7\xc5\xf0>a\xa1\xeb\xe52\xff\xea>\x0e\xc8A\xa0\x97\xba\xf0>\xda\x853\xbf\x19i\xeb>\n\x16\x92\xd5\x9f>\xf2>`\xba\xca\xbct\xd9\xee>i\x9e1\xb8\xff\xd7\xed>\xa4\x90R\xa4\x97O\xed>\x8c\x19\x84\xf4$\xc6\xee>\xe8ii}\x9d\xda\xec>q]\xbf\x05[\xfb\xef>\xe0V\xc6\xe5\n\x90\xe8>a\x14f\x084\xec\x1c?\xb5k\xa5\xeb\x94B\x04?\xdb\xeb\x84\xbe\x0c\xa8\x18?\xb8\x9b\x1c\x15\xea\xfa\x15?\xa7$\xe5\xed\xac4\x01?>\x1f\xe4\x92\rs\x1c?\x83\xb8\xbe\xc5\xaao\x0b?\x0c{\x1an\xc2W\x10?\xf3dC\xfb:\t\x17?\x05\x13\x7f\xa7>\xd1 ?3\x89\x0b\xf4F\xb9\x18?{\x9c\x03"\xc9\xf8\x16?(*\x7f\xd2\xac\x94\x0e?\x01\xc2\xe9/\x9d(\x18?L?\xa3\xe9O\xb7\x13?\xa4\x81\xa3\x03k\xba\xc1\xbe\x0e1\xaf\xf7\xb7O\x01?\xf6\xe6\xe1P\x83\xfe\x9f> *\xf9\x02\xad"\xf0>\xc8\x10O<\x9a\xd0\x02?u\x12\xe1\xe7\xdd\xab\xe3\xbe\xc5\x8d\xb5\xda\xb0\xf3\xf8>L\xeb\x8d\x00\x12\x18\xf0>\xd7\x89\xb6\x89\xcev\xc7>Wu\xc2\xc7;\xaf\xf1\xbe\xe1\x92t\xd4%6\x94\xbev\x82"\xc3\xfcm\xc2>\xcf\xf2f\x16f\x91\xf5>H/Q\xe9\xa9\xc9\xa2>5*:Dh\x12\xe6>\xa0O\r \xc9\xde\xd4\xbe\x16\xfdh\xe0\x82\xe5\xf8\xbe)m\x18\xe0\xd6\x19\xee\xbe\x92\n\xce\x10UM\xec\xbe\xc5\xc7\x94\xf2\x98\x90\xe0\xbelCL\x16\xbc\xf5\xec\xbe\xea\x11\xfe\x0f\x8b\x13\xf1\xbe{\xd2\xa1\xbdO\'v>\xa4\xd2L\xc9\xc4W\x93>\xcc\xa3=\x07gQ\xf4\xbe\xbf\x14\xec\x9d\xe6h\xe4\xbe\xdaA\x0c`\x81\xed\xe9\xbe\'\xd0\xb8\x87\xf46\xeb\xbeS\x13\x8f9A-\xd3\xbe\xe5\xe2\xaf\xf7\xc9\xf3\xd3\xbe\xfe\xf0$\x1b\xc1<;\xbf0\xa5m\xeb\xca\xf41\xbf\xd1]\\,-\xbf7\xbfL\x17#\xca\x83\x076\xbf\x0f\xb1\xb5\xbekW1\xbf\xa0\x89\xf7\x11\xe3\x879\xbf\xf7q\xbb\x9e\t\xa23\xbf\xa7\x08V%}&4\xbfl\xf0\xd2\xdcJ\x027\xbf\xed\xc3#\x02\xd5a;\xbf\x0e\xf6\xf1\x17\x8bl7\xbf\xcf\x9f\x08R\n\x077\xbf\x15/Z\xea\xd3\xe63\xbf\x98\xdc\xdfx\x84\xa47\xbf~K\xd1W*l6\xbf\xc1F\xfc\xef\x99b\xc4>\xb0\xf6\xbc\xa6J\xfe\xde\xbe\x81\x0f5\xe4\xea\xff\xe6>1\xc9U\xe8\xbf\xf1\xc3\xbe\x1f\xa4\xb3\x87\xd8\x0f\xe4\xbe\xedA\x9c\xa4\xa2A\xee>\x0e\xbe\xf0\x97\xe6\x90\xc0\xbeR\xf6H\xef\t\x9e\xa4>\xf4\x1b\xe7\xa7\xedc\xe4>1{r\xe3\xd5\xa7\xf7>\xa0\x93Tl\x08&\xe9>\x0c\xdbZ\x85;\xd9\xe3>>d\xf0q\x91w\x9f>\x87\xd5]\xb6\xcb\xbb\xe5>\xd8@#\xa2?r\xd3>\xe1\x93\x90\xaa\xcaMp\xbf\x11Cidc\x8ep\xbf\x1c\x8d\xc5o\xc4ip\xbfI\xbf\x95 U\x93p\xbf\x0e\x8e\x92\xbaK\x92p\xbf\xa9=\x97\xe2\x03\\p\xbf\xa1\xb8Q<V\x84p\xbf\x9a\xe1L\x8f\x85\x82p\xbf\xbe\x19\x18\x88Vfp\xbf:\xbar\xe4\xacIp\xbf\xbf\xdd\x1cD\xeejp\xbf\xff\x8a%6\x10op\xbf<$\xb4\x9d\x96\x83p\xbf\x0c_c\xd4\x05hp\xbf\xcf\xe0T>\xdcnp\xbf\x80v`\xf3\xfc\xd9\xfc>n\x91\x8d\x92F:\xce>9\xad2\xd5+X\xe3>\xeb\x8a\xfb\xb69\x91\xd3>\xa1\x7f\xdd\x8e,\xcb\xd2\xbeH|39\x00\xc8\xf1>\x05\\l\x17\xd2\x96\xba\xbe9\xf8*\xeef\x17\xd4>`\xadH\xa4\xa5\xb8\xe4>\xff<\x9d\xf8\x8b\xf4\xf2>\xec\x82(\x1e\xfdY\xe5>\xde\xc6\xa8M\x82n\xd5>\x9b\xdb\xc7<\xab"\xd3>n\xce\x03\xb51\r\xe4>\xd2&\x1b\xed\xea\xe0\xe4>C\xf95J\xa8\r\xcf\xbe\xbf\xc5O\xd9jd\xe7\xbe\x9c\x97]\xad>\xb4\xe2\xbe\xa5\x8c^z\x03\x14\xf1\xbej \xad\xe3\xe4\xd9\xd4\xbe\x9a\x92C\x9c\xa0$\xeb\xbe\xcc\xb4B\xa6%\x9b\xea\xbe\x1f\xd7DBv\xc8\xea\xbe\xa8\n\x9e\x13\xf7\x7f\xec\xbe\xa7\xff\xd2\xc2\x1d\xa6\xeb\xbe\x1e\xf2wg\xf7J\xeb\xbe\xa5\xd9\xdb\x03\x8d]\xe5\xbe\r\x83}\x18\xd1a\xe7\xbe\x1c\x9b\xe31\x9ax\xe9\xbe\xb3\xd1\xbf\xd7T\xd9\xe8\xbe\x1bKW\x19vyr?-\x87\x91\xde~\x89t?\xf1\x14\x8b\x86#?s?]\x89\x86\xa3<\xb9s?\x1e\x9e1\xcc\x02\xa9t?\x89\x907O\xa5\xd4r?\xa7IT\t\x98\'t?\xd7\xa0vM!\x03t?\xb3<-!\xe9is?\xf7Qy9\x12dr?\x9723\x0eG<s?D\xa9\n\xb0\x02^s?It\x86\t\x15\x0ft?\xe8O\x81\xa7;2s?)\xff\xd7\x05\xf5\x8bs?\xfa8\xb1!\xd2d&\xbfQ\xa8\x15[\xfb\x9f&\xbf\xb5\x9cC\x19\xbe\xaa&\xbf\xe4\xcbS\xcc\xa5\xa9&\xbf\x1b\x03\xa1\xf3J\x91&\xbf\xd6\xe6\xb2*6\xab&\xbf\xdb\x81\xd8$\xb5\'&\xbfo\xd4ls\xe3\x80&\xbf8r+K\xb4\x1b&\xbf\x8a\xb6\xac3=\xd5\'\xbf\x9c\xaf4\x94\x1c\xca&\xbf\xca\xb3\xfb4\x1c\xa8&\xbfrZ\xee\xee\xf7\xc9&\xbf\xbf\xa8\xc9\xa3\x00\x7f&\xbf\xa3\xfe\xd4\xc3\xbc\\&\xbf~\xd0Q\x9c9fy\xbf>VC\xa0\xc3ly\xbf.B\xb7\x18\xc5ly\xbf\t6o\xf5\x01ey\xbf\xf55\xa7\xf9\x83fy\xbfh\x98\xb3S\x01\x7fy\xbfu~MB\xc4cy\xbf\xf3@\x92\xa0?fy\xbf\x15\xe9\xd7\x86qjy\xbf_Xcbj`y\xbf\xb1\x97\xaeZEYy\xbf\xee\xc7\xde\xdc\xa9~y\xbf\x10J\xce\x10\x0ely\xbf!`\xa9W\x01iy\xbf\x7fN\x80\xb1lby\xbfI\x8a\t:M0v\xbf\xad\x17\x8e\x1c\x8e,v\xbf\xfb\xe6\xfa\xfb\x112v\xbf\xb6\x86\xa8\x0e\x07\'v\xbf\xa5EG\xb3\xdf,v\xbfW\xbc\xfa\x05\xde,v\xbf\xecf\x15&=4v\xbf\xea5\x9b\xa7-4v\xbf.9j\x04\xe53v\xbf\x05\xd7\xb5\xd0c2v\xbf\xda\x88\xf8\x89r2v\xbf\xadO\xbd\xf3\xf16v\xbf\xac\x95Z\x9f\xd6/v\xbf\x0f\x18R6\x042v\xbf\xfc\xa6>\x9f\xa33v\xbf3X\xc4\x049\x0b\xea>\xae\xb5\n3/\xe0\xb6\xbe\xcc\xceF\x84\xe4J\xe9>I\xbbg\xb9T\xe2\xcf>\xe9g\xcb\xb4\xdf\x99\xcd>\x00\xc9\x08\xa3\x19\xf0\xe9>\xe7\xde\x90\x0e\xb98\xd3>L\xe3\xbb&rM\xe1>\xe6\xfd\x8b$\x00\x0f\xf3>\xefo\xeb\x038\x8d\xf3>\xa7\xa7\x9c\x94\x0c\x99\xe6>\x0eYb\x9cn,\xe4>\xe1\x189\x12\xb5\x19\xe0>\xd6\x8e\xea\xd1\xc8A\xea>\x83\x12\xff\xaf\xbdq\xe4>\xb2\xa3q<\x9b\xe3\x18\xbf\xb3\xf6|\x8bj\x02\x15\xbfi\xbc\xf5Z\'n\x18\xbf\xa8\xf5\x1c\xc7#[\x15\xbf^\xc5\xf77\x06\xb3\x14\xbf\xdc58\x83\xf0a\x18\xbf\x8fH;\x04\xb1\xfa\x15\xbfw\xca\xc4\x16\xd4H\x16\xbf\\3\x01Lz\xc3\x16\xbf\x9f\xf7h\x10a\xc6\x19\xbfm\xb8\xcb\x1c\xf98\x18\xbfU\x85f\xeb,\xae\x18\xbfZ\x9f\xf9\x90b\x7f\x16\xbf\xe3\x96M\x05\xa0\xba\x17\xbf\xe0\x83`\x0fFR\x17\xbf\x8d\xde\xda\xc2\xe1oC?\xc0\xb5\xce\x1d\xbb\x0bB?\xc2\x80\xad\x7f\xb3\xdeB?n\xde\xe1\xb7H\xcdA?gs#L\xba\xf7A?H\x0c0>O\rC?GKA\xdd\x15UB?UX\x1b\xb6TcB??\xba\xfa{\x94\xcbB?\xe1\x0fX`fcC?\x02\xd0\n\xe3\xe8\xceB?\xccU\'\xc6\xd3\xb8B?\x9f\xb4!\xa4h\x92B?\x9b\x07\x94v\xf4\xd3B?<\xa0\xdf\xff\xef\xbbB?*\xf8\xab\xdc\x88\x1a[?v`\x02L\n![?\tU\xd7wy\x19[?VLP\xb4]$[?<W\xc5_\x07\x1f[?%\x1aH\x1d)\x1c[?\xe5\x0e\xc9^x\x1a[?\\\xc7+\xd7\xae\x19[?n\xcd\xf5\xda7\x19[?D\x15\xdat\x83\x1c[?\xd6\xc7\xc1!f\x1a[?\x89\x9dZ,\xf1\x1a[?7\xdc\xcag\xe7\x13[?\xa8\x9e\xb5C\x90#[?vQ\xff\xd0\x9d\x18[?\x92\xe4<\x98\xd2.\x04?d\xe3f9\xcf1\x04?\xef\xa5?\xdb\x89.\x04?\x95\x18G;\xfc\x08\x04?\x11\x0c_l\xff\r\x04?\x83\xa8\xcb\x08t\x1f\x04?\xc3\xd1\x7f\xa7\x1c\x15\x04?q\x80\x16C>1\x04?Z\xd1\x86\xb0\x9bP\x04?/\xfcRF\xd6A\x04?\xc5\x07\xa4(\x8b\x16\x04?\xa3\xaf\xadf\x92\x03\x05?w\xcaBo\xac\x1e\x04?\x88:\xf5\x05\xac/\x04?\x9a\x10\xea\x07\x9e>\x04?H?/Iy`\xed>\'\xb8Ot\xc3\\\xea\xbe\xa1\xd9\xc9\x1eN\x19\xdc>\xc4\xe83\xe1\x11\xd9\xd6\xbeNi\xb0i\x1d"\xea\xbe\xa2\x8e<w\x00J\xe4>\xe9`\x01\xb0"\xed\xe3\xbe\x0e\xb4\x89K\xbaS\xc3\xbe\x8cm\xb5\x96\x02o\xe8>\x9a\xccG^,!\xf1>\xc3\xbbE\xf8\xce\xc2\xc6>$7>gU\xd0\xfc>\xcf\xbe\xb0\x97v6\xc3\xbe\x05\xca\xc4$\x14\x06\xd9>Cn\x01+[z\xc0>_\xe5<\xb0\xd9\xfb\xf5\xbex\xd0\xfby\x9c?\xc8\xbeUj\x99\x85\x94\xf6\xda\xbe\xe5NZ`N\x88\xd7\xbe\x97\xcc5\xe6\xd0\x1c\xc0>\xe7\xff\xe9\xd0\x99\xff\xf8\xbed\xd7SL7X\xca>\xe8\xcd_T\xe5l\xd5\xbe\xbb\xd7yV\xf66\xef\xber\xdd\xd1v\xd7\'\xf8\xbe\x1e\x16\xd2\xfa\x1c&\xe4\xbe\x05\xd5fk\x88\x13\xd0\xbe$\x02\xd2o\xe9\xad\xcc\xbe5\xa0ok3n\xed\xbe\x0c\x91\x83\x139\xa7\xe7\xbe\xc8\x84;\xb8/\x824?\x91o\xb0\xee\x84S3?gZ\x1d\xbb8\xf2&?\xbc\x89\xb2 V\x802?\x88zE\x85\xea?2?\xa9\x81\x8b\xca\'\x165?\xfe7\x07\xdf\xd6\xda+?<\xcf8\x92\xac\xbb2?\xcd\xd4\xd9d\xf7q9?\x1e\xb1\x03\x0e\x92\x93)?\xba\xa3o\n\x9b@-?$\x96\x81R\xcc\x03?\xbf\xb5Z_\xbf4\xa4,?\x9fAguC\xd34?x\x04~\x81\xc8\x894?\xd4\x0e\xaa\xdc\xb4\x15\x14?)\xb2\x07X\xe4\x81\x17?\xcf\x95D\xea[\xd9\x15?\x87:\x1d(\xf5\x98\x18?\x8ad\xde\xc9\xd5\xb7\x17?\xa8\x16i\x8a<W\x15?\xa9DJ\xe6\xfd\x9b\x17?2\x00w\xe9k\x05\x16?\xe0\xe6\xce\xad\'\x16\x1c?\xa5\n\xfa\xe0\x84M\x14?\xc9b\xf6\xc6>\x1e\x15?\x00Qr\x8f}\x7f\x1a?\x1fh\x1d\x02\xdag\x18?\xf1\t\xf5W\x14>\x15?\xa9,\x8b\xcb\x85\x89\x15?^\x88\x15\xab\xd3wP\xbf7n\xfd\x0e\x0bJO\xbf\xfe\x82M\xb6\xfc%P\xbf9\x10\xcdg}\xdcN\xbf\x95\xdb\xa78\x0c\xebN\xbfCc\xc1\xc1\x7f4P\xbf\x10\xbdM\xcd\xf4\xbfO\xbf)W\x9dl\xd2\x9bO\xbf\xb8zavc\x10P\xbf\xf5iu_\xe9\x8cP\xbfo\\I\xf1\x97\x1fP\xbf\'\xf6\xa7\xd9\xa5\x9dO\xbf\xf3\xae\'--(P\xbf\x85\xf2@\x994$P\xbf\x8b\xb4{\x13\x8c\x0fP\xbf\x88\x1e\xf4\xf9F:\xf0\xbeHE2\xcf\xf6f\xe3\xbe\xf8\x8e\x02\x95\x84\xb6\x13\xbfn.\x8f\x00S\x87\xfc\xbe~\'S%A\xfd\xfb\xbe\'o2\\\xd49\xdc\xbeX\x9cI\xa2#\x98\x0b\xbfh\n*\xc0w\x07\xf9\xbe\xd7\xd7y\x89\xfaS\xef>\x93\xaf\x92#\xda\x07\r\xbfI2N\xea\x0b\x86\t\xbf\r\xaf\xfc\x93\xd0\xfb4\xbf-\xbfr\xf1\xb6i\n\xbf\x9fF\x12\x91\x04\x8c\xf4\xbe\xa3\xee\xda\x84n\xff\xf1\xbeEv\xed\x87\x7f\xd1.?P\x1c\xe3\xf0\x82P+?v\xc3\xfc\x0c)\xf8,?)\xa9\x00\xeb]J+?\x0cB\xa3\x15z\xda*?\xca\xde\xc0Z`\xa2-?7fS\xf8(\xe1+?h\x9e8\xbc6\xb3,?\x96\xfaN:\xa4c-?AW\xb0\x07Q\xcd.?\x8e\xd5\xa7Xuv-?\x12\x18o\x02\xa7\x11-? \xfa\xe1e\xbf\xee+?\x9aO\x1ez[\x15-?\xd6\xdayJ\xd1\x13-?Q.F\x8e\xc0\x88\x0f\xbf\x80\xd3\x84\xc6=@\x10\xbfheO \xc6\xf4\x12\xbf\xc2f\x8b\xfd\xb6\x88\x11\xbf\xc8\x98\x01\x8a\xc9N\x11\xbf\x18B\xcf\xa2T\x06\r\xbf\xf9Z\x08\xdem\xec\x11\xbf\xaa\xca\xcc[\x98^\x11\xbfy{\xe0\xb4\xf6h\x10\xbf\xdd\x92\x1a\xb0r\xc6\x11\xbf\xfb\xad\n\xb0\x18\x90\x11\xbf\x0e4I\xd1M\xca\x18\xbfl\xa5\xc0\xee^\xb6\x11\xbf\xeb\x8a\x95P\xa2\xd7\x10\xbfD\xb1*\xe0\xd4\xd1\x10\xbf\xcf\x0f+0\xf3I\x00?U\xfcMY{\x1b\xd5>\n\x88s\x14\xf2\x7f\xfa>\xc3\xedS\xad\xea$\xe0\xbe\xcb\n\xb2y\x86)\xd0>\xe3\xf8ez\x03\xc8\xfc>\x97\x02\r\xbd\xf2\x99\xca>\xd8\x06\x11\x82\x0eX\xec>e\x08\x8b\'\xb5\xc1\xf6>\xcc\xf3p\x04\xd2!\x06?\x10f\xb2\x1b\x06%\xee>\xe5.Z/\x84\x90\x11?\xfe\xee^+\x8c\x92\xed>\xa9\xe7\xceSN\x90\xf8>\xfb\x94\xe8\xad\xf5E\xf7>\x17\x197\xad\xfe\x17\x14?2I\xa8\xf7\x0f\xe0\x11?\xc5\xb5|G_\x1c\x13?\xa8\xee\x03>}*\x12?\x12pi\x12\x88\x8f\x11?\xdfE\xd7\xb8\x94\xd1\x14?8\xe9\x0e\xe1\x90\xc7\x11?\x9a\xf7\xeez\xfb\x8f\x11?;\xb7\xde|2\xc9\x11?\x18c=\xb2\xb5\x8c\x13?\x95\xbd\xbc\xf7g\x06\x13?\xa4)|2?\x13\x17?\x85\xd7vzo\xb8\x12?uU\xc0\xad\x95\x8e\x12?\xbc\x86\xf8xJU\x12?\xcab\xd8y>\x8b\x04\xbfSV\xe5\t\xc9G\xfb\xbe.\xb2Z\x13$W\xf8\xbe\xf2\x93\xf6P>c\xfd\xbe\xb6\x9f>K\xact\xfa\xbe\t\x9c\x19\xdarq\x05\xbf\xe5\x0e\x166\xa0\xd2\xfa\xbex\xe2A|\xd9\xf1\xfb\xbe?\xcepjDk\x01\xbfm\x84P\xcb_\xa3\xfd\xbe6\xb7\x01\xf5\x990\xfc\xber\x85u\x19\xfd\xcf\x0b\xbf!Nr7\xc1\xc9\xfb\xbe>\xc0\xe0\x03\xa2\xcf\xfe\xbez\\\x88\x10\xf8F\xfd\xbe\xfag\xb8\x11\xfcV\xf6>l\xe3\x02\xb5\x0b\x84\xe2\xbe\xfa\xd3\xf8\xf9\x87\xf7\xe8>\x84_\x14\x01\xb6\xd8\xd0>\x91\xe8`p\x8c\r\xd9\xbe\x8a\xf7\x94\xe1v\xb1\xf1>\xa9\xaf\xc1-\xc0\x16\xc3>\x84\xc6I_.0\xd0>\xdcz\xd0\x1d\xc6\x12\xec>\xf5\xac\x1d\x87\x96\x82\xf2>\xa9\xc8]\xa0\x0eY\xe4>=R\xc45\x97\x9a\xf0>\x15\xf5\xb4\x8d\xaf \xd8>\'\xb1\xa1c\xc8\x0f\xe9>\xda\n\x98\xb3\x97\xb2\xe9>8w{\r\x19\xa3\xf4>\xfeAG\xba\x1b\xa8\xd2>\x8aM-\xb4\t\x14\xf1>\xe8\x8c\xb2\x1cMM\xe3>\xa9\xe3\xac\xbc\xb0\xf0\xce>u\xa3 \x893.\xf2>\xa7\xd65\x10\xa3_\xe2>\xd6\xcdc\xfd\xaf\xaa\xea>\xc7\\]\x90\x8d\r\xf0>>\xb23t\xdb\x1c\xf6>\xb6\x08\xf0\x81q"\xf0>\x12\xf8\xb8QYN\xf5>\xc3\x06\xde=%\xdc\xe4><\xdb\x93\xfc\x11\xb0\xed>\xbfI\xd87\xd4y\xeb>\x9a\x1c\xe4zk\r\xf1\xbe\n\x13\x04X\x01a\xef\xbe\\\rDhq\xfc\xf1\xbe\xac\x80D\x93\xe0C\xf6\xbe3\xe1\x98>j\x7f\xf1\xbe\xc9?Ls\xf1V\xf1\xbe!kH\xfb\x96\xed\xee\xbe\x82\xeaf\x03-N\xe1\xbe\xc8\x03\x806\x93;\xf1\xbeEi\xa3\xc6\xef\xc8\xf1\xben\x82\xb8]\xc9I\xda\xbe\xdcPz\xdc\xc4\x17\xf5\xbea6W\x8a?b\xef\xbez\xea\xa1!0\xc6\xf0\xbe\t+7r\xe4\x05\xf0\xbe\xf8P\xbc\xac[/\x91\xbf\x95\xb7I\x84\x16?\x91\xbf]DpTM \x91\xbf\x93\x92J\xc0{\'\x91\xbf\x8fN,C[&\x91\xbf\xac\xf2\x81$uM\x91\xbf-\x7f\x0f<\x94\x01\x91\xbf\xdaV+d\x97\x15\x91\xbf\xa3\x80\xb6j\x89.\x91\xbfl=-6\xe8\x11\x91\xbfa\xcb\xff\xb4\x17\xff\x90\xbf\xb1\x8d_\t\x0b\xfd\x90\xbf\xd1\xd4\x86V\xe3\x1b\x91\xbf(\xd9\xdcqK\xc0\x90\xbf\x8f%#\xb0\xdd\x14\x91\xbf\xf3u\xce\xe9\x8c\xdd\xeb>e\xbf\x9ah0b\xf0\xbeJ7\xf9\x8a\xb5\xaa\xc7>\xf6\xa1t@p\xbc\xd0\xbeN\xdd\xc1\x9aWt\xee\xbe\x809<\x0cj!\xe4>`K\xce\x82\xf5\xe6\xe8\xbe\x95\xa8\xff\xa0\x9dG\xe1\xbe2pg1\xf3m\xd6>?\xb4\xb4\xea\x0f\xc0\xf2>\\F#\x99\xf6w\xa2\xbeoa-9|o\xf2>x\x1a*\xc8L\xb9\xd1\xbej\x91\x1f\xb67\x03\xcf>\x15\xe4]=\x9c\xf6\xcc\xbe\xae\x85U\xa3\x98u\xeb\xbe9i\xd7\xe2\x84\xac\xe1\xbep\x89=\xf9sb\xe8\xbe~1\xb3_t\xf4\xf1\xbe1U7\\E\x98\xe5\xbe\x13\xf6SG\xc1O\xe8\xbeEa\xc2\x16\xffv\xe4\xbe\xac\xd1\x86\xe3A\xee\xe4\xbe\xd1^\xfd`^$\xe9\xbe2\xaa \x0399\xea\xbe\x05\xe5\x0e\x9d,\xb5\xe2\xbe\x8a\x13\xaeW\xd2S\xf2\xbeo\xc1\x0c\xb0x\t\xe4\xbe2\xc0\x1f\xcc\xf7\xce\xe7\xbe\x1e\xfd\x9d\xdb\xceE\xe7\xbe\xe4(\xa9\x97w\xb7\xf0>\xe8NEj\xdf\x7f\xfc\xbe\xa48e&[pw\xbe\x07\x06L\xe9\xaf\x80\xe2\xbe\x90>\xcc\xcb>\x8f\xf9\xbe\xe5v{T\xa6k\xeb>\xfa\x97(\xf7Os\xf7\xbe\xd7S\x8b\xf3\xe3\x87\xea\xbe{\xac2\xd3\xc0\xec\xc9\xbe\x88\xcd\xc0i\xe2S\xee>\x00/U\xa9\xfe\x8c\xd6\xbeRU\xfb\xaab\x07\xe5>\x13\xc9b\xab\xbc\x08\xe9\xbe):T\x848}\x97\xbe\x109\x0c\xe0!\xf0\xd8\xbe\x96\n\xf0;mD\xf1\xben\xa9\x9c\xf4\x8b\x01\xee\xbe8\xd1\xb2\x07\xcah\xec\xbe\xd1\xc0m\xe7\x113\xee\xbe\xc8\x16\x80O$\xa3\xe1\xbe\xd1\x18\xf6\x03\x12\xa7\xf1\xbe\x81\xd9\xf7\xc4\x12\xf0\xe1\xbe\xac\x80{&=j\xe6\xbe\x04\xf2C\xc0\x81\xd2\xed\xbe\xd8T\x12\xe2_\x83\xf0\xbe\x97\xe5\xdc\xcf(j\xe9\xbecK\x00\xec\xa8X\xee\xbe\x1e;\x85C%\x99\xe7\xbe\xcespF4<\xf0\xbe\xd22*T\x02\x02\xe9\xbe\xaaj[\x00\x80J\x07?S\x85\xc6\xe9E\x00\x06?\xd2\xfai\n=\xeb\x06?[\x93i0\x95&\x07?\xb1\xb1\xf6\xac\xa4k\x06?q\xad\x10\x90\xe3\xb8\x07?jW\xf2\x7f\xad(\x06?\xdal\xb2T\x93r\x06?\xb7\xdf&\xd8\xdf\xc9\x06?@:R\x1d\xc5=\x07?\xcdju\xe1\xdd\xcc\x06?[\r\xbbi\xafD\x07?j\x88\xeeeA\xa9\x06?\xadS$E\xc6\x1d\x07?\xc1\'\xb7b\xc9\xc3\x06?)\x06\xc5\xbd\x93\xe3\x1b\xbfeU\x16\x12,\xbf\x1b\xbf\xbc/\xbc\x0e\t3\x1c\xbfGo\xc6\x17\xcb\xa4\x1b\xbf\xd8\xf1\x1e\x98\xae\xd2\x1b\xbfP\x06\xd9\xa7\x9e&\x1c\xbf\'\x03\xbf\xd7&\x16\x1c\xbf\n\xbd\xdd\xa7\xceW\x1c\xbf\xfa\x87q;\xd1>\x1c\xbf\x93\xba\xbc`=\'\x1c\xbf\x1c\x9f\xc4h\xe6)\x1c\xbf\xb1\x06\xff\xb8(K\x1c\xbf\x9e\x99\x0b3\xa7\xfe\x1b\xbf\x83\xdb\xa0D\xcc\x11\x1c\xbf\xf7k\x8ca\xc8\x16\x1c\xbf\x9b\x10\xb3\x07l\xa0\xf2\xben\x9c\xdc\x15L}\xd8>I\xca\xfcz\x02\x1f\xe3\xbe\x88\x98\xa8r\x9b\x18\xe3\xbed\xae\x81\x9a\xb6=\xdf>\x84\x91\x11!\xa2\xf9\xe8\xbe\x9f\n\x11\xc2\x8bi\xd3>\xd2\xaf\x0c\xd7\x1d\xca\xfa\xbeeG\xe6<w\x1c\xe2\xbe\xa99g-\x02\x0f\xf3\xbe\x8c\xb3d\xe3:j\xd2\xbed\x1d\x9c\xc8\x85\xdc\xf2\xbe\x8f\x0c\xd3]\x0f)\xe2>\xdc}T\xfb\xa4\xc5\xdf\xbe\xb1\xaaW\x1e\x98\x04\xde\xbeW`\x10\xbcz\x8f\xea\xbe=\x94m2\xcb\xd3\xe3\xbe\xb3n_\x9fL\xda\xe7\xbeQI\x10\xb2k\xd1\xf2\xbe\xb5\x19A\x16\xe5\x92\xe9\xbe\x1b\xe8\x08\xd5\xf1\x00\xe4\xbe\xfa\x13\xd5\xd5\xb6\xc0\xe5\xbea\x9dB\xcb\xa1b\xe6\xbe\n\x864\xf1\xd9\x1e\xe8\xbe\xe1SoG\x02\x8b\xe7\xbe6\xc8}\xc9n\xf0\xe2\xbeq]\xb8\xfb\xe7\xaf\xef\xbe>\x1e~\x1aP\x12\xe4\xbe^\x1c\xdc\x9c\xaac\xe6\xbe@\x1aE--\x91\xe7\xbe\xbd\xf6\x8a11\xe30?\xe8e\xa9\xc4w\x151?U\xd9\\\xa7\xce\x191?\xf2\xaeYm9\x0b1?\xc5\x1c\\\x08\xe2\xc50?\xb3b\xf5\xee{\x131?Gm\xfa!x&1?\xac:\x0e\xefA\x069?\xea1R\xf0h\x121?h\x1d\xca-\xf1\x0e1?_.\x13\x19N\x9e0?A\x17by\x91\x191?\x8de\xc7\xdc\x9f\xac0?\xc8t\xd6\xb5z\xa21?\x06 \x80\xd5\xf4\x0f1?(\xcc\xd0\xecz\x0e\xfb\xbeW\xe6\xae\xd4\xb1F\xf9\xbe\xf6\xe5\xb9I\xd9\x16\xfa\xbe|/c\x98\xd5\x7f\xfb\xbe\xbf\xac`\xda%"\xf9\xbe{$\xe0\xc5\xcf\xad\xf7\xbe\\u\xe9\x0c<~\xf9\xbe*5R]\xd1&\xf9\xbe6\x8e\x9f\xd1A6\xfa\xbe3\x15F@\t\x94\xfa\xbe\x13(=\xc9\'\x9a\xf9\xbevF9W\xc4\xef\xfa\xbe\x9c\xd7\xfc\x8a\x1f\xf2\xf8\xbe\xc7\x02\x11z\x16\xdd\xf8\xbe\x9a\xb2\x81\xb0\xb8+\xfa\xbe\xb6\xe8\xc3\xcc\x1d\x07\x06\xbf\xdei`\xbb\t,\xfb\xbeE\x03$k\xc4v\x03\xbf\t\xbc\x9e\x13\x82z\xf5\xbe\xcc\xec\x03\xde\xc55\xf6\xbeM\x10\x06Qe\xa2\x05\xbf\xfaP\x84\xcd^\x82\xfe\xbe\x08\x91\x1f\xe7y3\x04\xbfS\xd8\xab\x8f*@\x04\xbf:Z\\\xed\xbb4\t\xbf\xee\xbc\xa45\xe1\xa5\x04\xbfn\n\xf1\xd8\xbc\x1a\x03\xbf\xb0/Lj\x91"\xf9\xbeE\xfb\xf8;3K\x00\xbf*#\xad\xf6\x990\x01\xbf\x9c\xbdG\x88\xe6W\xf1\xbe\xf2\xa4\x1dR\x0bx\xdb>\xa7\xa1\x1c\x0b1[\xe6\xbe.\xce\xf1\x99[\xec\xd4>\xcdp\x89+\x13\xff\x8c\xbe\xc5\xfd\x85\xc2\xc45\xf1\xbei\xe0\xc0O\xa1\xa5\xc2\xbeh\x11dU\x87\xf2\xc4>A\xdc\x1f\'\x8f\x8d\xe4\xbehE\x84\xa6w\x1a\xe1\xbe\xb8\n\xd6,\xcb\xc3\xdb\xbe\xd13s\x00\xcd\xe3\xec\xbe/\xf54\x9f\xf9\xa7\xc6\xbe!9f\xcc\xd3H\xe5\xbea\xf4k\x17\xf2d\xd8\xbe\xec\xfd`\xd9\xb1\xcb\xef>\xf0C\x8f\x0cS\xa2\xeb\xbeq\xb4\xd17d\xfb\xd9>\x12,\xa2\xbe\xc5%\xd7\xbe$\xb5:\xef\x12\x85\xee\xbe\xd5\xe7}\xcc#\x9c\xe0>#\x1bi\xe9\x9ff\xe4\xbeV\x95\xde\x99Jj\xd2\xbe6-p\x0fh\xf7\xd7>\xedp\xcf\xa5\xfe\xca\xf0>3\x1a\x90\x12\xf5\x97\xa8>\x1e\x07\x9f\xde\xee\xf9\xf4>,\x0fqQ5B\xda\xbe\x91\xf2W\xa4\xec\xcf\xd0>(\x84\xdc8\x9e\xef\xc0>>T\x1a:f\xeb\xfb>#~\x00\xcf\x83\x84\xf6>\x16r\x13r9\xc4\xf7>\xb2\xbe_\x873t\xf6>)\xf9\x02\x93>\x1f\xf6>\x92RdYM\xd1\xf8>\xf7K\xbf\xd8/\x17\xf5>_B\xa2\x90=f\xf7>d\xda.j.?\xf8>\t\xf6\xdab\x90\xde\xfa>\x1e\xb2\t\xe3\x8f\xfb\xf8>#~\xbf\xec\x08\x8b\xfa>\x174\xac\x87U\x00\xf6>\x84A4\xc1z\xac\xf7>\xa9\xd1?X$\xeb\xf6>L\xda\xad\x98#\xe1\x13?\xdax\xb7p^\x1e\x0f?\xdbv\x94@\xf4\xff\x11?\xe0\x1d? \xe5\x8a\x10?i\t\xb7\x94G\x9a\x11?h\xee\x93\xbb\xed\xf2\x10?<\\{\xa0ef\x12?\n\xaf\x00M#\xb0\r?\xeblKh\xfeH\x13?\xcd\x1d\x90\xde\xde\x99\x14?N\x02\x0e\x84\xad\xdd\x13?F.V\xee\x8f\xbe\x11?\xe8{\xc8j1\xc7\x11?Ds\x91\xfd\xf0\x1f\x12?\x95\xf2\xeb\xe1\xae\xbf\x11?\xfb\xd6\x82 \x9c1\x1d\xbf\x81v(\x8e\xed|\x1c\xbf\xd1\xc3)3\xf1\xc7\x1c\xbf\xcd\xdf\xb6\xb7\x9c\xb8\x1c\xbf\xb6\xd0\xf0u\xb0\x16\x1c\xbf`\xfe\x0f\xfb\x15\x02\x1d\xbf\xaa\xc3\xfdN6\x97!\xbfn\xd3\x19h\x01\x9c\x1f\xbf\x90I\xd7\'\xac?\x1d\xbf\xb6\xc3E\x82}\xd1\x06\xbfL\xd4D\x1a~"\x1d\xbf\xfbS\xcd\xd0.\xd0\x1b\xbf\xae\x00R6m\x1b\x1e\xbf\xb1M\xab\xb3\xfb\xc9\x1c\xbf\x92W]\xb0P\xb0\x1c\xbf\xe7W\xaf\x04\x12"U?`\xc006E\xd5R?/\xa2,\x03]\x00S?\xb3;\xdf9\x7f\xbbS?\x03\x81\xc9\xa3~\xacS?cv\x9e\xd8l\xdcU?\xa8V\xc2H\xf2\xa7S?\n\x80I?\xf5iS?rLis\xaa|T?b\xea\x92J:\x07S?\xcb\xd9\xd0\x0e\'\nT?\xd3\x94\xd7\'\xa4VS?\xa6\xb1\xfa\xba\xa99S?s\xff\x06\x15W\x9dS?\xf3]\x0eO\xe1\xe4S?\xac\xc7\x80\x1b}\x06\x02?\xd3\xdcT\xcf3\xa1\x18?\x917\xaa\xde\xef\x03\x05?W)\r\xdf\xb2\xab\x04?\x95\x918\x0e\x14\x95\x02?9N\x89\xc9sR\x03?`\xfa\xee\xd9n\xef\x07\xbfR&E\xc8\x1c(\xea\xbe\xfa\xd4C\x89\xd5F\x04?\xe8\xd8\xe6\x14\x15\xb92?\x7f\xaf\x97U\x03\xd8\x05?\x8a\xc3\xd7\xf4f\xf8\x10?P\x8d\xbf\x04Y\xff\xfa>\xcd\xc8(\xb62X\x05?\xfa\xb4\xd0<iT\x08?\xdb\x9c}\x82\x8df\xef>\xe1\xe4\xc8\xb9\x05\x9a\xfe\xbea\xad\xaeH\xcf\xdc\xb7>\xafZd\xabvP\xf2\xbe\xc3}Y\x81\x1dq\xfa\xbe_\xcf\x1b>\x00C\xd7>)\xbbj`\xc9\xf3\xf7\xbe-#\xd8\x18\xebD\xeb\xbe\xd7\xabK3\xa2\xef\xb6>s\xc7c\xf8\xed\xc0\xed>.\xb9\xd6j\xba\xce\xce\xbe\xd1\x81\x0e\x86u\x87\x01?\xc79\xa7\x05\x9bi\xef\xbe\xec\x86\xad\x86\xacD\xab\xbe\xe9\x1b\xab\x19\x9d\x06\xc8\xbe\x80\xdbg\x9b\x1d\xb4\xf2>\xc5\x9a\xe6\xa0\xea\xdd\xcc\xbeh\x05\x03+R\xb2\xe7>\xc8\xfcX\xc6\x9a7\xc5>w\x96\xb1\x18\x7f_\xd3\xbe\\Q\x1c\xe6\xb4\xa2\xee>\xe1\xa5?I\xc9)\xa5\xbes\xb5\xf8I\x0b\xb0\xc8>\xb2l\xfc\xf2\'\xcc\xe6>xP\xb1\xe7E^\xeb>\x17t\x9a\xee\x8e]\xe3>\xbb\x80\xf5\x96\xddV\xf3>$\x8a\xd3\xf3\xaeQ\xb6>H\xbbY\xa2\x04f\xe6>$@\x15@\xef\xe5\xd7>\xde\xed\x85M\xa6\xda\xcf\xbe\x12\xaf]u\xb0\xde\xd9\xbe)\xb0\xb2\xd4\xaa\x02\xb2\xbeQ\xbbX\xfc}\xba\xd0\xbeqg\xe0\xc0\x93,\xad>)\xf8\xb2\x96\xfcJx\xbe\x13pMY\xa0K\x03?\xc7\x00\xf7\xe9\x93\x01\xf4>H\xcd \xc6\xb4\xc0\x99\xbeg\xa6~\x1dk!\x1c\xbf\xf6\xa9\xe9}7\x92\xae\xbe\x0e3\x08\x03\x96\xcf\xf3\xbe\x1c\xd8\xdcV\x1bi\xd9>\xb8\xa8\xcb\x98\x0bY\x84>Q?\x86P\xb1;\xd1\xbe\xb1\xb1\xdd\xdd\x92s\xf1>\x93\x85\x04{>&\xde\xbe\x85\xdc\x9bC\x94]\xdb>\x07[l\x8c\xe5X\xc6>\xfe\xa8~|n\n\xe0\xbe\xfc\xa4\xbd\x1d\xd5C\xe8>\xc8\x88\xf9\xf3\xe64\xdc\xbe\\\xcb\xd0\xca\xa1\x83\xb3\xbe\x9cN\xf9h\x86\x99\xdb>X/\xf9\x07}\x83\xee>\x92\xe4\xf3\xcb\x05\x18\xce\xbe\xbb9[J~\xb9\xf3>\xe0\xa9\xd3_\xa32\xd4\xbe\xc7\xfe\xcf\x80\x92\x88\xd3>\xec\xcb\x1c+\xef\x9a\xce>\xb8\x15(\xe4\x06\x91N?\xb5TSBD\x1dM?\x12\xb3\xec\x0e\xa3\xfdM?\x0e\xa1\xc1\xabo\xf8L?\x1f\xee,\xef@\x15M?\x88`\xef\xa9\xf7(N?\xd2P1\xd4\xfcdM?\x8c\xf5\xbd\xaa\x8d\x82M?Qo\r\x93)\x03N?\xd7\x9e!F\xf1qN?;{\xe6\xf4\xfd\xf8M?\x9b\xb42\xea\xe7\xf0M?\xe0\xdf!P\xa3\x92M?g\x8f0\xe6\xa1\x04N?\xc0\x9d\x18\xfb\x0e\xefM?\xbe8\xe0\xa6\tC\x02?\xe0\xb4\xd9U\x91\x0c\xee>\x97\xf2\xf5E\xcc\xa2\xfe>\x9a\x86m"\xe2\x16\xf1>1\x1b\x02\x9c\xa8\x01\xed>\xd9\xc9\x92S\x82\xfe\xfe>Kl\x8d\xff\xfe\xbd\xf3>\xe4~\xbe\x06\x1b\xa3\xf5>\xc8\x98\x91\x10==\xfd>\xc3\xdfT\xd3X@\x03?Vv_\x05\x95\x8a\xfd>S\x8f\xe7\x8b\xb6\r\x00?\xc4\xf7\xf0\x84\xd5e\xf7>r\xf6n\x88\xee\x9b\xfd>\xa7\xf6\xbe\xe2\x88A\xfa>\x1c\x15\xad\x85?O\xf0>\xe7\x9fd\xfe&\xfc\xf6\xbe_t1\xc8\xe6\x06\xc6>\xe1\x10qr4\xf3\xeb\xbeUOB,\xcb4\xf6\xbeqx\xc4\xfa\x1c6\xdc>\xfbD\x97J\x147\xf3\xbe3>\xe8\x15\xf2\xf8\xe8\xbel\xb9\x8c*\xa0\xac\xb2>U\xbb\x05h\xea\xec\xef>O\xb6\x17\xb4\xd2\xb6\xc7\xbe\\\x96?\xc4\x16S\xf1>@FF\xf4\r\xc5\xe7\xbe\xf6\xd8\x87\x1eF\x85h\xbe\x15|\xd27\xa80\xc0\xbe\x9fUH\xce|\xce\xf2>\xda\xe6u\x01\x8e\x1b\xf2>\x98\xd8c\x18C\xb2\xeb><d\xeb\xd0\x15\x0f\xf4>\xbc\xa2B\xc1\x82>\xf2>s\xfab\xa3\xc2\xc1\xf1>\x8d\xab,\xd1\xb3N\xef>\x91\xa4\xe1a0\xda\xee>\x8e\xdb\x94`\\#\xf1>\xc06~+\xdey\xf0> \x16\xbdR\x82i\xf3>\xba\xba\x87O\xb8\x15\xf2>M\xee\x9e\xc6\x06[\xf1>\xf9\xf7\xf9\xd8\x0bp\xf1>\x18E\xf4\xa4\x8c\xe4\xf1>\xd06\xec;s\xbc\xfe\xbe\xd3\x98.\x1eVF\xfb\xbe\xeek\'x~\xcd\xfc\xbe\x07\x9eg\xd6\x8fn\xfb\xbe$\xc5\xb9!\x80\x81\xfc\xbeJ\xdb\xd7ej6\xfe\xbeU\xcc\xad \xa8\x02\xfe\xbe\x9b\x80\xac\xb8lv\xfd\xbe.\xa3n\xc3\x0b4\xfc\xbe\x8e\xe2\x19\xfe"\x9a\xf4\xbe`\xcd0\xf8\x11Q\xfb\xbe\'\xe9\xa1vi6\xfe\xbe\x9cX\xa8]\x05\x82\xfc\xbe\xd5\x15\xf4\\\x86\x1d\xfe\xbe\xb7\xbd\xea\xe2\xbb\xb2\xfd\xbeI\xfeW\x7f|\x86\xed\xbe%\xc8\x9f1\xe3\x95\xd5\xbe3\xa6\xb9\xfdc4\xea\xbe\xf3\x0fw\xc1\x81\xf6\xcf\xbe\'\xd8\xbcT\xe7]\xd4\xbe\xa9\t\xb2zj\x0c\xeb\xbe\xcf\xd2SL\xd1i\xd6\xbe\xa1\x96\xe0\xbdO\xd5\xdb\xbe\x1b\x85\xef\x0f(\x81\xe3\xbe\x81\x91\x85r\xe1\x9a\xf9\xbe\r\'\xf7\x8a54\xdf\xbeD\xbb\x19\x81%n\xeb\xbe\x7f\x10\xb5\x9db\xeb\xdd\xbe\xf8h\xec\xf6\xfcL\xd1>\xb2"\x87U\x9aS\xe7\xbe\x9b\x1a\xf5g}\xf7t\xbf\xbbz)1!Ww\xbf\xefD"\xbdb\xd8u\xbf#\x8e\x8a\xe6\xc6\x8dw\xbf\xb5t\x16zJzw\xbf\x87v\xf3sbuu\xbf\xb2\xd4\xcc\xdd\xc0\x08w\xbf\x03g+\x06\x81\xb9v\xbf\xa8k\xa5\xa7\x9c\xf1u\xbf\t\xb0\xd9\x84"\xd0t\xbf\xca\x8f\xe9\xfc\xc0#v\xbf\xc5&\x12\x97\xdeju\xbf\xb1^,\x11\x9f\xc4v\xbf\xba\xcc\xdb\x14U\xf4u\xbf\x96nOI\x92\x0fv\xbfl\x85%1\xa8>\t\xbf\xb7\xcd\xaa\xd2\xda\xb0\xfa\xbe\x965\xd8k"\xf3\x04\xbfE\xa5r\x02r\xe0\xf8\xbe\xdf\xbe)\xdf\xa5\x89\xf8\xbe\xbc\xd0\xdbR\x90\\\x06\xbf$\xb7\xf7\xe7@\xbe\xfb\xbe\x94\x197(<\xc2\x00\xbfZ"\x81\x9e\x0e\xeb\x03\xbf\x9a\xa7\xfa!\x1cE\n\xbf\x16\xa2\xe9\xe7\xb6\x0e\x07\xbf\xe0\x96+P\xeaU\x04\xbf\x84\x00=\x835p\x01\xbf\x86_\xdd\xa1\x9er\x04\xbf\x97x\xe5\xd7\x17\x9a\x03\xbf\xbbp\xdf\x8d\t>\xee>eN\xcc\xec\xca\x02\xd9\xbe)D\xe2\xdb\x00n\xe1>|\x0f\x1f\xac\xbe\xe9\xe0\xbe\xe7yD\x9d\x9f\x7f\xdf\xbe\x1erCq\xc0\xde\xe5>\xaf\x1b\'\x93\x0b\x91\xc5\xbe\x8a1\xb0\x82B\xed\xb6\xbe\x9fT\x8c&4l\xf6>\xf1\xcf\x89\x0e\x96,\xf2>&2\x11\xc1\x14\xde\xe3>U\'\xa1j\xe9\\\xee>\xb6\xda\xd4\x92|\x9f\xe3>\xdf\x187\x86s\x1d\xe2>n\xba\xee\x9a(\xd9\xd6>\x04.G\xeefp*?\xa1\xd2\x10\xa7\x16\xaa+?\xc3\x1f\x02W\xa7\xfb*?\xc5eC\xeb"\xe7*?z\xa8\x08\x19\x0e\x1c*?\xc9<\xbe\x8e2\x8e+?\x16\x96\x0bc\xddg*?\xe8\xca0n\x12B*?\xb5K>\xba\xe10+?\xd5\x1b;\n\xa5(-?\xe5;\xa7S\xe7h+?^ \x86\xdb\xed\xc1*?0:\xbct\xf8\xd7*?\xea2Y\xbd`\x83+?\x80\x04uND\xdd*?\xe0S\xd5\xd2\xd0g\xfc\xbe\xff\xb2)?\x7fJ\xfb\xbe\x87\x98\x88\r\xb4y\xfc\xbe\x9b\x02\xda\xb1\x0b\x06\xfa\xbe$%\x8f\xfdQ.\xf9\xbe1\xd0c\xbe\x91k\xfd\xbe\xacv\xbd\x1f2\xc2\xf9\xbeu"\xfa\xc7_\x1a\xfb\xbe\xcc\x81\xe5\x06\xbc1\xfb\xbe\xc7l\xce\x96\x94\x01\xff\xbe\xb6\x18\xd9\x9e*\x17\xfb\xbe\x00$\xc2b\xab\x12\xff\xbe\x8e\x10\x1f\x06\xcb?\xf9\xbe\xf1\x85\x9b\x83pB\x00\xbf\xa5{\xff\xe9\xfa\xa5\xfa\xbe\x11\xfb\xac=<Z\xf3>{\xce\xbc\xdd\xcb1\xcd\xbe\xc5` \xe8\xe9U\xe2>@\xfd\xdf\xe83\x1d\xdc\xbe\xf8\xbd-\x06J~\xd6\xbeuN\x89O~\x97\xef>a\xe4\x82\xe5\x1aI\xbc\xbe@\xc8\xccS\xf1G\xb1>\xcc\x11>\x9e\xe7\xef\xe2>\xb5\x89\xa7X\x96\x00\xf2>\xfb\x9dD\x0fY\xc3\xe4>\x8d\t\x9d\x8b\x888\xe0>\x83}@QRd\xc1\xbe\xf2N\xa9x1`\xdf>Z\xd22cg\xe6\xde>\x81\x1b\x88\xb0\x8a\x96\xf0\xbe\xad\xa1\x17\x8d\xb8\x04\xd7\xbe\xa7\xdc\xf8B\x07\x9e\xea\xbee\x01\xe6`\xc5\x7f\xd1\xbe\xcf\xb9\x86=y^\xd5\xbe:\x88YK,?\xee\xbe\x8a\xd0)\xc1\x96\xa9\xd9\xbe\xb1\xcc*Vs\xe4\xdd\xbec\xef\xbe\xf8}\xb3\xe2\xbee\xbbvu\x87\x8d\xe9\xbe\xfe\x05\xdej#\x0e\xde\xbe\x8eQ\x82\xe1\xf9\xff\xee\xbev\xa7\x91D\x8b\xe6\xda\xbe\x07?\x8a\xd8\x97\x93\xea\xbe\xe9\xd9BeH\x8d\xe7\xbe\xe8\xb9\x15\x19q\xd4\xfa>\xae\xe8\x89qn3\xbb\xbed\xd4\xff\x12\xb0\\\xed>\xf6X\x9c\xd5D\xaa\xd3\xbe\xcf#p\x9a\xf55\xd2\xbe?\xe1jk\x1e\xcc\xf2>\xcd\x11\xe3f&\xda\xb9>\xa3\x18w2\x99\x00\xe4\xbe\x93\x14\nS\x8eu\xe3>\xc3e,\xb3\xcc(\xfa>\x9e\xd72)\xa5\x88\xe0>\x06^K)f\xb9\xf0>u)\xb2 \xf1\xc3\xd3\xbe\x1b\xaa\x84\xcd\xbf\x9e\xe7>\xc5O4\x13|\x8b\xe7>h\x9b1\xf1\xd8V\xf7\xbe\xb6}\x94\x95\x0f\xca\xd0\xbe\xa8`\xff\xf1\tU\xf2\xbe1\x97\x88\xa1\x80k\xd4\xbe\tX\x19\xe5\xfe\xe5\xcb\xbe\x92\xbf\x8f\xc8tD\xf4\xben#\x97\xfe.o\xdd\xber\xaf\xa0\xff\xbf\x07\xf0\xbe3x\xfc\x97\xeaa\xf2\xbe\xe8RW\x89s\xdf\xf6\xbeV\xf9\xc7\xb0\xac\x84\xf2\xbe\xaa&\xfa\xfe\x01\x1b\xf2\xbe\x8dJup\xe5\xc9\xe0\xbe\xb1\xb4\x91\x14\xc4r\xf1\xbej\x90^:gB\xf1\xbe\xec}9t\xf1\x97\xf5\xbe\xce\x11\xcf%\xa0\xba\xe0>\xd6\x925\xd5\x98\x91\xf6>\x8d\xc5\xdf\xc4\x1d|\xed>2[f\x05\xa1\xe1\xef>\x88\r\xa8\xc3A\xf1\xf7>\x81\xf9#WS\xb4\xf0>h\xb0"\xd1uR\xfa>\xfc\xda,%M\x89\xf1\xbe\x1e\x18&\xf1\x8aC\xf7>\xe3\xc6\x83O\x17S\xf4>\xa7\x9d\xbe\x089\x8c\xf5>\xce_\xfa\xc0D\xcb\x03?\x89\xf6CV\x19\xcc\xf6>\x7fz\xbe\xed\xc8\xa7\xf3>\xa5Hl\x94\xc1\x03\x00\xbf\x83\x06#H\xfdI\x00\xbf\xc1\xac\xc7\x08x\xe1\xfc\xbed\x9e\xb1\xaaH\xd2\xfb\xbe\x9c\xe8\xa7\x9d\xbb\xf1\x00\xbf\x16\xd7\x15ow\xf7\x01\xbf#\xb5\x1c\x96\xa7\xc7\xfd\xbe\xe7\x90\x08!\xfb\x13\xfd\xbeP\x97\x81K\xd7\xc7\xfd\xbe\xed\x0b\xdf\xb5\xdeU\xf3\xbe\xaf#@D\xd3\x83\xf5\xbe\x11h\x81\xaeg\x93\xfa\xbe\xb0\x7fD\xfee\x9b\xfd\xbe\xb1io\xc0.\xf7\xfe\xbe\x7fA\xc7a\x9aT\xfe\xbe~y\xc4\x0f\xd2\xca\'\xbf\xbc\xf64\xcbA\x8e\x15\xbf\xb1\xe84+\xf1\xf2"\xbf\xe7h\xdc\x90\x16O\x13\xbf>h\\xt\x94\x14\xbf\x13s\xdd\x82|\x9c$\xbf\xa4\xf8\xc4"\xa0\xec\x18\xbf\xc8]\xe0\x0f\xdb\\\x1c\xbf\xb6\xde\xc7\x1c\x06\xf9!\xbfPr\xad=(K(\xbf\x08\xaf\x0b+I. \xbf\xe5\xb7\xac>\xecq%\xbf^k\xb3\xa4O6\x1c\xbf\xc8#\xe1r\xf8S"\xbfZ\x91}\xff\x1f\x9d!\xbf\xa5\xf2\xdf\x15h\xb2\xec>m\xa8]\xdc\xe1\x10\xc9\xbey.\xac\x99\xa5\xde\xde>\x00\x03\xaeL\\`\xd2>\xac\x99\x9a\xba\x9bW\xd9\xbe\xe70\tq\xe6\x81\xe5>3\x8f\x02\xbc\x96\xe6t>\x16C\x94\xd966\xc1>l%\xa2|\xd4\xe1\xd9>\x83\xfbS\xc9e\xaf\xec>\xccQ\xea\xd1>X\xd9>\xcf_\xbd\xf3q\xfb\xd5\xbe\x8a\x1a*\x11z2\xa5\xbe\x1bl\xdd\x0f\\\x8e\xe0>QaZ\xea\xa1\x87\xc7>\xbc_\xf6K\x91\xb2\x08?\xf0\xce\xe2\xdb)U\t?A\x0b\xfc\xb5\xc2\xa0\x08?\xd7\xae/\x11\xf6V\t?\xf69\xde\xd81\xa9\x08?\xb78\x80\x87q@\t? Gv\x9f\xb3d\x08?Q\x1b\xf3;mi\x08?\xfev\xa8~2^\x08?\x8e\x16\xea0\xcf\xcf\x06?\xa4\xad#\xed\x08\x9c\x08?\xbb\xc5f\xa9,\x1d\xff>$\x8b\xf2\x9aQ\x8f\x08?\x13\x81u?F\x80\x08?\x90<Z\xaa\x9a\x8d\n?m&\xaf\x05}\x83\r?JR\xb1\x9dn\xcf\r?(\x04\xc0\x16\xa0N\x0e?\x92\x1cMK\xfa\xc0\x0e?\xfc\xb9\xef\x84z\xe0\r?Z\xe9\x9ed\x9f(\x10?\xf2\x0c82\xfb\xd4\r?\x95@\xeda\xdc\xc2\r?\x1e\xe4\xc4\xba\xa3\x01\x0e?\xba\x95\xf4h\xbe\xf5\t?\xc1"\x9e\xf4\x7f\xb1\x0e?\x89n\x81N\x01\xe2\xec>\xd6\xde\x0f4%$\x0e?\xd5As\x1e5\xdb\x0e?\xf9\x80\x05\xd0\xad\x0e\x10?\xcauR1vO\xe9>\xda\xc9\xeb0\x93%\xe8>_Z\x05jv`\xe8>\xff\xff\x9adG]\xf2>\xe95\xe7{NI\xe8>\xdcb\xd26\xfc\x87\xe9>\x91\x17\xf1\xb9\xfe\x86\xe6>2\xfez\x92`\xbc\xe7>Q\x94\xa4\xc5\xaa\xbb\xe6>\xb8\xe9\x0b\xb6\x8b\xe7\xe9>G\x1fIYu\xcb\xe5>d\x17G\x19\xcb\xa5\xec>Z\xf9\t`\xbf5\xeb>\xb5\xd3\x8f\xb6\xe8\x1d\xe8>r\x85\xb3m\x88=\xe9>^\x0e\x1e\xdb\x98\x9a\xee>\xe3n\x91\x97q\x94\xf1>c\xd10\xee\x9b\x08\xec>\xa0z\xb4\x88\xea\xb3\xf2>\xfc5\xd5\xae\xeev\xef>\xb6\x9d\xb2dsi\xf0>j~\xe4\x95\xad\x8f\xf3>7>V\xc1\x8e*\xed>\x11\xf1\xe3L\xc9\x04\xf0>\xfeE\xfa\x1a\xda\xd2\xe8>e\xbcqL\xc4\xdc\xed> \xd8(\xa94\xa5\xc7> \xbex\xb6IQ\xfb>\xe1\xefG\xd6}\xd4\xe9>\xa1\x16\xf8\xd30s\x0f?\x1d1\xdd\xe1C\xd1\x02?x\xab\xffA\xaf\x7f\xfe>\xc4Lc\xafzJ\xff>\xcd\x13\xa4\xceT\xe8\x01?\x08n\xc6\xe6P\x9b\xfe>\xb1o\xca\x95\xf2\xb7\x06?\xe06Q2=U\x03?\xa8c3\x80XB\xff>\xcf\x07K\xce\xc4\xc5\x01?N\x98\xef\x99\x11M\xf2>sl\xb5\xa4]\xe7\x04?H\x02\xf7\xd8\xe9\xb0\x12\xbf\xf7\x12`R\x9f-\x06?\x08\xfa\xa1\x82\x02\xa0\x06?\x06}\x98R\xbe\xc8\x10?\xc8\xd3\x8f\xf3\xa5i(\xbf\xdf\xfa\x87u\x05\xf4)\xbf~S\xaeX\x08\xb9)\xbf\x00\n\xbb\xac@\xc1)\xbfu\xedz\xb2\xc0\x8a)\xbf\xf3\x94\xa4\xa1\xe5\x93(\xbfJ\xb4z\xd8\x18t)\xbf\x9f`-IG\xca)\xbfw\xfa\xfc\x9b*8)\xbfv\xe2c7%\x8b(\xbf\xa9\x87e\x94\xd6V)\xbf\x01\x08N\x7f\xa3\xfc(\xbf\xf2a7\x1b\xd7\x0f)\xbf\xb2)Dv&\x18)\xbf\xda\xacP$\xcf\xe7(\xbf\xfb\xef\x1e+\xfdr\xfb\xbe1u7"aP\xf9\xbe /\xcd\xdc\xf3t\xfa\xbe\xc8F\x18\xb4\xba\xe0\xfc\xbe.\xfdu\xf8\x86<\xfa\xbe\x1cTM\xa0^\xbf\xfa\xbeX0\'nvZ\xfa\xbe\xe3\xbb)\x8cb\xdd\xfa\xbe\x81S_+\x8a\x81\xf9\xbe\xa3$\xeb\xb0\x96\xbb\xfa\xbe\xc4\xdc6Pb0\xfa\xbe\x101\x87\x95\xfd\xee\xf9\xbe\xeaJ\xbf\xe9\xbe\x13\xf8\xbe>Q\t\xc2\xabz\xf9\xbe\x08Ezi\xcc \xfa\xbe`\x95\x87\x90\x16\xf2j\xbf\xea1,I\xf0\xa7j\xbf(=\xac#4\xf8j\xbf@\xdc\x10\xcd\xe6\xefj\xbf\x85{\x16\xdbb\xdbj\xbf\xfa\x0fz\xf3\xf69l\xbfC\xba>\xae\x99\xcfj\xbf\x8d\x9d\xdd=\xf9\xf6j\xbf\x15\x14x\xe8j\xefj\xbf\x18\xc5R"\xa6+k\xbf\x84\xefa\xc2=Ok\xbf\xbc-\r\xa08\nk\xbf\x10\xf2)\xdbV\xecj\xbf\x1cM\x04\xdb4\x17k\xbf\xd8\x96\x15\xaf\x11\xe8j\xbf\x1f(\xd9\x1ba%\xf3>\xe1\xe3\xe8W\xdf\x91\xb2\xbe\xf3k\xd2A\xb5\xde\xea>R\x1e\x01\x02&\xb7\xe3>.\x98e\xc3\xb0\x0b\xc2\xbe\xe9\x85\xd3\xc21<\xf0>\xb0"\x8f\xa5\xcf\x15\xd9>J\xb7\x02\xea\x85\t\xb9>\xb5\xf8\x91D\xe8\x92\xe7>q\x9f\x88!1/\xf2>\xbc\xa2\x07\xd6\xa5\xbc\xe2>\xf2\x16\xf88^\xcb\xea>\xbc\xa9&\x1d4\x99\xe2>\xb8PzH8\xf3\xea>\xb7W\x16K\xb4\xa6\xe3>\xd0\xd0\x08t\xaav\xe9\xbe\xc5\xaer\xbc.D\xde\xbe\xf7\xb1\xc7\x04r\xe1\xe3\xbe\xf8KH\xf1\xe7n\xf4\xbe\xc1@\xe04xW\xe2\xbe\xd50{"\x82\x8b\xe5\xbe|\xd4\x94-\x91\x1f\xe4\xbe\x8d\xb0\x8fV\xa3\x0f\xfa\xbe\x85&\x94y"G\xe7\xbe#\xf3\xc5igF\xdf\xbeU\x0e\xdf<\xaf\xfe\xe3\xbe\xa4\xa7\x92x^\xfe\xa2>\xe0\xcbV\x82Q#\xd3\xbe~\xffN\xbb(7\xe7\xbe\xba\x14C\xa8\x1cK\xeb\xbe\xb5\x89\xed\x87\xe3\xf2#\xbfW\xc8a\n\x8d0%\xbf&N\x12\x9eDo$\xbf\x8a\x01:p\xa4\x80%\xbf\x05\x81\x1b\x88\x85h%\xbf\xe8J\xb2|\xe6\x8c#\xbf\xe4Pe\x84\xbf\xa8$\xbf?\xf5p\xe1\xe7\x08%\xbf\xee\xa8y\xd0\x15H$\xbfG\x81\xe3\x1dw~#\xbf\xae\\ls\xd7\t$\xbfs9\x99\x8b\xe9l$\xbf\xd6\x1c\x95\x18>"%\xbfrjE7\xd36$\xbf\xc8\xd8\xf1\xd6\xcdH$\xbf5\t\x12&5g*\xbf\xf2vEt\x80\xfa*\xbfX\xe5\xa5\xb1\x1f\xa8*\xbf\x97\xd8\xbe\xe0#6+\xbf\xf0\xc3C\x1f\xbcs,\xbf\xdcwj\x0c\x18\x82*\xbfd\x85c\xf6\x99\x01+\xbfx<\x15L\xc5h+\xbf\x18l9\xf1\x87\xca*\xbf\xe5\x1c\x12\x98\x9a:*\xbf\x01R\x8cP\xa7\xbf*\xbf\xad\xe2\x07T\xe0\x85*\xbf\x12<\x81V\x8c\x19+\xbf8\xb8}$\xcc\x87*\xbf\x05\xb4\x00\x88I\x00+\xbfQ%^\x95\x00G8?V\xef\xc6iK\x93:?\x92\xa1\xec\xb2\t\xe88?\xb1\xdf}H\xe9]8?\xe9\x0799\xb9\x888?\xa0\x9e\x8d;\xfb\xd88?w\xee\x84)\xfe\x1c8?\xad\xe4\x1e\x14\x1158? \xbdaA\x12;8?\x16R\xa9c\x97g6?$\xc5BB\x1f 8?\xd2\x89x6Q\xe8)?S\x91\x02\x1f\x07\x9f5?\xdfy\xac\x1f\xd1\xe68?\x91?\xa8{\xa0\xa4*?\xc9\xa5\xf6\x9d\x02\xbb\xf4>!2\xd7\xfc/O\xbf>\xe5\xb1UF\xb4\xe3\xee>\xb9\x9f\xc2o\xfd7\xe4>\x85\x18\xd8\xd6\xfe\xee\xa5>\xfcdy\x0fuF\xe3>\xb8\x13\xea\xc3\xe7\xfe\xe0>D\xeb\x1fDC\xbb\xd6>\x00X\x10\x83\x85\xc3\xec>-mdm\xa3\xe9\xf6>\xba\xc7l\x18:8\xed>\x17\xd4\xef\xc3\xbc\x98\xeb>\xbb<I\x01\x9eX\xe4>\x1fa\x9f\x85\x0e\x8f\xe8>AK\xf3u\xd9l\xe2>pET\xdd^r\x00?\xf7\x87\xae7R\xc7\xfc>\xb8\x14\xca)\xff\x19\x00?\xbe\x98\x9d\t\xe0d\x00?\xa5\x0e\xe5\x89Vk\x04?h}9\xfb\xbc\x12\x01?W\x94\xe6)\xa0\xb5\xf9>\x96#\x01\xf7\xec\xa6\x00?\xf1A\x08t\x03\xa4\x00?\xcd@\x8eFq=\n?\x1f\xbe1\xa8\xeeO\x00?z\x16\x1c\xe9\x8dg\x00?*\xe7\x97\xc7\xd1N\xfe>s#h\xc19h\x01?lL\xb6D\x03\xcb\xfa>\x85\x91\xf6\x17\xab\x92\x06\xbf\xd2r8&\x01f\r\xbf\xa0DE\x17\re\x07\xbf\xa0\xf7\xcf\xa7\xa3%\t\xbf\x9f\xda\xe34\x89\xd6\x08\xbf\xad;\xc3\xf3\xa1(\x01\xbfl\x8a[\xbet\x93\xc6>\n\x99\x1b\x9a\xe7\x99\x07\xbfR\xbb\x9c\x0b\xaa*\x0c\xbf\xc4\xe9D\xf2\xf5b\x06\xbf\xa8n\xf3:\xd5\x1f\x07\xbf\x9b\xa1\xebP\xbe\xbb\x08\xbf\x96\xa4\x93\xae\x89\x93\x07\xbf\x88+\'\x7fx\xd8\x06\xbfd\x81\x9f\xc0\xeeA\t\xbf\x1c\xbf\\p`\xf2\x08\xbf\xcf\xf4\x9f/\xe6F\x11\xbf\x96!\xfa\xba\x00\xf3\x08\xbf\x01\xc3\xf1\xfeea\x15\xbfA\xa5L\x05T\xc3\r\xbfq\x14\x10\x05\xc0g\n\xbf.\xfb\xef\x97\x0b\x1a\t\xbf\xad\x1aj\xa7\xba\x9e\x08\xbf\xb6\xb5QN\xd0\'\t\xbf\x8a^\x9f]\x13\xdc\x08\xbf\xf5\x9e\xf7\x90\xc7\xc7\x07\xbf\x89\xff\x9c\xf1L\'\t\xbf\xf83\xff\x0f\xdb^\t\xbfg\xcc\xda\x08~o\x0c\xbf\xcaaP\x92\xda\x93\x08\xbf\t\x1a\x92\xcf\xd8Q\xf0\xbe)\x9e\xdco\x1b$\xeb\xbe\x04g9\xbe%\xbf\xf3\xbe\xdcf\x82\xce\xac[\xe4\xbe\xfb\xb4\xfcG\x00\xd4\xeb\xbe\xa9\x0e\xcc\x9a1\x12\xed\xbe\x90+~*\x810\xe8\xbe_\xf3G\x99\xa5\n\xcf>\xdc\xe5\x0e-\xfe)\xea\xbe\x05\xda3e\xd8\x08\xf3\xbe\xd1\x06*+\xdey\xeb\xbe\xae\x88\xbdp\x116\xf4\xbe$\x07\xec\xd5\xf0\xd2\xeb\xbeW\x8eK\xf4\xf7\x82\xeb\xbeV\x7fk\x1e\xbc\xb1\xef\xbe^\x1a \x06F\x15\x02?\x0e\x8a\xc9Bd\xd0\n?\x00\xc8\xf1\xd1\xac\xab\r?\x87\xc0\xb2\xca\x82\x88\x0c?)i\xa5\x14\xae\xd2\x0c?\\\x83w\x1a*\x9c\r?(\xbc\x9f;\x17\xc4\x0b?\xbc\x96\x87\xc0\x89w\r?\x9c?m\xdbE\xae\r?~\xb0~E\r\x17\x0e?h\xa5H\xd8..\x0b?\xb3*"Q\x83\xeb\x0f?|}\xd3\x0f\x84\xa8\r?\x80M\x98x(\x9c\r?-\x9fa\x98\xb7\xd8\x0c?\xc1\x85\xe6\x1e\xddR!?\x93j\x16\x17m\xae!?\x1c\xab\xa7\x97\xd7\xd0!?Q\xc7>+\xd6\\!??\xff\r\xde\x82\xc5\x1c?\x932\xdc&y+!?(0\xc8\xd6\xbb\'"?&\xb8\xeay\xe8\x91!?\xb9\xd2G\x92\x85\xca!?\xa2\xbdd\xcd\x94 "?-\x9fhg\x94X"?\x1bs\r\x15\xe6\xdf!?\xaaR\xdd\xc6\xf3\xe9!?\xb5\x8d\x01\xa5\xc5\xf9!?\x11"\xe8R\xc5""?\t\x99\x0e\xb5\xa0h\xf3\xbe\xb6\x92]\x01\x95\xf7\xcd\xbe:\x8fO\xea\x05]\xe6\xbe\r\x1d\x9dG\xab\x81\xbb>\xa4\xd5\x95\x0e5\xae\xb8>\x05S\xa4c\x043\xeb\xbe\x17\x15\x80\xcb\xec\xcd\xce>[\x9c\xbe\x9f\x08!\xe2\xbe\x08\xd5\x07\xday\xb7\xe5\xbe@\xa2\x1d\x0e\xd8\xe2\xf5\xbe\xbf?\xafM,g\xe1\xbe1\x89\x96|@\xbd\xea\xbe\xb8\x16\xacf\x85\xd6\x8a>\xac\x04\xc7\xa3\x0f\xb2\xe4\xbe\xee\x165\xe62\xf0\xd8\xbe\x98o\xfb\xc5s\xae\xf2\xbeq\xe8\x94\x9aHc\x9b>\xf5A^\xf0\xe8\xf4\xea\xbe\x8a\xf6P\xb6pw\xa0\xbe\x15>y\x03\xd4^\xb5>\xc9\xd5\x8a\x91`\xe0\xee\xbe\xda\x8f\xdc\xcb\xee\'\xe0\xbes\x1a\n\x91\x1bd\xef\xbeH\xc2\x8f&:\xa1\xe4\xbe\x9eR\xf0H\x00F\xf4\xbe\x9f\x0b-\xb6Kt\xe9\xbe\x1a\x94\xd21^O\xf0\xbe\x1c\x0b8.\xe0\xf8\xd7\xbe(|\xb0X\xdb\xe3\xea\xbe\x9cu\xa5!\x0b(\xe3\xbe\xe7er\x08\xb8\xc6\x15?\\\n\xbd\x19\xe5\xc0\xe5>{\xa7\xdd\x90|\xff\x0b?=\x9f\x99t\xa6\xc5\xf0>E\xde\x99\xc8\x92e\xf1>\xe5Z\x063g\x13\x11?\xee\xae\xe5/\x07o\xfe>\xee\xc3\x92\x95c\xbc\xfb>\xbc\xac\n\xb7J\xac\x03?\xafJ\xff\x93\xda3\x16?\xf3\x1dq\xdd\x89\'\t?\xb8A\x11\xa4JO\x1a?\xb5\xb6\xb6\x0ctg\x02?,\x9dNDGm\r?#\xe3\xbd\xafk9\x06?\xb7HL3\x10\x1d\xf1>A3\x14P\x19(\xeb>\x1e\xaa\x1ei6\xdd\xf0>\x12\'Yf\x94\xb2\xef>\x90\xf12\xb2\xc4Z\xef>\t\xdc=w\xf7\xdd\xef>\xe7\n\xb7\x01?D\xf2>#\x1c\xde\xa8>\xee\xef>\xf6\xe5\xbe\x84O(\xef>m\xff\xff\\FP\xf1>\'M\x17\xd7\x0c\r\xf0>\'5\xbc\x05\x93&\xf3>\xae"\xeev\x9c\x16\xf0>\xa7\xbezV\x12M\xf1>l\x90\x8a\x95[\x0e\xef>\xf7M!\xea\x15\x8b\xf1>\xbf\xf8\x97\xac\x87>\xe7\xbeP\xf1\xce!U\r\xdf>WK\x13\x07\x85L\xd9\xbe\x07h\xe2\xa3H\x1a\xe7\xbe%\xc1\xcf?\x01\xfb\xe7>\x1c-\xc8\x02\x08\x1c\xd5\xbe\x1fc\x1da(\xa9\xb4\xbeU\xdc\xf8\x8dR}\xda>%\x14\x81|\xdb\n\xf2>\xd3\xcf\x83\xbf\x03\xfc\xd8>\x8a\xcb}{?\x0e\xe7>8\x89*\x116\xd2\xb0\xbe\x83\xf4\x0fT\xb4a\xe3>j\x04\x92\x90\xaf1\xcc>\xd1\x0f\x1131\xe3\xea\xbeI\xccBp\x06\xf5\xe1\xbe\x11\xf1\x1cp\x81\xbd\xe6\xbe\xe0?\x03\xcf\x80^\xe8\xbeE\x91\xa7KW\xb6\xe0\xbe#.\xe4\xc3[\xcb\xec\xbe\x0c\xfc<\xd3\x9d~\xe5\xbe~\xa39\xae\xe18\xe1\xbe*\x98\x88B\xff\xe2\xe2\xbeZ9."\x83\x90\xe6\xbe\x16:8\x99}.\xe2\xbe\n\xe3\x93\xa1!\xfe\xee\xbel\xec\xf5\x98\x19\xd9\xe3\xbe\xb3~\x8aK\x81\x1e\xb5\xbe+\xb2\x97\xba;\xd3\xe2\xbeau\x81\x80\xc1Q\xf5\xbe\n\x9dI\xc7\xaa\x15\x9c\xbe@$\xfcaQ\xdb\xe9\xbe\xd31V$\xd4\xd4\xde\xbe\x17\xc079\xc4\xcd\xdb>\xa3\x81\x82L\xd9\x99\xf2\xbe\x15S\xfex\x9d\x16\xb4\xbeS\x13/\xf0\nE\xa3\xbe\xa4\xf1\\~\xd2\x1b\xe7\xbeu\x01(\xf5\xd3\xc9\xf7\xbe\x85\xc1_\xd9y\xcb\xe3\xbe\xac\x1d\xf7\xd3\xd1\x8d\xc2\xbe\x93m"\xfd\x1dY\xd6\xbeC\xb5\x99\xbf\xda\n\xec\xbe\x15\xa7\x88\xb1r\x93\xe8\xbe?\xd1X\xdc\x1f\xde\xfb\xbeZ\xfd\xc0;\x81\xa1\xf7\xbe-\xdf\xcf\x9f\x1c\xe1\xfa\xbe*\xe7!\xda\x81\xfb\xfa\xbe\xeb1\x9e\x8f\xcb\r\xf0\xbe\xe9\xf7\xefJ\xf3\xf5\xfb\xbe\x85\xe1\xbb\xc9un\xf4\xbe\x13\x12\x04$ \x01\xfa\xbej\xecY\xbdR\xb7\xf8\xbeFk\x0c\xca\x9eH\x00\xbf\xed\xf9e\x7f\xbc}\xfa\xbe\x00\x19\xfb\ta9\xfc\xbe \xbc\xd0\x1f\\\xa3\xf9\xbe<;QR\xe50\x00\xbf\x97\xd4#\x9c\x0bS\xfa\xbe\x10\xa5\xd9\xfd;\xf00\xbf\x8e\xee\xa0b\xecY.\xbf\xbd\x0f\xba\x04\x18T0\xbf5\xf7TF\x8f2.\xbf\x07\xdfhDPd.\xbf.Os\x89{\x850\xbfi<\xbc\xe8\xcb\x86.\xbf\xd3\xf1\xf7\x9fC\x91/\xbfF\xaa/:\xbaP0\xbfD\xb1&\xe3\x08\xbd0\xbf\xa3\xb4b\x17\xbbq0\xbf\x1a\x94\x857\xc4c0\xbf\xe3\xf7\x94\xff3\xaa/\xbf\x94NP\xeb\xb3y0\xbf@\x14e3\xcd20\xbf\x90;\x0f\xfa!\xfa\xec>\xf84\x1au\xc9\x92\xd3\xbe\xc7E\xa7r~\xf7\xd2>!b\xb4\xfbX\xcf\xe1>\x1f\xf9\x93\x83\x87\x84\xe0\xbe\xef\x85\xf3\xe5?\x88\xe7>\xc7(\x93C4E\xdc\xbe\xc8$R\x80\xd8\xc9\xd2>\\\xa4\xee\x85\xe7\xb6\xc4>\x95\x9d\xb1\xc4\x93h\xeb>s\x1a\xb6\\[^\xed>\x9a\x10\xd7\xa4\x04q\xda>`\xe7\xe0\xa9=\x90\xce\xbe\x98 \x81\x067"\xd2>\x00\xf2\xbd\xaa\xa8\xe0\xba>\r\xe1\xe2\xb8\xad;\xf1\xbe\xf2\x90N\x887\xbc\xf1\xbe\x06l1\x9an$\xf0\xbe\xd1\xb9\xd1:F\x1d\xf2\xbeS\xc4\xc4\x94\xbb\xf1\xf0\xbe\xb9\xaaV\xf0\xf7.\x01?\xd0\xcd\x89^\x00;\xed\xbe\x12\xff\xc2F\xa4\xb1\xec\xbe\'\xb6\x9c\xd8G\x91\xeb\xbe\x1fT\xb7\xd7\x85\xcb\xef\xbeH\x91\xfb\x9a\x9fD\xee\xbe\xd8\x95D\x8bM\xd3\xf1\xbe\xb8eu2\xda\xb7\xec\xbe\x08{\xe2\xe2\xb7\xa6\xef\xbeM\xb2!\xca\x1d!\xeb\xbec\xa5\xb7\xf0\xf4\x06\xf6>\xee\x0e\xf4\x8e%g\xdb\xbe`\x81.\x91\x0c\xd3\xe9>\xb9\xeb\xbc&\xf7\x04\xaf>\xee\x11\xea\x85*\x0e\xe5\xbe\x87\xdf\xc1K\xd5\xf3\xf1>\xf71k\xbb\xbb\x9d\xc1\xbeH\xf0\xcb\xea\xe5U\xc3>\xacb\xff)\xe5\x8e\xdc>0\xf8~\nEq\xf8>\x85\xef(&\xc3\xd2\xe6>\x85\rv)\x1e\x8c\xef>\xec\xd9P\'\xfaSq\xbe\x97\xa7;\xa4\x88\x1f\xe7>\\\x86.\xf1\x9b\xb8\xd7>\x18\x81\xa4\xfd\xf1\x8c\r?\xd5\x00\x95\xc6\xcc\x01\x0b?\xb3\xae=\xc2\nE\x0b?5\xf2p\xf5\xcc\x80\t?u\xff\xf4\xdd?\x16\x0b?\xd5\xd6\x96\xbc\x06\x9e\r?<x\x02-\xaaw\r?[\x1b\x06\x7f\xd4W\x0b?0>\xe7\xd8\xa4~\x0c?\xa9X\xe8\xfd\xfb\xa8\x0b?a\x9b1\xd5\xf2\xd7\n?\xc4&P\x83\\\x18\x0c?\xe1+\xe4^\xac\x17\r?LA\xd8\'M\xa6\x0c?\x1f,\xaf\x8e0\xf8\n?\x85\x1c\xc3[oE\xec\xbeR9\xc8\x8b\xb1\\\xc6\xbe\xeec\x10x\x825\xe2\xbe\x04\x1cf\xf2\xc3\xe7\xd3\xbe\xa1\x87R?\xcb\x92\xc5\xbeq\xca\x9c\x98\x94\x01\xe6\xbe$\xe87e\xfe\x88\xd1\xbe\x9ai\'\xd0";\xc8\xbe\xdcel\x964]\xda\xbe{\xc6|\x00\xfdB\xf0\xbe\xb6y\x8c\xaf\xcf\xa1\xd5\xbe\xe8\xef\xd6\xa4\x83\xbc\xe2\xbe\xe3\xe0@\xe5(\xad\xd4\xbe\xe63\xce\xb5\xd5\xc0\xe2\xbe\xda-:\xef\x0b\x9d\xde\xbe\x9f\xb16\x90\x9e?\xf5>\xb7\x14\xfc\xd2\xc3\xba\xe4\xbe\xa9\xa2u^4C\xdd>\xba\xb86gm\xaf\xce\xbe\x13\x0c\xebl\x90\xe3\xec\xbe\xae\x892\xd2\x1eW\xca\xbe\xd8\x90-#\x1d\x96\xe1\xbe\'iI\xa8\xcfq\xd8\xbe\xa7\xcb\xa4\x18\x19\x04\xd4>\xa7\x1fY\xe5E\x8b\xf4>\x13\x86\x0e@\xe4"\xe3>\xe1.\x0c\x19\x82\xcd\xde>\xfe\xe44\xdd\x8e\xbe\xce\xbe\xc3\xc8\x8c\xa57\x1b\xdc>\xfai\xb6\xef;\x90\xcf>\x03\xbd=v\xf5D\xf6>\x87\xcf(\xd4\x91\xde\xd4\xbe\xf6\x0c\xc5a\xcd\xf4\xe7>\xfc\x02W\r\xa3\xf5\xd7\xbe7\x04\x1f\x06\xec\xcb\xe0\xbe\xf0\xc5\xbf\x0cng\xf1>@\xc1FT*\x1c\xc0>\xca[\x15\xea\xc2p\xbd>X\x15\xc8\x85\x03|\xb4>\x83\x1fT\xdd\x80h\xfd>\x17u\xb6\x95\x80b\xe7>\x0cM3\x881y\xf0>C\x00\x8br\x1c\xf5\xb5>`e\xbc&\xba\xc8\xe8>\r\x1f\x8c\xda\xd2\xe2\xd7>\x1a\xf1s~g}\xf7\xbe\xecQ\xf3]\xa3\xb0\xf0\xbe\x95}b7\xca]\xf2\xbe\x07\x0fo\xd2,\x7f\xf1\xbe1\x0f\nHAW\xf0\xbe\xa3xb]\x1a/\xe2\xbep\x9fW~\xb5\x8d\xd0>\xac\xeaa\x84\xa0\x19\xf2\xbe\xffuod\xbb\xe3\xf1\xbe\xa8\xd4c\x00\x14\xf7\xf6>{\x8d*J3M\xed\xbe\\\x0f\xe8\xf1Vn\xc8\xbe\x07i\xd1\xdd\xae\x9c\xf5\xbe\x0c\x17\xffj\xd2I\xf3\xbe\xc9\x97!\xc4/=\xf1\xbeg9\x9co|\xea\xf4>\xd3?\xf2\xc5\xc0\x88\xf0\xbe\xe6h\xd2\x90#T\xc4>\x0f\xc9\x06:\xc4B\xe3\xbe\x13\xb9>\xe5\x82\xfc\xf7\xbe\xc4^\xa4\xbf\r\x96\xeb>l\x1b\x1d\xd6UG\xf1\xbe\x87W\x13}\xb47\xe4\xbe\t[|\x88\xb3\xdd\xc3>_\x98\xb1\xde\x1a\xb7\xf6>\x81\xf3\xce\xe3\x7f\x1e\xe5>\x98\xbd\xef\x15\xf4\x90\xc7>\n\x97Z5[Y\xe7\xbe\xe8\xd0\xf2\xb2^\\\xd4>\x8e\xa7A\xae\xd5;\xc8>\xc0\xf8\xcd\x07\xc8\xff7?\xf7\xa9F\\s\xbc7?E\xebD\xeb \xe87?\xa0\x93\xcb.\xfa\xce7?\xb3\xaf\xc2\x1cFE8?Oh\xc9\xd6\xec~7?\x07\x11\x80\xe2\xc5\xa96?\xa4\xfew\xd8\x8b\xf57?#gS\xaf\xf4*8?\xf3$\xd8\x98\xdf\x066?p\xc3\x97K\xb7K8?\x16F\x03\x81XK6?\x9f\xbf>\xe7\xfd\xa15?\x93\x8a2\x91\xae\xd26?\xba\xdcu\xd76!8?m\x08\xfa\xd7\x8c\x9cO\xbf|\xb1\xa1\x97\xc5\x80G\xbf\xfc\xae&\x01\xc3cL\xbf\xf6\x02\xa9\x9f\xb4\x19I\xbf/\x1f\xf9\x96\x9a\x1fG\xbf\xb7\xa8T\x10\x05\x9bM\xbf\xcex\xcd\xebp\xbeH\xbf\x8e\xa1]=\x05kI\xbfp_Q\x12n0K\xbfZ\xf5*\xb8\x86\xb2O\xbf.\x1c\xcb\xbfy\x0fL\xbf\xb2{\xf8\x84\x1f\xfbL\xbf\x08\x88\xfb{\xb1KI\xbf\x95\xdaf\xc3u0L\xbfI/u\xd2\x14eK\xbf\xf1\x0b\x1a\x03\xaf\x11\x0c\xbf\x1b_&\xd5\xc2\xdf\x0b\xbf\xedxBN\x05\x99\x0c\xbfM\xbb\xd8\xa4\xc3J\r\xbf\x80\x92\xd2\xc1$\x8a\x0b\xbf?&\xbc\x94(\xc4\x0c\xbf\x90\xbc\xde\xf1\xb3\t\x08\xbf(\xd4\xcd\xf7\xb4\x7f\x0c\xbf\x13\xbb\xce\xf0<f\r\xbfa\xcf*\x87\xb3i\t\xbfV\xc8\'\xd8`\xdc\xc0\xbeu\x0f\x1e$\x89\xa5\x08\xbf-\xaa\xa9\xd1\xb3"\x06\xbf\xbe\xaa\x0ee\xdb\xfa\x07\xbf\xad\x8a\xf08\x96\n\r\xbfM\xcb\x80[\xf8>X\xbf\x9al\xf6\x0c \xaaX\xbf8\x9a\xe3_\xa4^X\xbf\xc88\xf8\x81\x86\xc4X\xbf\xe3\x8c\xd0\xb7^0Y\xbf\xa0\x03\xf0\x0f\xd7:X\xbf\xa4\xa1\xf8\x9c\xda\x93X\xbf\xa8\xb1\x94\xfe\x92\xa3X\xbf\x9b\xe4a\xd5\x1cVX\xbfn\x89\xa6\xc5{fX\xbf\xac\x02\r\x141/X\xbf[\x15\x83\xcdk\xb2W\xbf#\x1b.\x07\x04~X\xbfX\xd6E\xe9\x14EX\xbf\x98\xe0T\x90xrX\xbf\x1b\x9e\xd4\\\xe3\xbe\xec\xbe\x00TI$\x8dj\xbc\xbeL\x82\x13.C\x86\xe0\xbe\xc5\x0e}\x04=\xdf\xe0\xbe\x85\xc6%\xec\x99S\xa3>EE\xf6y\x16\x0e\xe9\xbe{\xf8\xbd\x99\xe1z\xa8>\x07N\xdf\x04\xe5z\xd6\xbe\xce\xd2x\xdf\xa5l\xe5\xbe>p\x05xoF\xe9\xbe\x9c\xd5\xb8ps~\xb2\xbef:H%m2\xf4\xbeAJ\xec\xb4\xa2&\xd5\xbe\x95IdBDq\xe0\xbe{\xa5X\xba\xcaz\xda\xbe\xd0\x9bd\xcab-\xef>{\xe25?\x0c\xf4\x9b\xbe3WAW\xeb\xc5\xe1>\xc16\'\x01\xd6K\xd9>\\U\x8f\xcb8\x8c\xac>l\x88\x0c\x1e \x02\xea>\xb8\x0b\xedh]t\xb8>\xca\xc1\xbc\xe9>\x15\xb9>8t\xab\xd2\x95X\xe3>\x83\x87\xd4i\xc0O\xf2>\xed+\xb4\x15\x82\xab\xd7>]\xdd\xb7L\x1c`\xe2>\'.\x9fY\xae\x82\xd6>\xcc\xabM{-H\xe0>\xd2\x15\xf9\xad\x10\\\xe3>\xed\x7f\xcck\x16\x17\xfb\xbe\'\x1e~\x84\xf7\xec\x1b?)\xda\x16\xfa:\x9b\xf8>_\xd4C\xa6\x8b; ?\x87\x15\x04\x89\x8b\xf8\x1e?W\xad\x1c\x9b\x7f\x94\xdd>\xaa~\x08P1X\x15?\xea,\x17\xf1R4\x14?`\xdfDA\x1c}\xfa>\x05\x9f0\xcct=\xf4\xbej\x11\xb5\xddDn\xfb>\xad\x0f\x9d\xb0\xd7R\x02?N2\xfd\xba\x0b\x91\x11?\xec\xce\x0e\x93\xe1\xf9\xf9>M\xfa\xb3\r\xb4\x10\x03?\x89\xc2\xb1\xb3W\xc7/?C\x87}\x00\n\xac0?\xe3{\x07\xd3+\x8b0?\xf1\xbd\x8cET\xbc0?\xccNkM\x90\xa80?|\xa5\xe4\xe4\x97\xd8/?N\x8fU\x8c\xee\xfd.?\x83)\x0b\x00P{0?h\xc7\xc7\xfe\xaf\x14/?b\x85\xa6\xfd)d0?C\xd4X\xbeV 0?\xed\xca\xa9 \xf7\x170?WB\xec\x00cB0?P\xa2\x97)0\x870?F\x129\'\xa7@0?\xa9\x18\xc3Z\xa2\x1d\xf2\xbe\xfa\xe1\xcf\xf1J\xe6\x10\xbf\xe5j\n\xb0\xf4t\x04\xbf\xb1Ir\xce\xc3\t\x11\xbf\xe9l\x8e1%\x10\x13\xbf\x9a\x19;iJ\xc6\xff\xbe?\xc0\x84\xe3\xcb\xa4\x10\xbf\xe1\x02\xb5\x90?p\x10\xbf\xbcG\x12\xab3\xff\x04\xbfUp@\x03`\xa5\xf1\xbez\xe5\xff\xb3\xb6\xe8\x04\xbfn\x1f\xdf\x11E,\x06\xbfH\x88\xcf\xe0\xdfW\n\xbfE\x90\xa3\xb7\xcd\xa9\x02\xbf~O2<A\x14\x07\xbf\x1f\xc5\xfb\x9d\nA\xdb\xbe\x9e\xba#\x10\xee\xe9\x12\xbf/\x80\xe6rN\x0f\x01\xbf\xd7U\xc6\x1f\xae\x90\x15\xbf1\x90\xdb\xec8\x1f\x15\xbfR\tB\x89%P\xf7\xbe\x0ctqf\xee\x8d\x0e\xbf\xa5\'\xb8\xbe\x82\xf2\x0c\xbf*n\xe0E T\x01\xbf\xe1F\x0e\xd1\xbf\xa4\xe8\xbe\xa4\xd2K\xfd\xd2\xf8\x00\xbf\xaa\x15c-\x9b\x9e\x03\xbf\x9c8T\xff6\x12\n\xbf\xd0\xe5\xf0\xed\x1d\xbb\x00\xbfG\xd3\xf8\x82\x86Z\x03\xbfM7"9\xa8D\x01?\xb8\x05\xce \x8b\xdf\x14\xbfE2pm\x17p\xe0\xbe\xb3\xf6\x07\xc8\x90\x11\x1a\xbf\x18\x19\xd3\xf86#\x18\xbfM\xdb\xaa\xaf\x96\xd6\xdc>n\x10\xc6DA\xe3\x0c\xbf\xf6\xbc\xcd6\xe4^\n\xbf\xcd\xa0\xaf$,\xc8\xec\xbe\xe9Vhr\xadB\xfe>\xa3{\x0e\'k3\xe1\xbex\x9f\xcd\xf2\xcb\x00\xf2\xbe\x917\xfer\xf4\xb0\x05\xbf{\xffy\xba\xad+\xe5\xbe\x80\xbf\x1c\xa7\xc5r\xf2\xbe\xda\x0c\x92\xa6\x1c\xb8\x19\xbf\x97m?"T\xac$\xbf\xffX\xe0x\xd4:\x1f\xbf\xba\x94\x1d\x1atp%\xbf<}G\x1c-\xb9%\xbfE-\x13\x08\x04\xd9\x1d\xbfI\xc6c\xd8S\x7f#\xbf\xfaNd\x86\xf0I#\xbf\xc6\xfeeF\xc0N \xbf(\x91ZI\r\x1c\x19\xbf\xe5qn\xda~_\x1f\xbfgd\x10qK\x14 \xbf\x13%m\x9a\x81\xd4!\xbf\xc5X\x9d,\xd1@\x1f\xbf\x7f\xd2b]\xe1\xa7 \xbf\x80\xe7\x94\x1b\x00\x86\x08?\\\x94\xee\xa9\xa45\x11?\x90$H\xb0&-\x0e?j\x89\x8fV\xc7\xf9\x10?\xadj\xa0\xf8\n\x1d\x12?w\xda\xc0\x15\xe6\xcf\n?\xae\x07\xc1\xc6)\xb9\x11?lH*\xb8\xeeL\x11?\x1fVk\xe5\x99\x8a\x0e?\x1f\xc0c\xf5\xd5"\x0b?\x137\x04\x92\xa2P\x0e?FZ\x14%%r\x10?\x10>G)\xdb\x83\x10?\xe4\xb5s0(\n\x0e?\xba\xbe\x82-c?\x0f?\xec\x82\xc4\xf5\xbeG\x10?\xfa\xb9~\x028\xc1\x11?\xa9E +\x06s\x12?\xee(\xdb\xc2\x1d%\x0e?\x9c\xc3\x18\xa4\x9e \n?%\x86\xcdh1k\x11?\t\x00\xd6\xbc[L\x14?N\xb1X\x91\xa3\x81\x14??]\xbbC\xba\xcf\x12?\x18\x8c\xa4bc9\x11?\x88Rx\xc9\x08\x85\x12?\x90aK_\x008\x13?\xb7\xb3\x0f\x14\xd0\xe4\x13?h\x10\xadn\x0c|\x11?\xd4a\xc9\x93\xb9\xc6\x12?q\xa6\\\xee\xe2\x9c\xc9\xbe\x15:\xbe\xf83\x1f\x12?\xcaxlS\x1eE\xf5>\xa8\x1cD\xd1B\x80\x15?)\xb6%W\x89\xc2\x13?PW\xaa\x18J\x0c\xeb>\x10{\xd0b\x93\xdf\n?^\xe2\xc7\x8e\xd9w\n?\xf5\x0e)\xd5\x84R\xfa>\xb8\x87\xfd3\xa2\n\xc2\xbe\x05\xa3W\xd0>\x13\xf5>\x16\x8b\xfep^\xf4\xfb>\x93\xff\xeel\x7f\xe9\x04?\x05\xf0\xf4\xe8[)\xf8>\x1bIm\xb8j\xef\xfc>!}Ytg\x0b\x0c\xbf\x12\x9c\'\x0e\'("\xbf\'c\x94\xa4\x1d\xa3\x15\xbf>c\x8b\x06\x7f\x80#\xbf\xb1\x9e\x18.\x14|"\xbf3\xc2\xdeM\x9a\xed\x12\xbfj;\xbal\xf8\x19 \xbf\xf3\xc2\x05,\x93K\x1f\xbf\xb6\x89\xddn\xc9\xda\x16\xbf|\xcd\'\xe7A\x0c\x0c\xbf\xb2$j+.\x96\x16\xbf8\xac\xa3\xaf@5\x18\xbfC\xb0N\xe5\xbb0\x1e\xbf\t)\xed\xaf\x1ag\x16\xbf\xc3|\xdeF\xd9C\x18\xbf%\x15\x0e\x9b\xebC+\xbf.FP\xd4\x9f\x84+\xbf\r[\x16\xd2\xe4\x9b+\xbf\xfb\xc0\xbc]\x8a%+\xbf\xb2IyY\xa8\x80+\xbf\xdb\x9f\xe8\xf9\xfa\x86+\xbf\xe5H\xcfIg\xe9+\xbf\xdf\x17&.\xfe\xec+\xbf\xb3tZ\x8a\xf2\x8c+\xbfl\xb6\xb7`KE+\xbf\xe4g4\x7f\x86\xb0+\xbf\x97z\x83\xf3\xf3\x9d+\xbf\x1a\xf9q\xeeD\xc8+\xbfa\x08\xa9\xca\x17g+\xbf^Vk\r\r\xa5+\xbfR\xce\x18\xd0\x06\x8e\xd7\xbe\x91\x9dXR\xaf\x1f)\xbf\x0e\x00\xc5\xbct\xa5\x14\xbfu\x8c5\xe6$\xa2,\xbf\xd0\x12L\xeb\xdd\xcf+\xbf\x80:\xeaI\xe22\x0b\xbf\xf1\x0f`\xe8\x15\xbd$\xbf\xd7)\xb5\x8ef\xc1#\xbf\xef\x81\x83,\x9b\x95\x14\xbf\xcdWo\\t\x8f\xf0\xbemhv\xa5\xa1\xe2\x14\xbf\xb6E6\xa4wC\x18\xbfpe\xb2\xc6\x9c\xc7!\xbfh\xba\xe8\x8b6w\x14\xbf\xdf\x0eq+\xfb\x89\x18\xbf\x94+\x97\xc0\x9c\x9dr\xbfI\xdc\xc5.\xb8\xdes\xbf\x93\xe0\xe8\x05\xbc4s\xbf\x01\xab\xbdS\xcf\xcds\xbf\\;/\x14\x9d\'t\xbf)L\xf0U\x1b\x07s\xbf\xf7f\xd7\x97!\xe8s\xbf\xae\xba:\x80\xe0\xf8s\xbfo\x13\xf4\xd1\xafIs\xbf\xa8\x94\x01l\x98|r\xbfz\xd5\xc3\xbb\xbd&s\xbf\xc1\x8c\x97\xbc\x8b-s\xbf\xc3\xb7\xb0&5\\s\xbf/\xb3\x1c\xd6R\x00s\xbf\x1a\xf4\x9fbSbs\xbfi3\x9ao\xc9\xb2\x07?\xe8\x14~Q\x8eq\x1b?\xfa\x1e\x0b\t\xb7\xa7\x0b?\xde\xbd8&\x07\x7f"?\xc9\xbb\x9b\x7ff\x03\x16?\xc5\x8f\xb1\xa1\xac\x0e\r?\xcc>\xce\xb6\xe4e\x10?\x92Q\xd1V\xb4&\x0e?\x17\x7f\x9bL\xdf\'\x0c?6XU\xc2\xb1$\x08?\xd5\xb5\xd4\xb6\\\xc4\t?p\x04\xb5kp!\x0c?e\xba\x80\xa2\xf0\n\x11?s)\xc0\xb50\x97\x11?\xe7e\x1cHb\xcc\x0b?\x84\x1d[\xc1\xd9:\x00\xbfu\xe7\x7f\xb4i\xed\x19?\xe5*\xb1\xdb>-\xf6>g\x10i%4\xc4\x1d?\xc5O\xac\xbc.\xca\x1c?\xf6\xff~+\x12f\xc9\xbeo\xfe\x17\xe6\x10}\x14?\xe3\xb2\xfc\xe2\x03\xbe\x12?xH\xc0D\x89i\xf8>\xbc\x9d\xeb\xfb\xa77\xf7\xbes\\\xc4\xfa\xb60\xf7>\x034\xee\x19d\xec\x03?\x0cz\xd0F.\xb1\x10?\xb3\xb94*7\x13\xf7>w\x06\xa8g\xa2\xdd\x00?\xe4\xb7\xc5\x9d\xd0\xe7\xfa\xbe\xcca\xe22\xdeN\xd0\xbe\x95C\xd4\xf1\xe2\xd7\xf2\xbe~St\xe5`\x97\xcf\xbe\xec\xa3\xc6\xbc\'\xcb\xa6>>hQh\xe4\x1a\xf9\xbei\xdf\x02oub\xe8\xbe.\xd3i\x0e\xfa#\xfa\xbe\xf3\xe1\xe8v\x17o\xf2\xbe\x08y\xcfT!\xb6\xf2\xbe\nrJ\xb4o\xe0\xf0\xbeq/\xbe\xd0I\x89\xf5\xbeE\xb2|\xb0|\xaa\xeb\xbe\xbeE\x03\x7f%\x8f\xf4\xbe\x8fC\xf6Z\xe6\xd0\xe0\xbe>\x9f\x81\xd0.\xdb\xfa\xbe\x7f\xe7\tP\x84\xe1\xf9\xbe\x1f\xd5\xa2@J\x98\xf7\xbe\x01J\'yzg\xfd\xbe\xf5\xa5&3\xfaG\x03\xbfv\xfc\xdc\xa4\xcb\xcd\xff>A\xfd\x94?\xecq\xec\xbe\x08\xa55N}\x18\xf5\xbe;\xd7\x9c\xd3\xf4E\x06?\xf3]\x8d\xa3k\t\xdd\xbe\xe3\xf0\n\xe6r\xef\x05\xbf\x8fK\xc1\xb7\x84\xc7\xe6\xbe\xc8V\xf9bL\xe6\xfe\xbe\x7f\x81\xb3\x99C|\xcb\xbeIE\xd0\xee\xb8E\xf8\xbei&\xbe\x1a\x16\xf4\xe0>\x15\x03t\x0e\xf2\x8c\xe5\xbe\xe8\xdf)\xa8\xf2{\xe1>\xce\x9aR\x97c\xe2\xf6\xbe\x1f5\x1c\t\xa0\x16\xee\xbe\x91\x7f\x1b\xafj\x1f\xf1>\xd0n\xf3\x8e\x8a\x1e\xdd\xbeq\xb1l) W\xa5\xbe\x97/\x01\x13\xb1\r\xdd>3\xd1LD\xcf\x99\xf5>6.o\x1c\xe2\xa3\xde>v\x08d\xa9\xc6\xd0\xef>q\x1a\xfb\xa0\xbf\x8e\xc5>$\xe1\xb26\xe2\xe6\xe1>pL\xd8Bs"\xcf>pRW\xc7\x80o\xff>\xf3\xeer#\x1d\x1d\xef>\xb3u\x9d\xb7\x1dl\xf9>\x1f{\x11w\xc7\xa8\xf8>\xc0\xe0\x14jo\xb0\xf5>&\x94\xf8h\x1e\n\x03?\x12\x0b\x12R\xe2\xef\xfe>\xcd\xad\xbe\xcc\x11\x8c\xfd>\xb1za,X\x8f\xfc>I\xf9\xc7@XT\xf4>\x98\xee\x8d\xfafg\xf9>sy)s\'\x9f\xf8>\xd8\xf9W\xb66\x84\xf6>\x1bWC\xa7\xcd\x03\xfb>\xa8\xd5\xf2V\x13\xa8\xfb>\t\xf3\x82\t\x82\xe9\xf0\xbeB\x06\xe2(\xf4\x9c\xf1>E\xc25W\xed\xfc\xca\xbedi\xf9\x01\x11\\\xf8>#\xa9\x99\xe1X\xf0\xf4>\xb7\xea\x9a\xaf\xa6Y\xe4\xbe\xf1j\'\xd2}\x19\xed>/\x83\xdb\xcd\xedh\xe2>\x8e2StLO\xe3>\x8e1\x17\x97\xcb\xa9\xf2\xbe\'\xf7\xcdNX\x98\xcb\xbe\xec\x1e\xfd\xf60\xb8\xcc\xbe\xbf\x0e\xe7nF\x7f\xe6>\x8a\xccY\xd6:E\xc4\xbe)O\x1b\xa4\x88\xc5\xc5>\xe7\x86\xb7\xdfU\xe5\x04?\xeeez\xab\xc3n\x04?\x8d\xbb\xc0\xef?\xbc\x04?s\x19\x1b?\xbd\xe5\x03?\xde\xce\xac\xfc\xf1r\x04?\xfe<|\xdaU\x95\x04?hk\xd1%\xa8\xb0\x04?`\xeb\x04\x86\xce<\x05?U#\xc5?\x1f\xba\x04?\x00\xed\x1e\x87\xab\xd6\x04?\x11\x80\x7fF\xc0\xa1\x04?H\xf8z\xee,}\x05?\xf2\xb1\xdd\x1dv\x86\x04??\xa2j\x84N\xa6\x04?Ii\xc5j\xe3\xb1\x04?/;\xec\xf6b+1?\x160\r\xb7&\x860?\n<dL\xe9U1?\xd5\x02?\xd2\xadK1?c\xab\x93\xde\x7fP&?^D\xe0A=\xbe1?&\x80\xdd\xa5`%1?\x04%\xa5\xa0\x8aW1?\xe8M;\xb4l\xe00?\xe1\x964\x15)\xf00?\xcd!\x91\xff\xa8T1?E\xc4(`\x1a=1?\x91\xd2i\xd7/Q1?uB\xfe\xd4\xb7P1?U\xcb/\xc9G,1?\x90\x84=<9\xa4\x08?\xffu\xdd\x01\x867\x08?\x85\xe5\xf0\xb8\xdez\x08?\xd8\x06\xd0i\xb4\x1e\x08?\xae\x1b\x13w\xcc4\x08?\x80\x0e\xfc\xadGm\x08?\xf6\xdb\xdb\x06\x15*\x08?_\xb5g\xad\x16,\x08?\x93I\x05I\xf7q\x08?\xd8d\xc9\x8a\x92\x9c\x08?\t`\x8dr\xf8G\x08?\x01GAr\x89\x00\t?\x1ag_%\xddZ\x08?\xdb\x9b6\xa9[\x83\x08?%1\xeaPIh\x08?\x1a:\x92\xaa:\x83\xf8>n\x05\xc1\xce\xf2\xa7\xc6\xbe<\xbb\x84)!g\xeb>;\xb5\xf7k;\xaf\xf3\xbe*\xa8~#\xca%\xe3\xbey\xff\x8a\xc1\xf1(\xf1>\x08\x91\x0b\x0f]%\xcf\xbeljhG@ \xa0>V\xc1`\xdf<n\xe3>\xbb\xd1\xe8\xa4"6\xfa>;K\xbdft.\xe5>\xa4\x00\x9c\xa1U\xf9\xfb>\xae\xa9"W@P\xbb>`Eb\xf0$\xe3\xee>O\xe7\xf1>X\x9d\xe4>7\xe5)\xcfk4\xf3\xbe\xef~\xd1\xa2\xc3\xd6\xe7>\xd5\xd26[\x10\x8b\xb1\xbe\xb5\x98q=\xae\xe1\xfa>\xe1\xe6\xd5\xc5\xdd\xef\xed>\x11\x91?\xeb\xcc\x98\xe0\xbe\x08\x8f;\xc6Q\x85\xcd>\xa1E\x1c.\xd1\xea\xd4>\'\xd3\xaa}\xfc\x0b\xe5\xbes\xb1\x18c\xb8\x9a\xea\xbe\xd7\xfd5\xf3\xa0\xf8\x94\xbe\xb8s\x18\xbc\xb9\x12\xe8\xbe\xeb\x86\x0bJ\x0b\xf9\xe1>\x059\x1e}\xb0b\xdf\xbe\xec\xb83=\x1d\xa0\xaf\xbez\xe5\xc3\x8e\xb6F\x10?\x128\xf2\xc9\xa4\xe8\x0f?*>\x87\xab\x9b\x80\x0f?\xf3\x96dQ\xf1\xcd\r?\x80\xf2\xae\x9f\xe5\xec\x0f?\x8dL%o\xdd\x8c\x0e?v\x1c\xb2Y&\xaa\x0f?7"\x92+_\x0e\x0e?I\x1e\xea\xab!\x9d\x08?\'\x12D>\xa6x\x0f?pi\xc0\x15u\xf2\x10?>\xe5\xf9\xcf\xab\x9d\x0f?\x9a\xfd\x0f-\xa0\x05\x0f?SF\xef\x8b\xfd:\x11?#\x8bm\x85,\xff\r?\xd7\x84\x96\xbe<%\xf1>\xc8_B\x9e\xc2\xa2\xd6\xbe\xa5\x84\xc5\xbcb\xf9\xe3>J\x19-\xef\x17E\xf2\xbe9<\xed\xa0\x06\xda\xdf\xbe\xc3T\xe5p\xfc\x83\xea>\x8dy\xf3{\n\'\xb4\xbe\xcd\x1d.7\xbf\x05\xbe>\xd1\xe6\x97\x9c\xb5\xc9\xe1>\xe3^\x02\xbf\xd8C\xf2>\xe1r\xbb\xbe\xd9\xb8\xe1>\x83z\x97-o)\xf0>\x85\x8a\xce\xea3\x0e\xa4>\xd5|\xdfD\xd2\xdd\xe1>\xe12\xa4\xde\xcd\xca\xdc>{.go9\'\xe7\xbe>}\x84\xeeE\xba\xf1\xbe3\xb2!\x04;\xf4\xe7\xbe\xa57\xb4&\x08\xf1\xe2\xbea\x86\xb3f\xa2~\xfb>\xdaNb\x01~\xa5\xe9\xbe\xec\xb6v7N\x86\xe1\xbe\xa1<\x1b`\x07\xbc\xd4\xbe\xd3>7&\xdc\xb2\xd7>\xe8\x87+\xe5\xed\xb0\xed\xbe\xfa\xbc\x05V\xee\xef\xd8\xbe\xf3\x10\'\xc3S\xa7\xea\xbe\x0c\xc3\xfb\x1c\x98\xd5\xe5\xbea%h\x9aF\xf8\xe4\xbe\xe7\'\x83U\xe9\x01\xe3\xbem8\x8a\x88\x0b\xe0D?\xe3p\x19*\xd4\x17D?g\xee\xd0\xf9T\xe7D?{\xc0\xeb\x0b1\xccD?\x03# a\r\xc2E?\x01gN\xf00\x0cF?m\xfd(\x05P\xf9D?\'\xa33\xa7\xe9\x80E?3\x05\x0ct\'\xd4E?\x03&N\x99\x91\xb2D?*\x80e\xc0KEE?\xe1\x0c\xb7\xceE\xd3D?\x88s9FA\xf6D?\x172\xe3\x96\x7f\xfbD?\x11tY\xcb\x98\xf4D?\xf1\xf3\xe7\xb4\x8d\x831?\xb2\xf0\x9f\xa0\x97x1?\xec\x01Q\x1b\xee\xe91?\x97\x9a\xde\xees\x1b1??\xfa\x10\xd1U\x862?\xa4\x0b\xdf\x06\x1c\x022?\xd3i\r\xc6\xabS2?M4\x97\x8d?Z2?\x16\xa5R2\x9e\xc01?\xc0~\x8a[i+1?\x85N\xf2#\x95\xae1?:m\x98\xb1U\xb01?c7w\xd2\xb8\xb11?\x91D[a\xa0}1?B\x953\xc6\x98\xd81?\xac\xcc\xc3>\xefM\r?d\xae\x1a\xc1a\xd2\x0e?[\xe6\xb3\\\x1en\x0f?D\xacx\x04|3\x10?\x00\x9c\xa8\xec\x93\xfc\x10?\xb7\xd9\xa3\x03\xa6\xec\x02?`f\xaa \xf0\xcd\x0e?\xc0\x88\n\x02\x86g\r?\xcfx\xa5r\x022\x10?\xac\xa3\t\x9d\xff\xe7\x10?\x1bK\xde\x05\xa1\xb3\x10?\xea\x8c\xf4sQ\xc7\x08?!\xdd\xad\xa1\x11\xa3\t?j\xb7\xbe\x0cg_\x10?\x98G\x0e\x83u@\x11?Z\xacWQ\xbe\xaa\xfb>u\xb7\x80\x1a\xf2\xe6\x04?~\x89\xd2j\xafW\x03?\xe0\xf8\xafA\xc7\\\x02?\xda\x9fb\x86\x8d\x9f\x06?\x95\xda:Nw\xfb\x07?\x16\xceH\x101j\x03?\xe6\x01]#\x9b\x95\x03?\xae\xfcM\x9a[\x94\x05?c\xfa\x02\xbcCj\x08?\xac@\xec\xf90!\x05?\x9c\xfd\xfc&\x0e\x9e\xf5>~9}\x9d\x10\xf8\x05?\x95\xaf\x068w1\x05?\xb6?\xdcH[\xef\xff>\x02\xc4\x85\x15\xf6\xd4@?\r\x19\xfdR\\\xae@?\xe5\xf8\xb48\x83V??\x0e\x15E\xff\xf3\tA?=\x18\xe9\x7f~\x92B?@\x1e\xee\x10\x8d\tA?\x86\xf2\xa8\x90\x83\xb4@?;^\x06\xc4\x82\x82@?y}`\xc1@\xa6A?\xd4\xe7w\\\x85"@?\x7fF\xbe9\xbc\xc2@?;\xcc\x8f\xef\xfef??;\x0c(\x93\xc4\xde??_\x890\xe9\x9c\rA?T!\xa3i\x9e\xa8@?\xdfPu7u\xf4>\xbf\xa8"&\xbe\xce\x1c?\xbfM5\x97\xac\xf5c?\xbf\xf3\xf8\xe9M\xd2\xee>\xbf\xa5\x02\xcawp\xba=\xbf\xaeW\xc5V\x86\xec;\xbf\x10%\x91\xdc~\xe3>\xbfq;*j:\xc8>\xbf\xb5(\x95P?V>\xbf3S\x9b\xc4u[@\xbf\x92\x82\xb0\t d?\xbf\x15\x90\xd9f\xd5\xff9\xbf\xe1\x8b\xa2OhQ>\xbf\xd0\x0e\xee`\xb2\xd6?\xbfj\xee\xb4\xd1\x83*@\xbf\xf7\xb0(\xb1\x0f"\xd0\xbeL\xd0}\x87=\xac\xf8>\xe7\xb2\xdc\x91\xd9#\xf4>\xf3\n/\x06\x0b\xfc\xed>\xd8\xc8\xdb\x98\xdf\xc2\x00?D\xb5\xa9%\xe2\xf4\x01?\n\xfe\xf8\xee\xf4\xe4\xef>\x81\xdaYVE\xd8\xf1>6[\xb3\xe0\xc1X\xf7>:\xde\xc7\xbfp\x97\x02?\xfe\xd7\x19\xcd\x99\x11\xf7>\xe1\xe3Oj\x81B\xec\xbe\xd7\x9d\xaa\xf5\xe5T\xfc>R\xac*V\xe3\x9a\xf8>\xdc\xfa\xbe\x80\x17\x99\xcf>\x8c\xf2-++\x0eS?\xc8[\xdb\xbd\xdd\xfcR?t\x80\xff\xfa\'\xcaR?>\xd3\x03\xc0\xb3tR?I\n\xd8\xae\x846S?n:7tYtS?\x05+$\xa2f"S?+\x88+\x1b"\x17S?\xe3\xd1~\x95\xc3\xaaS?Cjv\xab\x94\xf4Q?\xde\xb0>g\x1f\x0eS?\xb5L\xd1\xd26uS?\x9e\xbc\xa1\xbd\xdd!S?e`\x11\xd2\xf0\xc0R?\xa3\x06\xbf\xcc\xf1\x9bR?C\xeb\x02\xe9\x1c#\x1a?\x1a\xa7Sk\xd3\x17\x1b?\xb7*\x9f\xdc\xe3\x9f\x19?\xbci\xb9\xa4\x06\xe9\x19?\x93\xe7}\x14nh\x1b?7\xac\xc3V\x11\xee\x1a?\xa5\xd7\xfa\xe8\xf6y\x1a?\xe9\xb3\x8eT\x9a\xf0\x1a?\xfc>4F\xc1\x8f\x1a?G/\xc5m\xcbz\x1c?Hq8\x0b\xd9\xa6\x1a?\xe0\xbb\xcf:\x9d\xdd\x18?`\'\x0c\x8eQ\x8f\x1b?\xccZ\xe7z\xdc\x01\x1b?\n\xdb\x00\x12\xb7\xc2\x19?{\xb8\x1a\xe0\xa8\x92\x91\xbe\xb8\xa7\xa7\xc8wf\xfc\xbe\xd0!I\x87\xbb\xe6\xfd\xbe{D\x9f\xe0Vh\xf1\xbeh\x7f\x7f\xba\xceN\xed\xbe\xf8\xd6\x00a\x08\x91\xe1\xbeA1<q\xa9\x9c\xf5\xbeD\x1f\x17\xffk\xfc\xf1\xbe\xb5x\x90\xce\x1c\x84\xf9\xbe\x90\x99pn\xc4v\x0b\xbf\x1b\xa6\x0b\xa6(`\x00\xbfJ\xa7\x96n\xbc\x98\xe1\xbeUn\xc4\x0f\x99+\xf3\xbe\xfc\xd4\x87\xd7\xfb`\x04\xbf\xf6\xf6\x17XWI\x00\xbf\xce\x0e~+\x08(\xf9>\xde\xf8/\x0b%\x84\x01?P)|xQ\xb6\xff>\xacG&\xf3\xc3\x13\xec>\rG\t\xc8\x89X\r?\xe5\xab\x05\xaa\x03\xe3\x02?s\x84\xb3\xb5\x1fL\xfe>\x8a\xce-\x7f\x1f\x1b\x01?\xb5\xd3\xf3\xe4q\xfb\xf3>2\xa6 \xadM \n?G\xec\xc1\x11Eo\x01?c\x9c[+\xce\x9d\xf3>\xc5\xb3AEz{\t?\\]CM\x9ec\xff>\xfc\xd3\x15Jz\x9b\xfc>\xcfvK\xa7+N$?J\x0b\xea\xe4\xe7\xd5%?#\xe48\x16@\xa2&?\x81~B\x0f{\xed%?\xe0E\xff\x84\x1af\x1e?\x9c\xbeF\x8b\x0e\xd5#?\xb5\xbe\xd8_\xbar%?\xdb\x8c.\xdb6\x01%?\x8e\x85\xbc\xe3h\xf8"?\xe8\xa3J\xf4\x18b(?ac\xdc\xeb\\_&?Z\x0c\x7fdG\xb4\'?\xd6\xae^c`8%?\rU\xf88)T\'?c.\xbd&\xad\xc9\'?\x97\x92\x8e3\x8e:\xe8>x{8g\xbeR\x05\xbf\xcc\xa1\xb2\x07\xf2\x81\x03\xbf\x7f2\xae]\xe4 \xf2\xbe$\xf5D\x80\x8c\x88\x0f\xbf\x00YuX)\xf1\xdb>\x98\\\xf2\x04\xb3h\xfd\xbe\xf6X<\x0bC\x89\xf9\xbe\nF\xf55\xd6\x94\xfb\xbe\xcd\xca\x14\x92\xbd@\x11\xbf> \x9foDt\x08\xbf\xffPk\x8b\x95\xed\xf9>G\x81#\xdf\xf7\xbf\xfb\xbe\x8aw#\x11\xe4G\x0c\xbf\x9b\xc4vi\x992\xf6\xbe\xc8<\xba\n\xdf\xc0T\xbfX\xe9\xc5-\xe51U\xbf\xf3z\x176\xa7\xd8T\xbf\xc9\xdfc\x80\x0b\xdeT\xbf \x03\xf9\x9f\xe2\xdfT\xbf\x8eK\xae >\xc7T\xbf\x0e\xef\xe3\xee\xf1\xdcT\xbf\xc77,\xe7\x9a\xddT\xbf8\xe7\xae6\x87\xd3T\xbf\x85\'\x0e\xf2\xaa\xd6T\xbf-ko\x8fS\xbdT\xbf!\xdc\x94\xc7*]T\xbf\x00\x13\x11!\xd2\x19U\xbf\xf6\xe5\xfd\xbc\xbc\xb8T\xbf\xd3\xff\xbfY|\xa6T\xbf\x9e\x1c\x08\x85r\xc1)\xbfpj\x81\xe3\x994*\xbf\x1a{\xc6q\x00\x05*\xbf%\xa2{\xff\x00\xdf)\xbf\xf7 \xffl\xb5T*\xbfD\xa0\x81\x03\xecQ*\xbf\x87@\x19\x94n\x0c*\xbfv\xda\x1dr\x1e3*\xbf\xf5\xdbU3\x11\xe2)\xbf\x85\x07:xVe*\xbf\x87\x04\xcd\x0f\x0b\x0c*\xbf\xd7\xc5q\x07\x12\xb3)\xbfU/\xa5&\x9aP*\xbf3P`\r\x9f\x0b*\xbf\x9c\xc1\xc33D\xf9)\xbf\xfa\x0e\x7f\xe0l\xc2\x93?\x1d\r\xc6,P\xc1\x93?[\xc2\x87K\xb0\xc6\x93?\x14\xc5\xa2\xe3+\xbb\x93?7\xbc\x9cv\x15\xbf\x93?\x9f\x8c\x06\x0e\xa1\xbf\x93?#\xe9\xad$\xe4\xc0\x93?\x1fD\xd7tc\xc2\x93?Q\xd4\xa2v(\xbf\x93?9c\xb8.i\xb8\x93?\xc1\x81\xf7\xc5\x04\xc0\x93?>\x8b\x88\xba\xfb\xc0\x93?\x9e\xa7"\xc5|\x8f\x92?B\x01\xf6\xa4G\xc1\x93?|9\x83\r\x82\xc6\x93?\xec\xaa\xc7\x97\x1a\x8c\xe2\xbe\x0e\x18s\xbd\xa9\xa8\xec><\x9b8V\x0ci\xeb>\xe9_\xed;\xea\xdd\xe6>hg2\xb2\x13\xc2\x00?8R@l\r8\xfe>\x0c\xd4\xce\x04\x9b\xf3\xe3>\xf39\x03\x95.\xb5\xe4>\x10."m\xbb\xb8\xe8>\x08]?\xa1\x92\xaa\xf9>\x8d_\xdf]6\xf2\xee>\x03t2_\xad\x9e\xd5\xbe\xeb\xd4\x8b+\xe6o\xf3>\xb1\xab\xba\xcaX\xf3\xf0>\xbb\x1e\x15\x9e\xe7\xbb\xbe\xbem\xea\xfa\xec\x93B\xea\xbeC\xd0\xb6\x04\xab\x03\xc7\xbe8\xec|\xd4<\x8c\xe5\xbeg\xeb\xfd\xdbbN\xf2\xbe\x903\x0eS\xc4\xdc\xba\xbe\xf3\x888\xa3\xac\xce\xeb\xbe\x8a\xfb^\x92\x88\xc2\xd7\xbe\x169\xd7H\x85d\xd4\xbe <\xec3Fh\xe9\xbe\xc5\x98\xe8PZ\xa8\xef\xbe\xd2`u\x12lg\xdc\xbe\x15\x84\xa2\x8f[&\xc6\xbe\xf8\xcf\xd8\xdaH}\xd3\xbe\xc5O\xc7\xffM\xf3\xe3\xbe\xf8\x18\xeb\xed6\xb2\xe0\xbe\xbc\x8a\xcd\xca\x16\x82\xeb>\x1f\xb1S\xf4\xbbW\xd7>a\xcd\x8e\x981*\xdf>\xf1@\\\x1a\xf9\x14\xf1>\xed\xdc\xcd\xa2p|\xd8>\x0f\xc9\xdd:\x87\xb5\xe6>.,\xcf\xf4\'\xf1\xc7>\xa5O\x8c7\xde\xa0\xd1>\xbev\xde\x9c[\xca\xe2>\x17\xa2\x94\x04\x17\xca\xe5>\'\x14OP\x03b\xd8>\x0c\x8b\x1b^\xc5]\xf2>\xaeH\x86cN[\xda>M\xd7\x9c\x1a\xfd\xff\xe0>\xe0\x06\xc0\xf0\x0c=\xe0>\xa0\xfa\x07\xaaV\xfc\xea>\x84M\xb0|Y\xb9\xd5>E\x0b\xd5\xb2 u\xe5>\xb0\xed\x9e!\xd4\x0b\xed>\xef\x18\xcf\xa4\xab\x01\xd5>\xb1\xf5#\x02 8\xe7>\x1a\xc47\x98\x94x\xde>\xdai\x05\x0f:|\xd6>;2L\x0e\x94\x1d\xe5>Q%u\xbfz\xfd\xe9>\xc5e<\xf1\x08\x86\xe1>\x97\x07\xf6d\xe6\xe1\xe7>\xb6\xb9\xf7\xb9\xf5\xe6\xdf>\xa5\xc3+\xcb\xc9?\xe4>r\xa6\x95\x8c\n\x10\xe2>*\xbe\xb7\x99\x10\x1c\xe2>\xed)\x93F\x00\xe1\xda\xbe\x83\x99\xbd\xfes\x8d\xd9>C\x9b\x02\xd5\xd0\x89\xb4>\xc3h\x8c\x04\x91o\xec\xbe\xf1\xf0(\xbe`#\xe7>\x11%U\x05\x8a\xaf\xe7\xbe\x15\x1bsO\xe29\xa6\xbe\n\x89\xed\xd8\x11\x1c\xdc>\xa1\x06\t\x0bJ\xd8\xf1>\xaa\x89\xd3.\'~\xd4>\x9f\xe6i\xe3\xc0[\xfa>Z$\x95Lo&\xd5\xbe\x1c\x9a\xae."D\xd3>\xcd\xaa\x89K\x00L\xb6>\xb8+\xbd\xe2\xb8\x8d\xf5\xbe\xbf[>\xf0\x1e\xf8\xf4\xbe\x8bP`\x993\xb8\xf3\xbenvEq\x16\xc5\xfc\xbe\xecsbq\x0e\xb8\xf4\xbev&\xc5\x85\xcf\x10\xf4\xbe_c\xd2\xca\xf3\x0c\xf8\xbe?\xb9\x00\xd45\x8f\xfa\xbe$\xf2\xf8MOg\xd6\xbe\xf6\xd6y0\xdd3\xf4\xbe\x81\xe1\x0c\xbb\xebY\xf1\xbe% f\xb9@;\xf5\xbe\xed\x91\xff\xe7\xbcC\xf8\xbe^\xfd\xfe\x1c|6\xf3\xbe\xfa4\x19\x07R\xe2\xf8\xbet\x93u\xfc\xbf\xbc\x11\xbf\x97\xc5\xc2~&\xee\x11\xbf#"\xc6F1@\x11\xbf\xd7u\xb8\xc4\x1b\xd0\x11\xbfn\x85\xeehG%\x11\xbfK\xfa3\x1d\xf2I\x12\xbfe\xce\xc2\x9bn\xdb\x10\xbf\xee\x00\x14\xe9A\xc2\x11\xbf\x03\xde<P\xb2\x18\x12\xbf\xdc\xca\xc0[\xb7b\x11\xbf\xa1\xf1 \xe0\xac7\x10\xbfV\xa5\xcc\x1b\xddV\x0e\xbf~\x9eh\xe0\x17/\x11\xbf\x13\x93\x8d\xd8T~\x11\xbfO\xea\x8e\x11\xd5\xa5\x11\xbf|\t6|\xd2 .?\xc8\xb6x\x981\xcf-?\xa5`\xad\xe7\x11A.?\xe5\x7f)F\xfa\xa3.?u\x85a\xf4\xee\xaa-?\xf1\x03\x8d\xe8\x02Q.?a\x18\x8e\xd9\xbdp-?)w\xf52\xfa\xac-?\x0c\xed\xf0\xe1\xd4\xa1-?\x80\r\xa70\x86\x14.?\t\x88\x13\xc8\xd7^-?\xcc=6\xae\x10\x86-?\x93\xf9|Z\x1b\xd4-?\x85\x9f\xec\xb3\x8b\xcf-?vp\x84v\t\x8a-?\x01\x19\xe9\xbb\x03C\x16?\x05+\x06\xfd/\xdd\x15?6E\xd5\x01|\xab\x15?\xf1\x95\xcbO\xfc\x08\x16?3\xd3\x8c*\xe4Z\x15?W\xb3\x16\'R)\x16?\xf7I\xf94\x01\x12\x16?\xe3LM\xacR\x87\x16?\x16\x14\xd2Q\x7f\xd6\x15?\xd8\xd71#\xe8\x9f\x16?\xf8\x8e\xb9d\xe3D\x16?\xf1R\xeb\x87/\xfe\x13?\x05j\xf8\x90p\x87\x15?\x87\xa9\xaaAp\xcc\x15?\x0cq&\xac\x04\xcd\x15?\xee\xa0\x89\x97\xe6\x14\xfa>\x91\xb5\xf91t\xec\xf5>\xc3{\x1fX\xe7e\xf9>\x1a\xcf#D\xef\xf4\xf7>X\xd5@\\\x9d\x04\xf4>\x00\x1bc?H\xaa\xf9>S\x95\xf3\xea\xcf\xba\xf5>O\xa7\x9d\xf5\xb4\x05\xf5>%\xd4?\x81\x0b\x0e\xf7>\x95kY\xf6\xf8\x89\xfb>r<\x88\xf5\x966\xfa>\x81\x92\x9a\xaa[\xc9\xf8>7\x04\x91\xacmw\xf6>V\x06\x7f\xddU\xe0\xf8>\xfc~\t9s?\xf9>.;\x1bC1{\xe5>\x0eQ\x07\xaes\xae\xe6\xbe\xc0)\xe9\xbb\x00\xf8\xe4>\xc0\x8e\x96\x9d\x15\x98\xd3\xbe/\x89l\xb0L\r\xf1\xbe,}3\xdd\rr\xec>\x1f\x9a\xba\xc8\x83#\xd8\xbe\xf6\xa1\xc35c\xd2\xc3\xbe\xaeaH\x9db=\xf0>\x92bp\x0c\xe8-\xf1>7=\x84\x1f\x97\xa2\xe2>?\x8a6\x1f!W\xdb>(\xc0\x90\xdc8v\xd1\xbe\xb6\x0c\xf6p\x14\x14\xe0>\xae0\xc0\xbb\xdf\x9e\xb8>s\xe5W\x18\x8c\xe2\xf2\xbe\x1a\x9a\x90\xdf4k\xc9\xbe\xda\x0b\xb9\xb4)\xfb\xec\xbe\x058<\xd8\x02q\xe1\xbe>4N\x00I\xb8\xbb\xbe\xbfm\xe0O\x81\xd5\xf1\xbe\xcab`w\x97m\xe3\xbeM\xa0G\xa1\x9a\xba\xf1\xbe\xc7B!\xe7\xb1\xfd\xf1\xbeX \xb05\x9d\xb1\xf3\xbe\xedf\xfa\xeb\x9d,\xec\xbe(\xe4\xb9\x08~\x8f\xce>\x11\xfc\x95\xc0\xda\x19\xe1\xbeR\xa0\x05$)$\xee\xbe\xd4%\tj\xef.\xe3\xbeJ\xdc\x17@a\xb1\xf0\xbe8\x03z\x1c\xb8\x8f\xda\xbe\xe7os/\x10\x9c\xee\xbe\xbf\xaa\x01]\x02q\xf2>\x7f\xb4\x8d\xc8x\xe3\xd3\xbe\x15^\xf6\xdf\xf1\xfd\xec\xbe\x9f\xeb\xe1(\xfa\x87\xdc\xbeL\xa8o\x074)\xd1\xbe$q}\x0c`\xb2\xe5\xbes\x99}\xa7c\xc8\xf0\xbe\xda\x1e\x1c\xde\xb5\x0e\xe8\xbe\xee\xefS\x93\xea\x08\xeb\xbe\xf5%E|\xe2\x16\xdd\xbe#\xe1E-P/\xe4\xbe\xc82\xcdIp\xdc\xe6\xbe%C\xf9O\xab\xb9\x15\xbf\xcc\x08r\xf4[C\x05\xbf\xa3\xe7\xfc\x11f!\x08\xbf\xc1\xeb\x1b\xe3>\x9a\x11\xbf>\x07\x17\xc9E@\x06\xbfv\x80OSf \x0e\xbf\xbe\xb9\x89\xf5\\\xdf\x03\xbf\x84\t\x8aw\x18:\x03\xbf\xd7F|\x97\xd8\xc5\x10\xbf\xa5R\x7fQ\xae\xa5\x0e\xbf\xc8\xf2\xddFCp\x06\xbfn\xbb\x98\xdc\xc7,\xf1\xbes\x041\xa8bT\x07\xbf\xdc9\xc8\xbf*;\r\xbf\x84\xe8\x83\xdab\x19\x0f\xbf\xbb\x06\x1cp\xf4\xe8\x00?\xf8\x15b\xcc\x9a \xe5>\xec\xf15\xd3\x941\xf7>m\x94\x9d#\xa5\xeb\xe3>\xe3W"\xe95>\xe2>\xd3_\xce\xf2\xd6x\xf5>v\xcbUt\xc0u\xec>\xe6#\xf4\x18E\xb5\xe3>\x87gr\xfdP*\xf6>\xe3m/\xc4\x1c@\x00?\x04"\x14\x80\x02\x06\xf7>\xfb\xf5d\x1d3f\xfc>\x0c\x9aWWH\x0e\xf1>,\x0c\xfb\xef=\xbb\xf3>\xc9e}\x7f\xaf\xd5\xf4>\xd2\xd1b\x06%l\xea>.a{M\x1b \xc8\xbeE\xf1\x0f\x1b\x8d\xeb\xdf>\xb6\x92\xff\xc1\x9d\x14\xdc>.\xb3\'"\x874\xd7\xbeSM\x0b\xdeF\x1e\xe6>\x9co\xe72>t\xbd\xbe\xf8\x9a\xee\x11#(\xd9>0\xd5\x8e\xa5;;\xea>\xbbU\xe9\xe3;\xbe\xed>\xa3\xd5\xd4M\x1d2\xe3>|._\xf2\x9a\xd7\xdd>{;("\xca(\xb4>CZ@\xe44\x14\xe1>\xbf,\xad\xf5Cg\xde>\xd7\xc2x%\xb9\x96E?\x01\xe6\xc74c~)\xbf\xa0\x98w+\xe9\xa3.\xbf\xff\x0f\xeb\xcb`91?\xf3\xaa\xd2u\x0e(,?R\x06\x91\xfe\xce\xd83\xbf\x88\xb4\x8b\x9e\xf7\x999\xbf\xe4\x19\xd4\x87\x9a\xad\x14\xbfQ]d\xe5\xdaq,\xbf-\xda(c\xa3\xc30\xbfH\x13j{\xbf\xb8I\xbfd\x99.e_W.\xbf^\xeb\xfe\x14\xa6\xf80\xbf\xad\xd8\xb2\x01=/Y?[F\x13\\\x88\x00+\xbfc\xf7-\xca\xf9_\xf1\xbe*<\xf5\xda\xc2\x9f\xe9\xbe\x9a\xdf\x87\'d\xff\xeb\xbe\x0c\x14\xb7\xad\x04\xc2\xe8\xbe J\xb9\x91,\xc0\xee\xbe\xd3\x0e\xef\x8el\xbe\xea\xbe$/\xfd\xd5\x9bI\xe6\xbeZ\xdd\xea{\x0f\x00\xe7\xbe\xac\x94\xbb\xc1p\x98\xee\xbe\x85\x89\x0fd\xf8a\xf0\xbe\xa9c<\x14c\xc2\xec\xbe\xb2\x9b\xccnS\x0c\xee\xbe\xfc"-F{\xd9\xde\xbe:\t \x1a\x979\xe4\xbe\x81\x96!)\xbeS\xf2\xbe\x89-\xe6\x12\x0c\xc6\x1f\xbf\xc7\xbe\xc3\xac\x1f\xa7\x19\xbf\xdb\xe4h\xcc\x0c\xf1\x1c\xbf\xd3\xb3\xccE6\xc1\x19\xbfrU)\x88\xd0\x1f\x1a\xbfE\xedd \xa3.\x1f\xbfM\xbd\x07\x0f8\xf7\x1c\xbf\xd7\x11\xae7>\x0e\x1b\xbf!\x9b\xeaHt\x12\x1e\xbfQ]r\x8f\x04q\x1f\xbf\x11\x96:\xdd\xf7\xac\x1c\xbf\x95\xbaQ\x98\xe3\x05\x1d\xbfC\x1c\xf8W\'\xd8\x1a\xbf\xe1\x92\xcc\x02\xc1\xb9\x1d\xbf\x97\xc7O\xdc\xa0\x8e\x1c\xbf1\xf5\xb0\xb9\xfei*?\xe9b\xd2\xfc\xa5x&?P\x14\x9b\x89\xa5\xda(?H\xa3\xa8\xb4.\xf1%?_]\xc4\xb88\xda%?\xb3p\x9d\x07\xfeQ)?\xec9\x1c b\xdc&?\xc8\x80\xf2\xb8\x07\xd4\'?\xbbo\xa2\x03\xd7\xd6(?\x8d/\r\xc2\xf3\xa7)?\x18\x9a\n\x83\x8d\x1b)?\xf8\x1d\xe0\x90\xd0\x1d(?\x9b\xffV\x94B\x8c\'?\x9c}\x8e"\xd7\xa8(?\x1a>\x98\xf9F\r(?\x16\x83\xf9\x98\x17\xfe)\xbf\xb3\x95\x9auq\xb7-\xbf\xd5y\x89\xb7[\x9e,\xbf\xca\xf4\xb4\x12b\xab,\xbf<V}\xc4\xccD/\xbf\t\xf5\xcb\xa2X\xce,\xbf\x03/w<@\x0c,\xbf\x91\xa1\xa5\x91Y\xcd,\xbf0m\x8a\x967c*\xbfCx\x863\xbc\x8c-\xbf|\xc0\xda>\x16\xc4,\xbf\xf24~\xb6\x8d4+\xbf\xd8I\x81\x9e\xcf\xa6+\xbf\xed\x1b\xed\x85\x91\xb3,\xbf\x10\x948\xf8\x03?-\xbf\xd7\xa0\x17\x08C\xfa\xef\xbe\xf6i\x8f\x00\x85\x12\xa0>\x9f\x9bF\x96`\xfc\xe5\xbeC\x10o;\xe5\x05\xe7\xbe\x954H\xcc\xc2G\xb4\xbe\xe0\xab:\x92\x85\x93\xe9\xbe\xae\\<z\xfe\x1e\xd1\xbe\x1e\x13\xb8\xb15l\xc9\xbe\xcdp\xa2\\\xd88\xe3\xbe\xf1\xb4:P0\xa5\xf1\xbeM\xf1p;s\x91\xc4\xbe*\x00\xc1fy\x91\xe8\xbe2\xe6\xbe\x94\x9a\xf3\xc6\xbe`\x8a9\xab\xba\x8e\xe2\xbe\xeeI\x89\xfd{K\xdb\xbe\x90\xc2\xe7;\x18\xf1\xf1\xbe/M\x1f}\xb4\x8b\xf4>\xad\xd7d\x89\x05\xc2\xc9\xbe7\xc6\x96z.\xa9\xe4>\x18Bt\x0cE\xde\xf6>\x0c\x85\x84\xe2\x8e\x19\xe0\xbe\x83\x8dO\xca\xe9\\\xf0>\x8e\xe8\xb1\xe8`F\xe5>\xe5\x95\\\xcci\xbf\xc4\xbe\x1e#\xb2&\xbbt\xf2\xbe\xd7C\xa6\x14\xe6\xb4\xa8>5\xe8\xb2uZ\xec\xe0\xbe[\xd6s\xccb\xb3\xe6>{"\x875r\xb4\xbf\xbe?4\xd1\xffF\xaa\xca>\xaf\x0b\xd1\xc1\x03\xcb\xf0>\xaa\xce\xa5\xc3\x15\xae\xd7>_\xee\xe7\xc9 \x88\xe6>\xe4d\xf4\x1fS\x08\xed>Ip\xac\xda\x17\x14\xe1>\xa8\x0cGA\xaf7\xe7>\rE\x1c\x8c\x85K\xd7>\x83\x0c\x8d\x1f\x0b\xca\xe3>\t\x18qK\x8a\x02\xf0>\x87(\xe1\x1cJ]\xee>\xea\xb1\x97\xf6\x93\x0f\xdd>\x95\xd5qU\xbeg\xc9>\xfe;cf6\x05\xda>,?{\x7f\x8d\x90\xe2>8O[T\x9c"\xe9>\x9b\x07\x98\t\xafy\xf6\xbe\x05\xb8%\x15\xbe\x87\xdc>\xa8c\x10lM\x11\xe6\xbew\xf6\xd2\x13O\xfb\xda\xbeOD\xb5\xe4\xe9/\xe2>\xbe%\x82E\x92u\xf0\xbe\xa79z0S\x8f\xc8>\t/s\x8e\xc7o\xc2>M\xd2\x126\x0br\xe8\xbe:\xd3Hc\xe0\x85\xf8\xbe\x1a\xb0\x8a\x0e\x0er\xb9>\xf6\x15\xf9\x8cD\xe3\xee\xbe)\xedO\xabL\xfb\xb2>qi\xb3Z\xfd4\xe9\xbe6%\xb6|p\xe7\xdd\xbeEh\x9c\x1a\x12d\x1c?\xd8\xb9\x14.\x82y\x1c?\xd6]\xfd\x04!\xc2\x1b?.\xb0a\x9f\x1e|\x1c?u3\xd9"&\xa4\x1c?a\xaai\xab]U\x1c?m\x05gS\xe8Z\x1c?6#JP\x1c#\x1d?3\xb6\x9d\xd7?\x93\x1b?\r\xef\xdec@\xd6\x1c?\xf7r\xbf\x97-P\x1c?6\xfe\xfd\x83-O\x1a?U\x1f\xaa\xcc\x9d!\x1c?I\'*l\xf78\x1c?:\x18\x0c\xc4\xf8\x1e\x1d?\xf6\xdc`(\xb4x\xf0\xbe\'U\xb1X\xce\xc6\xd8>\xc1\x97\xf5P-\x94\xde\xbe\x83\xfc\xdez|D\xce\xbeWs\xca\x8e\x9eo\xd9>HL\x12\x8d b\xe8\xbe\xfe\xef\x05\xd7=.\xd0>!F\xe8A\xef\x1a\xc1\xbe\x88\xa8\xd4.5\xef\xde\xbe\xf1]\xb21"=\xf5\xbe\xa3\x99$\xd1=\xa4\xc2\xbe\xdb~\x86\x1d\x0f\xdd\xd4\xbe\x8f\x0c%8!\x16\x94\xbe\x04\xaf\x81\xe7\xc3\xaf\xe3\xbe!\xae\x109\xf6\xe2\xce\xbe3M\xb0\x9fk,\xff\xbeC0S\x95\x04\xff\xbe>\xd6{:\xabho\xf5\xbe\xc7>0\xf3Z\xe0\xf1\xbe\x8e\x0b\xb7\xfdz\xe5\xd3\xbe\x1f\xd1a\x1d\t\xa3\xf6\xbek\x1d0tm\x19\xd4\xbe\xc1\xfa\xae|\x05\xc0\xe1\xbe\x16\x04r\x9f\x93\x12\xee\xbe\xd5-)\x88\x91\x9d\x00\xbf\xd2\xc8\xf5\xcdg\xf1\xc7\xbe\x01\xa5\xf6\xd6\x06\x98\xfc\xbei\x8a\x9a\x83(\xee\xdd\xbe]1q\xd2q\xc5\xf2\xbe{\x83(\xc4\xb45\xf4\xbe\xfb\x1a\x0f\xaby\xeb4?\xf2\x9e\xe33\xad.5?\xdf\n|\xc8\x9f\x8d5?\xb1\xd9\x06\xea,X5?\xa8\xe4\xc3\xe7\xad\x1a5?\x0f\\\xd0\xd3\xcc\xf14?\'\x13\x84\xf0+\xb94?\x96V}B\xc1\x125?\xaf\x8e\xa7z\x9c$5?N\xe6\xad\xa9\xa8\xda4?\xa79f\x82\xae\x195? \xd8\x95\xef\x13A5?\xee\xc5I\xa7\x02=5?\xb5T8\x1f\x9c\x015?|\x15^\x81\x88\xe84?\xf6u\xfb\x9b~\xe9Z?\xdao\xdc\xe6<\x0c[?\x18H\xa3\xf4i\x07[?\xc5\\\xeb\x13\xd7\x03[?\xa9\x1d5\x1d\xf6\x08[?\xf3!\xa3,4\x14[?\xc9D\x08\x02\xeb\xfaZ?\xc9\xdf\x8elL\x0e[?\x92(W\xde\x8b\xeaZ?\r:9\x0e\xa3\x11[?n\x02_\x12\xd2\xf8Z?\xb6\xeaSl\xc5%[?8jq\x1dx\xd7Z?\x123&\x18\x05\xf2Z?\x9b\'{\xa5\r\x11[?\xf7\x10\xe2`\x16\x15A?\x9e2\xcb)\xa4\xd2@?/\xa1\xa3\x9cL\x99@?c\x9b\x07\xab\xc2\x1bA?\xe2\x1fm\x15\xa6\tA?Tr\x1f\xbf\xbd\x8a@?\xbd\xe3Z!\xe6\xa9@?\xc9:\x8f\xed\xf4\xd2@?\xb5W\x02\xfb\xb8\x9d@?\xdf\x07\x03\x83\x04\xa7@?g0IZ\xa68@??:\xc4\x90\x12\xa4@?u\xf8f\x89\xc7\xbc@?\xfe\x97\xe3\xcf\xc2\xa6A?\x8dFp\xf9R\xa3@?\x89\xb1\x8d[\x95\x06\x8c?\xa8\x8b6x\xa1\xb7\x8b?#\x1e\x8f\x9f\x88\x11\x8c?(\x05n6\xd4\xc6\x8b?j\xbd\xea\xe5\x9b\xfb\x8b?j\xaaQV\xc3#\x8c?\x1e7\x8a\xd9\x84"\x8c?p[d\x8b\x89!\x8c?\xd1m_\x96\x96\x1e\x8c?zXb\xc9\x93\x1d\x8c?\xb6|\x91tN\xe3\x8b?1\xda\xe8\x1d\rQ\x8c?\x05>\xb36\x14\x18\x8c?\x91ME\xf2\x17(\x8c?Z\r\xa2\x11\xa9+\x8c?`L\'0\x04a\x19\xbf-\x19\x88\x9cb\xaf\x19\xbf\xe8\x8f2N\x95\xe4\x19\xbfh\xccC\xe52\x9c\x1b\xbf\x97\xb1\xbd\x1b\x1f\xbd\x1a\xbf\xa1q\x893\x11(\x14\xbf#6\x90K\xb7F\x1b\xbf;\xd9\xf7f\xe95\x07\xbfc9\xed#\x807\x1c\xbf\xc9\xe4Z\x17\xf6a\'\xbf?:>A\xa8\xf8\x15\xbf\x8a\x14\xd3\xa7b\xc2\x1c\xbf%\x86\x18\xb65\xa9\xff>\x11R\xcd\xdfn\xd4#\xbf\x8cDDHm\x0b+\xbf*\xea!Cg:\x17?\x1a:\xed\xb5Zb\x13?\xe0\x9f\xa7\x9f~\xca\x14?\x17\x18\xac\x1ekH\x13?\xbc\xea+z\xe0\x19\x14?I\xd0\x95\x8c\x06U!?\xd5\xe0z\xc8<\xae\x15?Kj\xa0\xfcA\x9e ? \xe6\xe4\xb5I;\x15?^\xf5\xf8\xabn\xcb\xf2\xbe$\x82\x04\xbdB\x97\x0e?\x7f \x13U\xa2\xd2\x1a?*\x83\x15\xbc\x99\xd5(?I\x1c\x92`q\xd6\xfc>\x8a\xe2ka\xa8\xd5\xe6>\xa9\xff]\xd6K\xf3\xea>H\xb3\x19-\xbb\x8e\xd6\xbe\xe0\xb9_\x13\xb6\xa6\xee>\x04-\x89\x81\xd0\xc9\xc7\xbe\xae\x90l\r~?\xe1\xbe\xbb\xec\x82\xc8\xe8\x92\xe5>GH\xf40\x0f\xcd\xd1\xbe\xc0\xe8\x0f\xc3\x98\xc6\xb3\xbe\x99n7\xefc\x03\xd3>>c\xef0\xda8\xf0>\xca+\xb4Y=\xea\xcb>\xaeH\xb7\xf6\xba.\xe0>RYa\x07\xe6v\x9a\xbe2\xff\xdaz\xb8n\xdd>qp/\xd4\xf7}\xc6>8k\xa2\x873\\\xe9\xbe\x9c\xc9\xa9\xea\xc2 \xb5>Eg\xea-\r\t\xdb\xbe\x88V\xe0B"\xdb\xd4\xbeoGRl!\xdf\xc7>[\xde\xa4s\x16x\xe0\xbe\xcd<6M\xe8n\\\xbe\x9a\xec\xa3\x1eY\xd1\xa5\xbe_^\xfa~\xacP\xc6\xbe\x1b\x82\xaf$\x9a\xb6\xee\xbe\x96-\xe8+\xa7\xb9\xc4\xbe\xe9\x87I\x1f\xc8\xab\xe4\xber[\x17\x9d=x\xcc\xbe\xd8}\xe5\xc6@\xe0\xe0\xbe\xafv\xd3^\xdf\xcb\xd3\xbe\xf1\xdeG(\xb5\x94\n\xbf\x1d|\r\x16/\xea\xf1\xbe\xe1\xb0<EY!\x03\xbfG)\xed^\x12\x93\xfc\xbe\xcdEK!\x81\x89\xe6\xbe\xdaR\xad\xea\xc6\x07\x07\xbf\xc7\xb0I\x94\xaf\x84\xec\xbel\x144\xf5\x93\xcb\xf3\xbe\x9c}=h\x96\x88\x07\xbf\xa4\xd5r\xea\xbf\xc8\x0b\xbf\x9eXI\xcc\xdc>\xf9\xbeC\xd3\xd4O\x85\xa8\x0e\xbf\xbf\xea[<\xbd\xfc\xf8\xbe\\\xb6\xa5g}w\x03\xbf\x18\xc0\xb9\xdd\x1e\xc1\xfd\xbe\x7f\xf3\xa9\xc7\x10X\xf5\xbe\xf6\xb0 \xce\xa1\x11\xbb\xbe\x97\xa5\xb1"\x8b\x04\xec\xbeM\xcd\x9a\xcdS\xac\xad\xbe@\x99\xca\x08\xf0C\xbf>\x1bl\x06\xbet@\xf0\xbe$5\xa5\xf4(F\xc1\xbeJ\xbeI0)\xac\xdc\xbe\xb6u\xaa\x9c\x03"\xe5\xbe/\xcbQu\xf1[\xf5\xbe,\xa4>5\x1f\x16\xe7\xbe\'"{\xefZ\xfe\xeb\xbe\xb3\x06\xfdK\xfe\xfe\xdd\xbeM\xdd\x9db\xd5\xee\xe8\xbe\xac\x8c\x88\x8dC\xba\xe1\xbe~\x7f\xea\x0bT\x17\xeb\xbe\x9a){5\\r\xdc\xbe\xac\xdc\xa9\x8d[\xe7\xe5\xbe\x8d,\x1f\x96g\xa7\xea\xbe\xd1\xc8\x0e\x91\x11\x80\xd8\xbe\x9a\xc4\x11\xdb\xe3/\xe9\xbeH)A\x10@\xde\xd3\xbe\x13\xf9&\xc7u\xe6\xd3\xbe\xceV@\xfd\xe4\xd4\xe0\xbe\xdf\xae\x10c\x9b"\xef\xbe\xf3\x06p.\xb4H\xde\xbe0|\xf2\xc4\xff]\xea\xbe\xfeUoh&\xe3\xdd\xbe\x84\xc40\xe4\'\x7f\xe6\xbe\x9c\x13\x92T\x80\xdc\xde\xbe\x83Iy\xe5\x95\x1e\x13?>5-i\x95\xc4\xf2>I\x9bJ\x00\xc2\x8d\x0b?+\x87\xfaO\xf3"\x01?\xc4\x8c3,\xa8W\xf2>V/\xc6\xe9\xd3\xd9\x0f?P\xa5\xac\xe9\x0f\x83\xf1>\xa4\x8d\xb6\x03\x93\x8b\xfa>\xda\x05\x9c\xe8\x8f\xee\x08?_eU.i\x07\x14?\xa6\x11[\xad\x12n\x04?C\xf1\xa9\x97\xd8\xc0\x19?"\xeb\x8d\xeb\x8aC\x00?\x16m\xe4S\xbea\x0c?\xd1\xf9\x8e?\x10x\x06?,\x94\xa1gF\xde\x14\xbf\n\x96\x9a%\x99-\x11\xbf\xf7\x02>\xc4\'\x94\x12\xbfkl\xe4\xa5\xeaV\x11\xbf>\xa7\xcf\xc1\x1a\x85\r\xbfQ\xf9\x94\x902p\x14\xbf\xb4\xd3\xe1\x1bU\x89\x11\xbfh\xfe\xadt~\x8c\x11\xbf\x9b\xa7\x0c\xd6\x85~\x13\xbf<\xb9Q\x815\x0c\x15\xbf\xfa\x92\x01E\x06/\x13\xbf~0D\x7f\xbd\xa0\x13\xbf\x7f\xaa\x8c\x80\x19\xd0\x17\xbf\xc7\xbe\xef\x89}u\x13\xbf\x1c\x11\x806\xe2_\x13\xbfw\xe1!\x8c\xdc_\xf3\xbeC,\xfd\x82U=\xd9>\xd3A\x8d\x98\x1b#\xdb\xbe\xfbx\xb2;?\x98\xa4>\x1ft(qz\xf0\xd6>\x83.\x05M\x14\xc6\xe9\xbe\x08WL|\x13\xc2\xc0>@\xac\xda\xfen\x0c\xc6\xbewwi\xf5\x8aU\xdb\xbe\x1f\x8d\xbca\x1bO\xf3\xbeE\xad\xe7\xcc\xff\xfe\xcb\xbe1\xac\xf0\x92m]\xf2\xbe\x00+x\x8f(\xab\xa8>w[c\xe9\x86e\xe3\xbeh#\x9a\xd5s\x8f\xcb\xbe\xac\x07\xa4oY\x919?\x11\x0b\xf9\x9fcX:?\x98\xae\xd6\xd8\xfa\xb49?6S6\xdf\xa1\x92:?[\x1d.*3\x18;?\x03$hNm\xa99?\xee\xf8\x1c\xd7U\':?\x16\xc0\x98\xa4\xbe9:?v6\xa1\x0fy\xd29?\x83\xd0\x11]0o9?D\xac%\x9a\xed\x9f9?5R\xe0F\xd7\xca9?\x80\x89\xb9 \x14\x878?\x97\xdd\xfa\xdc\xfa\xaa9?\x15\xdd28A\xc09?\xa9\xffu\xdb\x05\x979?\xd6D\xbaI\xf9\xc58?\xd3v\xcd\x15V(9?\xc7&T\t{\xf47?z\xa1\x81L\x91\xaa7?\x9e\xd8\xb6m\xdd\x929?\x01\x81\xf0qk18?u+\xa2\xbeq\xfc7?-\xf7upg\xfd8?\x0e\xa9\xef\xbf\x89\xe89?\xe9\xad\xa9\xd8\xfdn9?\xe7\xb7\xc0\xdd&\x169?(^\xa3\xa1\xde78??\x1fI\x1e,\xa68?c\x07\xebU\x88<9?\xd8sS\xc5\xdd-\x07\xbf\xd3\x99\xcb\xa5K\xcb\xd5\xbe\xdfj\xa3\'^d\xff\xbe\x17\xdf\xc95\xfe\x94\xfa\xbe>\xbbfY\xce\x9f\xdd\xbe\x83)8\xc8_\xa2\x04\xbf\xdaP)z\x9fO\xe1\xbe ,?\xef\xa6\x1f\xe8\xbe\x96\xdd\xd80\xc9\xfa\xfc\xbe\n\x8b\x13\xd3r\x16\x07\xbfE\x96\xe0"Va\xf3\xbe/z{\xdb\xac>\x07\xbf\x8a\x9b\xfc9wB\xe8\xbe\rrc*\xe8\xf7\xfa\xbe\x93Q\x81\x98Q\x15\xfa\xbe\x13\xe03\xe3\xf7,\x16?#&\xe8\x9a\n\xeb\x16?\xb5\x85\x87\xa8\xe9\xcf\x15?\x9b\xe7\xbc\xc8\x85\x85\x15?-z\xa1\x8d\xcb\x97\x15?\x15\xb0\xb8\xd6\xe7\xdf\x13?\xb1%\xd0\xc4\xf1t\x17?\xa1FF\x07\xd1\xc2\x1e?\xb5\xcbu\x08\xd8 \x15?\x94\x0fV\xb1\xba\x85\x12?\x13\x0b$\x19B\x8a\x17?\xe0\xf3A@\x1c{\x15?\xc7Y\x81\x8fI\'&?\x1a\n\xce\xec\x9a\xa1\x18?IMw,;_\x04?e(\x9a.\x14\x1e,\xbf\xf0\xb8G\xdd\xe0J*\xbfj\xa6P\x917\xda+\xbfVR0\x02n\xbe)\xbf\xe8\xff$\x9e\xa6\x80*\xbf\xa4m\x8a\x84n!,\xbf\x84\xb7\x88\xdcK\xbb*\xbfS\xa2\xd6$\x8b\xb0*\xbf\x0cnh\xa5W0,\xbf\xdfC\r\x13\x83\xdd,\xbfX\x8d\xd01\x94j,\xbf\x11\xc5\xa8\x8bP\xc4+\xbf\x0e\x08\xa6\x81\xf4?*\xbf\x08)\xdc\xdf&=,\xbf\x7f\x8f\xcf\x10\xfd{+\xbf\xe7/\x17\xa6*\x95\x16\xbf\x03L\xe2\xbe}f\x16\xbf,Q\x05\xc7H\xe9\x14\xbfZ\x9a-`\xb3w\x16\xbf\x03\xc8J\xebK1\x16\xbf\x08)\xf2\xb3}H\x16\xbf\x10\xc4t\x87\r<\x1b\xbf|\x9fn\xd7x\xf9\x14\xbf\x89\xa7qu\xec\xd6\x15\xbf\xd9\xc6*\xd9d5\x14\xbf\x813\xbf\xdb\xbd{\x14\xbf\xc3\x94\xc6\xd0\xff\xd8\x0f\xbf\xc5|\x19\xa7\xddC\x18\xbf\x96vu\x91\xac\xb2\x07\xbfL\xa3\xd9\xd9\xa9\xf4\x16\xbfiC\x8b\x00\xd4\xb7\xf1\xbe%\xf9Q\xe7>\x97\xe9\xbe\x08h\xaaO;\x89\xee\xbe\x97\xf0\n\x81m]\xd0\xbe\x1cv\xc8\xa0&^\xc3\xbeE\xe4\xd0\xc3*M\xf1\xbe\x90ih\xd2b\xaa\xda\xbec\xc1\x86\xfcV\xfd\xde\xbe\xf0\xe8#\xdb\xcal\xec\xbe\x83L\xc0x>N\xf1\xbe\x1c\xf1G7\x8d\x19\xe6\xbeA\x81\xa8&Gp\xee\xbe\x83\xe9\xb1\xb7=\x91\xdd\xbejq\xb2\xca\xdb\xb4\xe8\xbe\n\xff\xfd\xd8\x94;\xe6\xbez\xfb\xda\xce\xc8\xdd\xfb>\xdb:\x18ZY\xac\xe2>v\xb3\xdd\xc8\xfe\xef\xf5>\xaa\xfe\xb1\x8a\xcb\x86\xe0>I\xa0\x9d\x13\x84\xe8\xe7>\x11`\xd5\x1a\xa4\xd6\xf8>\xca\xb1\x05\xb1\x06\xb5\xea>\x8a\xc6\x932)\x8e\xf2>\xb5\xc3(\x8e0j\xf6>\xd3\xe2 ~\x12\xdc\xfb>\xf1/\xc7\x1ct\xc1\xf4>\xa39\x95\x08\xe9Z\xf5>\xd5l\xc0\xa2c\x1d\xef>\xc9\x9d\xd4\xf8\xfe\xde\xf4>\x80d\xa5\x9cY0\xf3>\t\xa0W\x99&\xa4\xf8>\x87\xa0\xc9@\xac)\xf2\xbe\xf2\x14\xfe\xf7\xa3\x9d\xf0>d\x00\xa1\xc2\x85\xfd\xea>\xc4\x9aN\xdc\x05n\xed>#3pb$8\xf6>\xe7\xf80\x00\xab\xb0\xdf>\xdc&\xbd\xe4\xd5w\xde>{\xd2\xb1\x06\xc5\xd7\xec><Ehp\xec\xe1\xf1>\xe0O-\xd5\x07\xfc\xf2>1\xff\xb85\xa9\xfc\xf4>v;\xed\ri+\xd6>\x01\x8d\x8d\x16H\xa5\xe9>\xc3<*\x14\xf3\xaa\xe7>n\xf9-\x06S-U?<\x0f7\x17\xc3\xdaT?\n\x0b\x82\xa4\xbe\x19U?\xdf\xda\xd0\x10\xd5BU??-\x8a|%>U?\x7f\xba\x96\x0f\\5U?\xd2\xe3ZO\x03\xe7U?`7\')MKU?\x00>a\xb1ZOU?\xcd\n\x14\xb37\x93U?s\x8ec\x97\x89\xb4U?2D\\i3\xb5U?u W`\xd6`U?x?\xcc\xbd\xa3\xa0T?\x1b\xffE\xf4r\'U?\xa8\xd1\xc1\xcaB\x81\xf1\xbe\xc7\x7f\t\xb0\x97Y\xd6>\xd5\xd9\x85\xb8\x12\xba\xd9\xbe\xec{\x81\xe3\x02\xf6\xd2>\x88\xd3\x03\xcd5\xd1\xe1>\\\xe6\xe6\xe0\xfa\xeb\xe7\xbe\xa8\xa3\xe3i\xf6\xc5\xd0>H\xa1\xdc\xfb\xc5O\x9e>\xc5\xad\xab\x8dx-\xdc\xbe\x15\x83VI]\xf9\xf1\xbeO\x85\xc8\xa6\xa6\xdd\xc1\xbe\xdc\xb589/`\xe2\xbe\xa1\'(\x1f\xef>\xc4>\x04|aqb,\xdc\xbe\'\x16\x1d\xea\xaa\x8f\xc9\xbeI\x0c\x0b\xae\xea\xc6\xf9\xbe\xc7\x12\x9a;\xc0@\xe2\xbe>\xb3\xfd\xbe\xdat\xe2\xbe\x00R\xcc\xa8\x15&\xde\xbe_\x9b\xdeI\x0c\x94\xf0\xbe\xb0\xaf\xc6\xfeM\x80\xeb\xbeH\xa4c\xec@\xd2\xe5\xbee\x1fTS\xd0\xe0\xe6\xbe\xd4&\xac\xd9[a\xf4\xbe\xd5\xaa\xf1\x06\xe6\x08\xe5\xbe\xa8\x06\xfd\x97;\xf3\xe8\xbe\xfc\xc2\xf6\xbac4\xeb\xbe\xf1\xc3Nj\x8e\x1f\xe6\xbe?.Ed\xb5\x8a\xe9\xbe\xe4\t\x91;\xb4\xf3\xe4\xbe\x92\x8b`\xb6\xb9\r ?7\xeb\x15\x98\xcb\x91\x1e?:\xadk\xb6\x90h ?v\xa4.f\x1d:\x1d?\x9e\x03N\xcdu\xa5\x1b?\xe5\x0eB\xb6\xeb\xa3 ?\xde\xc9\x9f\xa4\xc9\xbc\x1f?(\xae\xca\x02\n\xa9\x1e?n\xf8\x17\xfdIP ?B\x02\xb0\xa0#[!?\xc3D\x96\xa5\xea\x90 ?\x9d\tS\nS" ?_\xcb\xb7\x90\x88\xfd\x1e?\xaa\x96\xff[\x04X ?\x93\xfc\x85\xbe\x1f. ?\xed\xa6x1\xf6\xaa\xfa\xbe\xb8\xa6GA\x03\x12\xc1\xbe\x1e\xe0\xc8\x00\x1f\x15\xf2\xbe|\xa0b\xe3"\x91\xb1\xbe[\xdf\xeaOhG\xe9\xbe&\xad\x95Cvx\xf0\xbe\xcf\x8aAx+y\xf1\xbe;\xb1UL`^\xf0\xbe\xb6\x94\xec~\x18s\xf4\xbeC\xc0\xea\x88/\x8d\xf8\xbeR\x98\x06\xa5\x03\x14\xf5\xbe|\x0c\xc5{\x84\xc4\xf8\xbeA\xdf\x9fPkJ\xe5\xbe\xae\xefi\xdbp\x8c\xf2\xbe\xf6=Vg\x00\x9c\xf2\xbe?vW\x85\x9e\xf2\xe8\xbe\x80m\x02\xdb#\xb0\xe8\xbe\xb1V\x91\x92{\xb7\xe3\xbe\xd6\x19\x81Q\t\x1f\xe3\xbeE\xe7\x9e7\xe0m\xd9\xbe\xb6\x19=\x11\xa6B\xe7\xbe\x8et6\xd1\xcbH\xd7\xbe\xe84\x19\x81$\xeb\xdb\xbe\xc9\xdf\x01\xb3]_\xe0\xbea\xaf{\x1a\xa9\xd2\xe7\xbe\xc8\xd9+0+I\xd4\xbei\x08\xc1\x0cbB\xed\xbeGL\x0fX\x13\xfa\xd6\xbe,\xe1\xf7\xdexW\xec\xbeh\xee\xb9\x02\xcb\xea\xde\xbe\xec\x89\xb9:\x94\xd6\xea\xbe~\x06\xd8\xd1\x87\xe8\xda>c\xefec\xe4\xeb\xdf\xbe\xa4pd\x84\xb7*\xa1>@\xe2\xc3\x16\xa6\xe6\xd8>\x00"\x0f\x89\xfe*\xe7\xbe\xc9\xe4\xef\xdd+\xc8\xc4>\xcd\xb7]\x95PS\xa0\xbe\xc0\xa7\x0b\xa2P5\xdb\xbe\xc9\xea\x89\xe32"\xf2\xbe\xe1\x9c\x94n\x11\xa6\xbe\xbe\x08\x0c\xc5\xb6F\xab\xea\xbe\x1ab\xde\x8a\x85\x14\xb0>g\x80\xef\xb6\xe9\xb4t\xbe\xafw\xdb\xe0\x95\xf7\xd2\xbe7\xed^\x022\xb6+\xbf\x12+\x13\xb10\xc3+\xbf-q\xfb\xbd\xff`,\xbf\x98\xd6N\xb4\xbc\xfb*\xbf\x1c\xf98\xc2@\x15,\xbf|\xcf\xf9u_\xb9+\xbf\xdb\x1a\x949\xdeX,\xbf\x00\x1c\x14R\x96^,\xbf\'\xfa\x03\xda1\x13,\xbf\xad\xcc-E\x13\x14,\xbf\xf2*\xef\xc7\xf9+,\xbf,byt\x9da,\xbf\xec\xae\xca\x08\x9a\xe0+\xbf\xd8\xac\xedgR\x10,\xbf\\PP\xba\xdde,\xbf\x84~\r3!\'\xf2>\xb0\x92\xe7\xabU\xee\xeb>\xa1\xae=\xb3\xaag\xf1>\xb8\xf8\xc0\xae`Z\xf1>\xb6\xf26\xf3\x84\\\xef>v\xffN\xc5T\xe9\xf3>\x05U\xd2oM\xc8\xf0>z\x0cj&\x90D\xef>\x9a\x17VB\xb6\x0f\xf2>\x9e\xebW\xebG\xac\xf1>&3\xe7f\x0f\xeb\xf3>{\xef\x86\'\'\xfa\xf7>\x80`\xef\xfc\x84\xc1\xf0>\xd5\xa4f\x89\x13#\xbf>\xd5\x0f(a\xc8K\xf0>\xd3\x94\xad\xbb\x05\x95!\xbfu!\x9c\xf8&\xee\xf7\xbeh\x86\x0c\xd6x\xd7 \xbf7!\x90\xdb_1\x1f\xbf\x18\x81ZEV\xe0\x1d\xbfS\x07\xe0\xaf\x8f\x9a"\xbf@e!\xd8`\xc1\x1f\xbf\x8cQ\x0bG\xa7\xc4 \xbf\xb5\xb8\x17\xa7\x16=\x1e\xbf\xacU.\xea\xbbX!\xbf\xdc\x8ctY\xf1\xdf \xbf\x1fU\x18\x1c\x0c\x8a \xbf\xc4\xe8|f\x0bN\x1f\xbf{\xc0nn\xf5=!\xbf\xb5\xc8\xbf\xa6^= \xbf6\rgR<\xdd\xf7>>\xf6\x8cyq5t>\xbf\x1b4\xa4\xfc\xe4\xf3>\x8a\xb6\x1b\xba(8\xe9>lA?zVc\xe5>\xca\xdfB\xa9\x8c\xe3\xf6>\xac\xf1O\xdb\xebf\xe9>\xee|\xff\xe7e+\xed>\n\x0e\xf9\xe4<\xd2\xf3>\x9crL\x81\xae\xc4\xf7>\r\x02\xcf/\xa8\xf9\xf5>|K-\xc9\xcd1\xf4>5\xd3\xcb\xf9\xe6\xb5\xef>,\x03\x19\xe8>\xfa\xf3>\xcc\xac\xdd\x11<>\xf2> \xd5\xa4\xb12\x7f>\xbfVU\x95C\xe5\x86?\xbfR\xe2\xec\x93\x1f\x06?\xbf\xd9(\x94\xb0g\xfa?\xbfl\x1c-Rz\xdb?\xbf\xd3UA\xefo\xbd>\xbf\x8c\x0e\xa6\xd3\xdf~?\xbfP\xb6\xcc\x10j\xd1?\xbf\xdeY"\xcc\n\x19?\xbf\x07l\xfa.\x0b!>\xbf\x87\xeb\x8d"\x06\x06?\xbf>\x05\x80\xd3\xf5x?\xbf\xf0!\xb6\xe2\xff @\xbf\x80\xb0\xa2r\x9dM?\xbfW\x9an\xfev|?\xbfqD\xb9\xbf\x0e\xc6\xf4\xbe\x81\xbd\x05\x12\x91.\xf4\xbe>\x1dS\xa4o\x85\xeb\xbe\x17TsW\x89\xd7\xe5\xbe`\x9d6\xf2\xcb \xe1\xbe\x94u\xfb\x8b)\xad\xf3\xbe\xe7^B\x93},\xd2\xbe\x11\xa0Xj\xc9t\xe3\xbe\xdf\x8e4\xbd\xcf\xf7\xf6\xbe\x83\xe4\x13\xbb\xe1g\xfc\xbe\xfd\xde\x8e\x00\xb6>\xf2\xbe\x1bX<h\xe5k\xed\xbe\x18\xf8\x8d\tJ\xcf\xe9\xbe\x157\x070\xea=\xf2\xbeJ\xe22\x94\xe1~\xef\xbePI\xad\x9cg\x03Z\xbfI}\xf3&\xab\x89Z\xbfu\xf5\x10\x8b\n4Z\xbf^\xf1\x9c8\x19\x9eZ\xbf\x05\xa4<\xdeq\x89Z\xbf\xa0\x14"c\x13(Z\xbf\xa9\xb7Ex\x80mZ\xbf\xcd\xd4\xc3\x0c\x9dkZ\xbf\x00\x87h\xdb\x07IZ\xbf\xf0;8W"\x13Z\xbf\x07L\x98\xdd\x86"Z\xbf@\xf9\xce\xc3\x94@Z\xbf\xfcKNa\x89]Z\xbf8\xff\xa1\x96\x05.Z\xbf\xec\xfdr\x04\xaa\\Z\xbf\xb0\xb9\xa6\xd6\x1b\x80\xeb\xbeW&\x05\xc6\xa1\x7f\xe1\xbe\r\\\x11e\xc4e\xe8\xbe-\xf3\x17r\x0f\xb1\xf7\xbe\xf7{\xa6\x96e\xa1\xeb\xbe\x93D\xdf\xfc\xddu\xe8\xbeUv\x12:W\xed\xdd\xbe\xe9\xb9M\xfb\xf4Y\xe9\xbeF\xa7\xabrO\xa5\xf0\xbeN\xf6\xcemW%\xeb\xbeRk\x15f\x1d\xfd\xd9\xbe{\x17\x0cjB\x94\xf0\xbe\xe1\x0b\xc6j\xf5S\xb9\xbe\xfc\xb4*;\xc0\x1f\xe8\xbeW\xd0\xbb\xbf\xac\x93\xd8\xbe\t\xd8\xb2Eo\xf8\x03\xbfLK@\x0bK\xe4\x0e\xbf\xf1yf;\xd6\xfe\n\xbf\xfb\xd0\xa4\xbe\xfc}\x0c\xbf\xcc3|\x87%\xb7\xf5\xbe\xc1/a|\xdc\xdf\x0e\xbf\n\xc1d\x1f\x9a\xba\xae>E\x9b\xe5\xa5&X\r\xbf\x1a\xe1+@\x99\xa2\x0e\xbf\xba>\xe1GX\xa6\x0e\xbf\xfdJ\xbbnK\xc6\x13\xbf\xb2\x89\xee@\x02}\x0b\xbfU\xf6XX\xe6G\x10\xbf\x160`\xf6\x91P\r\xbf\x8f\xfb\x8d\xba\x04\xbb\x02\xbf\xcc\xfd\x18\x1f\xd1o\x0b?c\xd1DyHL\n?\xb5twb\x87\xea\x10?\x95\xda\xd5\xb0\x15\xb3\n?ea\xe6\x1aP\x99\x08?\xff\xeao\x9f6\t\n?\xb6\x1cJk\xfe\\\x08?\xd6\xa0X\xe1\xfa\xa8\n?.+\x90\xd3Q\x88\r?\xa9#\xc3\xe8\xd7\xd3\n?.\xa4\xcf\x1bq:\x0b?\x9c\x97\xb4Tgb\n?\xbc\xa7!\x02\xac\xe7\x06?H\x9d"U\xeb\xec\x0b?\'xRzGK\t?\xec\x04+X(u\xf6\xbe\xad8\x0e\x19i\xaf\xe2\xbeE\'\x7f\xaa+m\xf2\xbe1\xe2\x9e\x02\x97\xa9\xe8\xbe\x17\x86\x8e\xc1m?\xd8\xbe\xb8\xed\x08[\xfd-\xf0\xbe\xe3J\xda\xb8\x05\xf9\xe2\xbe>\x0c\xe6O\x19\xa0\xf2\xbeJ\xb2\xfa\xd8\xc6z\xf1\xbe\xc4QQ\x89\xb7\x1a\xf8\xbe/\xffh\x86A\xf0\xf5\xbe\x92\x07+Kw\xfe\xf4\xbe_\xf1\xd9\x01\x8e\x02\xe5\xbeE\x1b&O\xdd\xc7\xf2\xbe\xb6\xb6Nx\r\xcf\xed\xbe\x1e[D\x14\x9f/\x01?5\xd3\xa5\x8b\x17\x03\xfa>\x1bZ$\xa8\xfc[\xff>\xff\x83s\x81\xac(\xfa>3\x8e\xc6>\x1b\xbe\xf7>b\x83rI!\xd3\x02?s2\x0f\xd1n\xea\xf7>\x13R\xa7\x03\xcf\xde\xf9>\x98\xba\x93\xd44\xd0\xfc>\x8f\xefV\x94\xd4\xb5\x02?Wh\x06\r\x16 \x01?\xbe<j\xbeqM\x01?u7\rM\xfef\xfc>M!>\x95\xbd\x85\xff>\xa4\x94\xe1i\x05A\x00?\xcdl\x03\xd0\xb8\xc7\t?j\xe7\x14|\xe4\x8c\xff>\'Nn\x84Bd\x03?M\x92f\x06\xadt\xf5>\x1b\xa0\x0c\x1b\xe8\xfd\xec>1[\xbd\xf5L\xdc\x01?\xf3\xc9\xa4V\x02\x7f\x00?\x17{N$\x8e\xd5\xfc>\xces\xe9ec\x08\x02?m)Q\xd4\x02\xc0\t?z\x12\x04e\xbel\x00?d\x17\n#RD\x05?\xdd\x94\xeb\x9dS9\x00?\x01\x06\xc8\x83Z7\x03?\x8bwC@\x0b\xb2\x02?%\xefh\x98\xe2o\xf0>\x1fSr \x8f\xd7\xd1>A\xac\xaf\xc0\xad\xe8\xea>A\xf5\xe0\xd8\x9e\xda\xe8>#\xd1\xc5\xc2\xf2\xb2\xd4>\xf5J\x9c\xc9\x81\x8d\xee>\x07\xa8\xf8\xd5^\t\xd0>\xa3\t\xda\x88\x02\xf8\xdc>u\xaafh\xc3T\xed>V\x1e\x9e\xb9v\xa9\xf5>Z>\xd9\x84\xf4f\xed>\x8a!\x8cH\xb3:\xf5>\xd0\x17I\x98\xe9\xf5\xdd>\xa0\xc1\x87c&T\xeb>\xaa3\x91\xbf\xdcb\xe7>\xea)\xf3\xbe\x87D\xee>\n\x014\xc5\xdc\xa8\xdb>\xdcY\xb11V\x15\xe8>1\xd6\'BE$\xe3>\x1b\x8a\xe1\x1f\xda\xf0\xd3>\xf7aks\x17!\xf2>_\xa4=\xbc\xd9\xa8\xd4>n\x8cI\xba\xd15\xd8>M\xf4$\xb3\xa5\xe5\xea>%z\xde\xe2 K\xf2>\'\x13`\xb3\x1e\xc8\xe9>\xb8(m\x911,\xea>.\x07\x9e\x16\x8d\xab\xdd>\x85Zt\xdcMb\xe8>\x80Zy\x89\xae\xdc\xe9>V,\xbc\xe8U\x98\x06?{>MI\xf2\xb1\x05?L\x1e\x07:\x03\x0b\x05?iXF(\xcf\xb2\x07?3\x9cO\xe3\xc9 \x07?\xb8\x18\xba.\xd4\xa4\x07?i#i\x94\xf4M\t?D\x8c\xa0\x97\x9e5\x08?\x08;\xdc\xba\xa4\xc0\x04?2\xfa\xdf\xbb\x17\xa3\x04?\'\xc2\xe2a(<\x07?\xa1\x88:@L*\x07?\x8f\x0c\x1e\x10\x9a\x9d\x06?a\xc0\xd7h\x8eY\x06?\xb1\x81)\xa2\x95\xed\x06?\xe49}\xff\xea:\xe8\xbe\x13}\xb7b\xea\xcb\xeb>\xc1\x99$\xb3E\xc8\xf0\xbeV4\x02\xaf\xc6Z\xd5>\xbb\xa0@\x83\xad\x99\xf5>\xa8\xf5\xc1\xac\xe4h\xe8\xbea\x91\xdb\x11\xda8\xc6>-u\x0f\xca/\x87\xd5>\xa7c\x86~\xfb\xd9\xe4\xbe\xdaZ\x0e\xceJ\xa6\xf8\xbe\xac\x97\xa8Q\xc5\x06\xec><\xd4\xdcU\x17b\xeb\xbe\x08\xc9omn\xe2\xd6>\xc5\x00g\xb5\xd93\xd3\xbeZ\x87t\xd1\x07\xd1\xb4\xbe\xa7v\x9e\xefR_(\xbf\x81\x88\x95PTI(\xbf\x8e\xe5\xfa\xc2\xa2\x92(\xbf\x88]\xf3S\x95j(\xbfg\x83\tj\x8b{(\xbf\x0c\xc52T\xe2\xa9(\xbfZ\xb4\x9f\xa0\x86^(\xbf\\>\xf9\xa9$_(\xbf\xe3E)l=j(\xbf\xbfN#\xfc\xb0\x99(\xbf\xc7\x89\xf3\x05\x92v(\xbf\xb8\x9f\x11\x1eX\xd4)\xbf\x07R\x95\xa6\x1bt(\xbf\x18\x0b\x96b\x01,(\xbf\xd5o\x01\xd9\x1a[(\xbfZ\xf5\xbbA\xca\x97\xe2\xbe\x97\x02\x06\x06\n\xc9\xe3\xbe\xe3\x0b\xdb\x9f\x05\x93\xe4\xbe\xd3O\xd3w\x18\x9f\xea\xbev\xa8\x00j\xde3\xe6\xbea\x93\'\xf2t\xc0\xe3\xbe\xd7\x89\xa5\xd8\x1c8\xe7\xbe\xd1B\xff\xe8\r\x18\xe0\xbeN\n\xd0\xc9$<\xe9\xbe\x9d)\x10\xdejy\xe4\xbe\xa3f5k\xd8\x13\x01\xbf]`\xcd\x7fI\xed\xe0\xbeXr\x85\x8b\xb7\xd7\xe4\xbe\xfb\x80\xa0~\xfc\x0b\xdb\xbel\xdb\x1aV\xd7\xf0\xe3\xbeH\x12\xc0,a/\xeb>\xa1(T\xf0\xe5U\xe1>\xbf\xaa\x81]\x92U\xe6>\x1eQV/\xe1\xfa\xf2>\x0c3R\xc8\xb1\xd8\xe0>\xb2[\xcb\x91Z\xfc\xeb>g\xc0\xcds\xcf-\xdf>\x12\xc2a\xee\x85\x9c\xcf>\xdch}\xfa\x9du\xdd>\x87N\xd8\xf3Nd\xeb>f\x1f\xf8N~\x8f\xe3>\xda\xc8\x1a\x8d\xef\xb7\xe3>\xdc \xd6\xd9\xe2\n\xe0>\x976jt\xbb\xa4\xe4>{\xfd\xdf\xe3>\xf8\xe3>\xbe7\xe3\x1d\x02z\xf4>\xd6\xc0\'f\xc4+\xf6>\x7f\xce\xbfd^\xa2\xf8>w;\x8fu\xae\\\xf3>\x10\xee\xe1!\xa7e\xf8>\x92\x98\xbd\xf0i\x00\xd9>O\xb1\x81\xf3\xe3\x9c\xf5>\x04h\xdf\xd1\xa4[\xf6>6\xc3\xe0,\xf8g\xf7>\xda\xaf\xd97a$\xf8>:\xe4\xb9\xf0\xd7;\xf9>\x08\xc10\x0c1\xa6\xf8>\xb8\xc7Qv \xe1\xf3>\xa9-\xf0\x14\xc7\x18\xf9>\x9f\x0eQ\xc0\xec\x89\xf5>\xc5\xeb\x191\xdf\xd5\x02\xbfl\xce\x18z\xedV\x05\xbf(\xcd\xe7\x0f\xea\x84\x07\xbf\xfc\x98\xb4\xcb\xc8\xfb\x07\xbf\xb8\xfa\xeeW\xbc:\x06\xbf\x9e&\x7fb\xe2\x8a\x05\xbfl\xda\xb8\x86\xaf\x0f\x01\xbf\xaa\x81\xdepA\x1f\t\xbf\x93\xa2\xe3kN\xc0\xf2\xbe-Gl\x99\xa4\xe4\x04\xbf\x95+K:!Q\x16?\xcfCT\x1f\x7f\xc9\x06\xbf\x7f\xe4\x80=\xc2\xa7\x00\xbf\xb0J_\x1b\xe7\xc2\r\xbf\x7f\xc6\n\x87\xd8\xda\x04\xbfa\xdd\xfd\xc5\xb6\xd9\xf7>\xad>\xd2\xd8\xa6\xdd\xf2>\xa7D]de\x19\xf6>\xc7kL}\x14\x95\xf3>)\xb9/-\x91\xd3\xf6>\x08\xdei\x12pL\xf7>z\xe2?,\x14\x13\xf3>h."\xb7\xce\x12\xf1>\xc1o\xdcoZ\xf4\xf2>U@b\xf66\x1c\xf9>\x00\xfa0;\x17\x9a\xf8>\x7fq\xc0\xf8\x18\xe1\xf6>^n\x9bUf\x80\xf3>_tp\x0e\x8a\xc7\xf4>\xfb\xbee7\xf0\x96\x06?\xbd\xf3\x82cy\xc6\xf3\xbe\xe4\x0b\x06\xfd\x9c\xfd\xe4\xbe7qN{\xca0\xf1\xbe\xbf\xd3\xa6\xa5T\xd7\xdd\xbe\x9f\x9d\xa7\xb8w\x06\xe0\xbe\xf2\x0e-;\xc5\x13\xe5\xbe\xb6a\xf3\xb9\xe5\x9a\xe6\xbeg.\x9b\xd6\x1f\xf5\xe2\xbe\xeeE^\xaf\x1c\xf2\xeb\xbe\xa4?\xbd\xc6\xcdq\xf8\xbe\x8c\xd9\xe3~7\xcd\xf1\xbe\x98^c\x16a\xfb\xf2\xbezd4::\x8a\xea\xbe\t\xc4v\xb7N}\xf3\xbe\x95\xef\xbf1\xbd\x88\xec\xbe\xde2Z\xa5\x89\xeb\x0c\xbf\xfc\xfcs\x9f\x0c\xf0\x0f\xbfD\xa5\xb0\xe4\x84\x8a\x0e\xbf;\xd7\xacQ\x08\xa0\x10\xbf\' j\xbe\xd0\x97\x0e\xbf\xad\x19\x1coc\x86\r\xbf\x93\xec\xfe\xcf\xee\xc1\x0e\xbf\xb9~\xca\xa3\x1e\xe9\x0e\xbf\x93\xc8\xae\xe0\xe7\xf3\t\xbfH\x16V8\xfb[\x0e\xbf\x0e\xab\x95\xb2\x11{\x05\xbf\xfb\x18\x01\xcb\x92V\x0f\xbf\xa7\x98H\xddV\xd9\x0e\xbf\x91\xedc\x17\x16\x95\x0e\xbf\x0c;\xdf\x14\xf5\xe9\r\xbf\xfc\xa44&\xb3\x7f\xf1\xbe\xe3\x98J\xd3\x8a\xc8\xe8\xbe\x9d"D\x0e\x01\x94\xf2\xbe\xb1R<\xc6\xff\xd8\xe6\xbe\xb8p\x180I\xa1\xa1\xbe\xfc\xcct\xd35R\xf2\xbe\x08\xf4\xcf\x9f\xb1w\xea\xbe\xe5\xe6\xcaQ\x87\xb3\xe6\xbe>\xaaE\xb3~x\xf0\xbe\x9b\xbe\x81\xaelZ\xfa\xbe\xb1\x92U\xe4\xa54\xf3\xbe\xba\xd2\xca\xce\x14\xe2\xf1\xbe\xc5{\x88\xbei|\xeb\xbe\xf3\xb4\xe9_\xb0\x02\xf4\xbeW7:\xc0\x9cy\xe8>\xfeo\xd6\x81\x99\x8e\xeb\xbe\xb5:\x7f\xb19\r\xd1\xbe{\xceh\x16y\x80\xe6\xbei\x97B;\xb5\xb7\xe2\xbe\x9e\xb1,\x83\xa3\xff\xdd\xbe\n"\xd2\xbdW\x87\xe8\xbeL\xc1L{\xa2\xa2\xdf\xbe\x88\x8a\x98u\x1e\x10\xda\xbe\xd3v4!\xe5\xfd\xe2\xbe\x08Ff)W\xe7\xe7\xbeu\x13\xc9\x17\xf1\xba\xe1\xbem\x80\xc3\xcc+\xec\xe2\xbe\x1b\xe8\xa0\x07\xa9\x1a\xdf\xbeC2\x9bn>{\xed\xbe\xcdL\xfbJ,\x89\xe9\xbe\t\xccn)\xa1\xa4:\xbfD\xa4\xd2<\x1a|:\xbf\x1f\xf3\xf09H\x98:\xbf\xc1z\'\xcd\x94p:\xbfcr.\xb3\x08l;\xbfi\xfc\x06\xd7\x91\x87:\xbfU\xd9m\xcd\xd8{:\xbf\xdcP\x8d\xf3%\xad:\xbf\xac\xb9}\xa7\x7f\x06;\xbf<\x10\x99\x9c\xfa}:\xbf\xa8\xb9%\xfd\xf5\x98:\xbf\xa0\xc0\xb9\x90\xe1\xa8:\xbf \xa3\xd4\t\xca\xbb:\xbf(\xef\xd2\xb0\xf3\x96:\xbf@{\xa6\xa4P\xb1:\xbf\xfa\xe3\x17\xdf\xa3\xf6\t?\xaa\xe4%\x0elI\xf2>\xd5\xa7\xbf\xd8a\xf8\x02?S\x0f\x1c\x97\x15i\x00? \x0f\xf8Q\xb3G\xf0>\xce6\xc3\x8f\x0c\xdf\x06?\xf7\xc4\x985\x13\xd5\xf6>\xa4\x8b\x89\xd8\xeb\xf7\xf5>\xa1"\xc8~\x1e\x9f\x04?86\xebz\xdfJ\x0b?\xc2\x11\xbdK0z\x03?U\x00Z\x10\x83Q\x01?v\xe4F\xf8bv\xf7>\x80\xfciHJ\xb0\x00?\xa07\xf9\x98\xf3\xec\xff>\x97CIs\xa88\xe6\xbe\xc4\xedB\x0e\x181\xf0\xbe\xec\xcf^\xae\x11\xe8\xe2\xber\xbe\x95\xe7\xccL\xe2\xbe,;i\xd7H\x02\xcc\xbew\xb2@\x93?\xab\xe1\xbe\x01\xa8\xf4\xb1\xc4\xd7\xcd><\xd7=\x92\xe7\xbc\xd4>\x83\xac\x14\xad\xc1"\xf4\xbe\xef\xc5:\xe3\\\x85\xf5\xbe)\xb1Rp\xe7\x97\xd5\xbeQg`\x87\x1ct\xca\xbe\xfa\xfd\x94_\x87\x13\xd1\xbe\xe4g\x80\x99\xb36\xde\xbeHM\x84\x7f\x8c\xfe\xcb\xbeE@*\xf6\xf8\xf9\x00\xbf\x95$J\x1a\xf6\xda\xe6\xbe;\xc2\x96\x8b\xad\x8b\xfa\xbe(\xf6\xc3\x80\xda\xf1\xfe\xbe\x15\xa2\xec\xca(x\xd9\xbe`\x0f\xe9=)>\xfe\xbe1#\xfad\xf8\xae\xf1\xbe\x87\x17o\x1b\x90u\xe6\xbe\xa7&\x95\'7\x9f\xf8\xbe\x19\xe4\xbf\x9cE\x1b\xff\xbe8\xf1h;\xce\xab\x0e\xbfZ{\xa4\x1e\x0em\xf5\xbeL\xf8A\x05-\x03\xf2\xbeg\x02_R\xe7\xc4\xef\xbel%\xc9\xe6w\x82\xf9\xbej-\xec\x8f\n\x81\x00\xbf:\xf8A\xcfS\x05\x00\xbf\xd1\x8bdQX7\xfe\xbe\xe8\x08\xae\xf6\xbf\xd7\x00\xbfvC\xd2%\x8d9\x00\xbfV\xc5\xbb\xeb\xcb\xab\xff\xbe2\xad^d\x0e\xd3\xfe\xbe\xa9\x92\x991\x88\xf7\xfc\xbe|\xb3\xae\x01\xf5\xec\x01\xbfJ\xdf\x0f\x10{|\xff\xbe|\xac\xfad\x17\xfa\x00\xbf\x11\x8auw0\x80\x02\xbf\x84h\xc0u[d\x02\xbf\xc1\xf9W[\x82@\x04\xbf\x9c\xa80\x94E\x85\x01\xbf\xed\xcc\xf8\x98\x02\x11o?\xa1\xeff\xabdUn?Q\xdd\xcf\xeb\\\xd5n?\xdf\x10\xa3\xb6\xce.n?\xfcl\xad\xbcaLn?\xffr\x07\x17\xe9\xdfn?`\x17\xffc:\x80n?g\x8cb1\xcc\x9bn?\x96\xc7\xf3]p\xd5n?\x0cC\x9e\x07\x9d\x0fo?:c\x0e\x10\xd4\xb7n?!,\xdb\xbd\xfa\xcan?\\\xa8\x90=\x8f\x98n?\x859J\xd2[\xd3n?\xc9\x9d>>#\xa6n?;Q\xa3\xf7>\x0e\xea\xbe\xda\xde\x89g|\xee\xcb>\xac3\xbdF\xc3\x10\xdd\xbeq\xf5\x1a\xd7qB\xc6>@*\xee\x0b{L\xd0>\x17@\x8c\n\x1b[\xe9\xbe\n\xfd/\xe7X\xd5\xa8>g\xd4\xb1\x11\xd5C\x97>?A@\x86\x03t\xe0\xbe\t_\n\x07D\n\xee\xbe\x0e\xd2\xd5\x96`\xc8\xd9\xbe\x8e\xacBxL\xd1\xdc\xbe\x92u\xf8\xb8\xc2G\xb6\xbe\n\xe6\xe2AiG\t\xbf\xa4\xe2\xa0\x82\xac\xda\xd7\xbe)\\\x9d7\xcc|\xe1>\x89\x06\x04\xd6\x0b8\xd4\xbe\xd6N\xcc-Wi\xe4>>r\\4\x13\xbdr\xbe\xc0\x95\xa1k@\x86\xcc\xbe\xe5\xbef\x08\x1a\x0c\xe8>\x1f\x10\xe1=t\xca\xc1>>\xa6:Z\n\x99\xb1>\xeft_a\x83\xef\xe1>\tF\x9e\xf2\xdf\xde\xeb>\xf3\tO\xa2\x10\xd6\xd3><\xfe"\x81\xa3x\xec>\xbc\xec\x0c\x14RD\xcd>\x0c\x14_\x88\xe2\xd6\xe4>E"h\xad*\xab\xd1>\xfd\x8d\x06\xc6nZ$?\x12\xcal3$f#?}\\\x89Jj\xb8#?\xef<\xa9\xf9\xbaa#?Qk\xcey\x9a\n#?\xffV\xaa\x02s\xe2#?pr\xff\\\xb6\r#?&\x07\xf6\x8ej\xf9"?=\x82\xf8\xf9\x94\xaf#?\xa5\xa9N\xa3\'\xa9$?\xef\xcb\xd8^.\xde#?\t\xbd\x0b\xf9\x19\xe3#?\xbc\x1e\x8e\xf8\xbd\xdc#?\x00\x95\x11u}\x01$?\xd4No\x17p\xbe#?\x80W\x90\xc1\xba\x95\r?\x85\x03D\xd5`\x19\x07?\xd8&\xa4\xaeS\x12\x0b?vMcS\x16\xf5\x07?\xe9\xdcQ*\xf5\xd7\x07?\x1fMk\xe6\xe7\xca\r?\r\x17\xa9\xb3\xfc`\t?\xb6\xcer^\xd4\xed\x07?\x1f\xe6\x0ed%|\r?\xf14\xcaH\x7f\x97\x0f?P\xe8"\xb3{\xc6\x0c?\xc7\xdac\x05\xb4\xc9\n?\xccSC\xe7\xdf\xaf\x08?<\xfa\n\xcf\xae\xc2\x0b?\r\xa4J\x0c\xa6\xda\n?\xa1\xed\x10\xc3s\x80\xe4\xbe-\xfa\'C\xb0\xc0\xe9\xbeq\x05\x9a\xed:\xce\xe7\xbe8\xa1W\xa1\xdb\x90\xeb\xbe8\x13\xd7CK\xbf\xec\xbe\xe7\x86\xae:\x93\x96\xe6\xbe\x17V\x8e)\x93\x14\xe1\xbe\xe1\x98~\x92\x80m\xe4\xbe\x95x\x1e\xed\x93i\xe0\xbe\x08\\\x88\xda\x12h\xed\xbePA\xbeMn?\xe0\xbe\x9f\x14X\xea\x92p\xe9\xbe\xeeT*\xfe\xea\x95\xe0\xbe\x88\xea\xcca\xa0\xea\xde\xbe\xe0\xc8j\x99l\xf0\xe5\xbe\x19\x917\xcb7\x99\x10\xbf\xf1\xcc\xb0R\xc3\x8f\r\xbf\xac\x95r\x8c\xaf#\x11\xbfL\xc2*\x1db\xc0\x0b\xbf\x80I\x97\xd0p\xe7\x0b\xbf=,\xa8*\x8a\x9e\x10\xbf\x18\\\xb8\xc9L\r\x0e\xbf\xe9\xa1\x97\xb4LP\x10\xbfJ\xf4\x91\xc0;[\x11\xbf\xd9\xc2\xa5\xf8X/\x12\xbf\x11\xe4%#j\x03\x11\xbfj\xb5,\xc2\xee\xbb\x10\xbf\xce\xf2\x0cZC\xb7\x07\xbf\xe1}\xda\xdc1\x9b\x10\xbf\xb5\x84\x7f9\xb6\x96\x06\xbfg\xd7\x8e\xc2\x99\x86\xf0>N)\xc6@\xf4\xa5\xec>\xb3Z\x84\x9c;W\xf0><Y\xb9\xc88\x03\xf1>1itr\xb5\x90\xee>\n\x7f\x84\xf9a\x91\xf0>2d\x01\x80J@\xee>\xcc\xd3B\xe0n\\\xef>c/\xf5\x0c\xe0\x10\xf0>}\xab\xbb\xcb\xdf(\xf1>\xf8\xc3gk^\x18\xed>sf\xee6\x08\xba\xf1>\xb64\xb4\xf8\xe0\xa1\xee>\x154\x065\x8f(\xf0>\\\x14\x8e\xd7\xaf\r\xf0>L7\r"\x17\xec\xe8>\x0e\x03S+ea\xde\xbe\xa0\t`{\xcb)\xbc>d\x06\xfcd,\n\xe6><\x97\xa4\xd6\x98\x1d\xd1>W<\xfey\xf4\x1c\xeb>5\x9a#>]\xa3\xd2>\x08\x95\x0f\xd3\xc7u\xd9>\x0c"H\x06L\x83\xe4>9?e\x9c\xc0"\xef>\xd5\xb9in\xb5\xa2\xdd>\'\xb6\xba\xce\xc5^\xe5>\x90\xf5Z\xe0\x99o\xcc>;\xf6\xea\x0f\x7fW\xe5>G\xd6\xe8.\xfb=\xe3>h\xdb\x86\xbc\xdd\xe4\xf3\xbe\xd8\xd7\x0eMb\xf0\xd0\xbe[\nimg{\xef\xbe\xa3?K\xd3{4\xd4\xbe\x15~\x8dB\xa7\xc6\x8e\xbe\x10U\xed\x0e<)\xf2\xbe\x05\x9f\xf1\x9f\xfd\xe9\xdf\xbe\x07s\x05\x18\xcf\xca\xdd\xbe\xa9\x97\xf3!X\xad\xef\xbe25\xd4\xbd\x1f\xaa\xf6\xbe\x95\xb7\x18\xc3\xdf\xa5\xec\xbe~0b\x1dc5\xef\xbe\xaf\x1ej\xa5,\xc0\xe3\xbeixcnq\xf3\xee\xbec\xb1w\x98au\xe9\xbe\x8cs\xe5}\xb1\xcc\xf0>\xa5?tE\x92\x0f\xf0\xbe\x8fN\xcd\xd7\x11\xe9\xe5>\xa0\xac\xb2e&F\xf2\xbe\xe4\r\x91\xd3-n\xed\xbe\xcc\xa0\x00^E.\xc9>\x00&\xcd=\xbby\xaf\xbeC\xe9\x88\x95\xd4\xab\xb9>\xec\xf1\x07a\xdeU\xd7>^y\x8a\xf2\xc6z\xed>7\xd6\xa3-\xdcQ\xe3>\x05\xa7z%\x85>\xe7>\x8c\xec\xc5\x17kN\xd0\xbe\xd0\xbd\xd0\xcf\xff\xbf\xde>\xa5*Y\xbcs\xbd\xd6>E\xf42\xe6V\xbb\xf4>\x0f&\x19\x04\xd7\n\xc5>~\x14\xfb\x0f\xa5\xa7\xf0>@\xd5\n\xb1\x89l\xd4>\xea\xc2v\xb3\xe8\x1f\xd3>\x08D\xbd\r\xb3\x1c\xf4>\xbe\xe7`\xb3\xdc\xad\xdf>\xa3\t\x05\xbbh\x97\xe2>\xd2\xe5\xdc\xa9\xea\x00\xf4>w$F\t\\%\xf4>\xd5\xd3w\x91;V\xed>C\x9d<\xd5\x84O\xed>\x03\xa2\x10\x8b\x16\xef\xbf>kM\xe3\x06\xa7Z\xf1>\xea\xbdQ\xe3(\xf0\xe2>W\x00\xf9d>\x1a\x15\xbf\x9aXmB\xe6I\x15\xbfd\x0b\x01]EV\x15\xbf%f\xe1\xf6\x99J\x15\xbf\xa0\xce\x05\xf9a\x84\x14\xbf\xe2\x9e\xa0z1\xf4\x13\xbf\x9fO!9{\x07\x15\xbf@5\xbauJ \x15\xbf\xda\x1b\x8a\xee5/\x14\xbf\x8f8\xffm\xfc\xb4\x15\xbf\xcf\xcd]\xed\xaa\x7f\x14\xbf\xbfdJ\x11\xd7\xe8\x15\xbf\xe0 yD\xd3?\x15\xbf\xf7c8s3M\x15\xbf\x12\x9d\x82\xda)\xf2\x14\xbfA\x89\x1a{;`\x05?\x89\xee\xeb\r\xa1 \x07?HV=\xe8\xc2\'\x07?\xa9\xef\xb0\xbaso\x06?6\xe2\x84\xb4\x15i\x06?u\x15\x1b\xc6\xb2}\x06?()\xed\xb0\xdfr\x05?DNX\xcd5\x9d\x04?>\xbb\xee"2e\x07?1\xe9w\x9c\x11Y\x06?\x98\xd3d<\x9f\x1a\x05?)\xc0\xa4\x92Hu\x05?\xb5\xa5\xe7\x05\xde/\x06?\x87\x12M\xf8:\x92\x06?\xc7\xa3i\x04\r\xbf\x05?i\x1b\xdf\xe5\xaa\x11\x1f\xbfQi5E|\xf5\x1a\xbfA1\xfa\x92\xea\xe2\x1c\xbfg$\xf1\xa0\xb2\n\x19\xbfCY\xa2P\x17\xe8\x18\xbf\x9cK9)/c\x1e\xbf\x1a\xa5\xd91\xe5\xa8\x1a\xbf\xe4\xa8\x05\x97t\x95\x1a\xbfpZ\xca\xe6\xbbO\x1c\xbf\xe8ok \xe3\\\x1f\xbf\xd2|\xc9C\xb6r\x1d\xbfz\xea\n\x91J\x7f\x1c\xbf\xed\xb4\xc6\xff\xa4\xa4\x1b\xbf\xdb\x03\x84\xecqe\x1d\xbf\x9fl\xbb\xfao<\x1d\xbf\x17M\xc4\x8eQ\xa9\xec\xbe\xcf\xc0 \x83B=\xc0\xbe\xc4g5\xd3\xa0\'\xe7\xbeb\xf0R[\xb2n\xd2\xbe\xa9\xaf\xa7\xcaK\x8e\xc6>\xfb\xc7\x9b\xd2q\x0c\xed\xbe)*p\xe3\x7f8\xd0\xbe\x10!\x00.\xdb\xb7\xd2\xbe\xedi\x08\xc7p\x0f\xeb\xbeD\x10\x9bm^\xcd\xf1\xbeV\x81l\xb9\xc6"\xe0\xbev\x97f\xda\xf6|\xea\xbe\x81\x1b\xc8X\x89\x80\xe8>\x9c\x98\xaf\xc6v\xf5\xe5\xbe\xfa\xc6\x03\xe0u\x02\xe0\xbesyy\x8e\x04k\xf6>h\xf8\xd5=\xe4\x7f\xd7\xbe7)vA\x87D\xec>\x1eiCC\x9d1\xe3>\xca\xb7;@\x07\xf2\xde\xbe\x12\xa6\xb9\xc2\x88y\xe2>\xa3\xb1o\xff/=\xd2\xbe.\xdfq\x12\xca\xe8\xd4>\xfa\x1c\x83\xcd\x89\xbb\xe9>\xffs\xcf\xc3}V\xfc>\xda\x88I\xcd\xf6A\xae\xbe\xdc\xa7\xb4*\xb4\xc8\xfc>\x83*\x0ce\xe5\x9d\xf1\xbe\xd2\xfe\x1f\xaf\xbc\xeb\xea>\x9a\x18\xc2Z\x8ec\xd8>aF\xaa\xc4\x9fR\xa0\xbf\xac.&\xb7V`\xa0\xbf\xcf\xf0\x0e]j^\xa0\xbfE\xdc\xa0\x91\x9aW\xa0\xbf\xe5"\xf5\x13\xc6]\xa0\xbf(\x1a:\x90\x80V\xa0\xbfQHM\xc6\x1b\\\xa0\xbfxb\xf2\xa9\xebZ\xa0\xbf\xb5\xa3\x89\x07S[\xa0\xbf\x88\xb4\x86\xfa_N\xa0\xbf\x8cq\xb3c\xaaM\xa0\xbf\x85K\xfd\xf4\xdbT\xa0\xbf\xb1g+J\x16O\xa0\xbf\x01\xef\xc5\xf6\x9fm\xa0\xbf\x81->*\xb4S\xa0\xbf!\xd2\xb0\x1bG\xcb\xf6\xbeC\xcb\x91\x0b>\xe2\xdf\xbe\xa8\xb4\xcb\x95\xef\xc1\xf0\xbe\xb6ig\x84\x8b\xda\xf8\xbe\xf3\xbal)Ob\xdc\xbe\xe6\x83a\xd1\xb3w\xf2\xbe,\x0ct\x90-\x10\xd6\xbeM=`}\xe9z\xe0\xbe\xf1K\x9c\xdc:\xc2\xf0\xbesG\x0f\x9a\x1e\xfd\xf8\xbe\n$\x88\x8ekT\xe5\xbe\xea\x93\x84\xe9\x0c7\xfb\xbe\x15\xe2\x9f\xee\x8d!\x8e\xbeN\x19\xd6X\xfd\x0b\xee\xbe\xca\xf4\xae@\x8a\xf5\xeb\xbe\x18\xf7\xbe\x1d\x81\xe0\x07?kHE~\xfdi\xe4>\xb7c\xf1\x87z\xf2\x01?\xf7\x17\x07\x8bI\x90\x03?\x1c\xd3\x1dw/\x8f\xc5>\xed\xc8\xef\x82\r\x87\x02?\x05\xc6\xafJ\xebq\xe0>\x00\x7f\xa6\xf9\x1a\x88\xf8>P\xc3;c\xa6.\x04?\x9b\x863\x08\xc9\xcd\r?\xee>\x13\xce\xd1\xc1\xfc>\xce\xe6@\x93\x99\x99\t?;\xfd\xb4\x1eP\xbc\xfa>,\xce\x9d k\xf6\xff>\xf3U\xb1Ag\xa1\xfc>QW\x8c\x0e\xa9+\xeb\xbe\x8d\x82\x05S\xb9\x05\xe8\xbe\x1f\n\xa4d\xa3F\xe5\xbe\x03D\x8c\xde\xea\xa0\xef\xbe\xd6\xed!4H5\xe6\xbe\xb1\x88I\xba\xf0\xf6\xe7\xbe\x8c<\xa3\x16,\xb5\xe4\xbeRd63E8\xde\xbe\x15F#L\x13Q\xe2\xbe\x8cat\x82\xc2m\xe7\xbe\xd32\x94\xa1\xb9#\xe2\xbe\xf4\x81\xd0XWI\xe2\xbe\x87\x8f7\x00t\n\xfb\xbe\xdf\x10\x12\xe5\xa3v\xe4\xbe\xe3\xb1\x11@\x94=\xe2\xbe\xe1\x14\xef\xcf@\xc6\xf1>\xb2\xc7\x00\x9a\x0b,\xf6>O\x9fue\xdf\xcd\xf4>\xc4\xa7\xb7\x81\x13\xdf\x15?\xa5\xd6\xb6\xa6D3\xf2>r\xa6\x01o\xea\xa4\xf7>*\x19\xe3\x8e\xd2\xf5\xf8>\xa1\xd0\x01i\xf3\x9f\x05?G\xc0KGu;\xee>rO\xd0\xb0\x05\xd1\xf8>\x1bB\x0f.\x06=\xfa>\x1f\xa5\x91\xfcm\x02\xf7>~\xef\xee7{,\xf3>6\xac`\xfcFy\xdc>\xb6\xb9=\t\xce\r\xf8>ap7\xf8\xb3\xea.\xbfR\x02]!\xa8\xc8&\xbfp[\xca\xea\xd4s0\xbf\xc4e\n\x1b\xf4\x7f.\xbf\x96d\x16\xb6#71\xbfH\x91q\xef\xea\x89-\xbf\xc3\x02t\xb8\x84\x17,\xbf\xf2\xad\x12\x91@i.\xbf\xa0\x0eC\xe6y\xec-\xbf\xdaa\xd6h\xe4a/\xbf0\x028j\xd9\x7f.\xbfZ\x98\xfd\x8en\xf6)\xbf\xe3\x96\xc1\xeciH.\xbfW\x0c\xfa\xc9\x1c\xfc,\xbf\x19\x0f\xa5{{;/\xbf:\x0e\xdc)\x1b\\\xf6>\xd2wv\x95\x9b{\xf3>\xba\xf5\xf4\xd0\xe4\xbf\xf3>>~\x1e\x99\xa9\xa9\xf6>\x94\xc2{}|!\xf3>\xe0\xd9\x06\x07\xce\xdd\xf4>\x80\xbf\'3\\\xe5\xf2>L\xdf\x900\x94\x99\xf2>\xc0!M\xef\xce\xd1\xf4>\xf71\x1e\xbb.\xae\xf6>\xf3q\xb0\xb9 \xb1\xf3>(Q\xfc.\x159\xf7>jI\x0b{\x98\xbd\xf4>]\x01:\xd4\xbb\xb4\xf3>8\x14\x0cr\xaeB\xf4>\xac:\xf6\xeb\xc5\x1d4?\xe5\x0c\xea\xa2R$$?\xad\xf1\x80\xda+70?$\xc4\x80{Y\xb3+?\xc8\x110I\x1d\x03$?#\xb8\xf0\xa4b\x9e1?2\x94\xbc,/\xe7 ?1\xb1\xf9U\xd9\x9d(?\x9ei\xddxx\xf5.?<\x8f\xe1.\x10\xaf4?\xb2\x14yO\x1c"-?\x11\xa8!h\x10\x00;?\xa1\xf9\x1dL\xdd\xbe&?3\xb4)@\'\x880?\xe1\xfb\x96PJ\x03.?\x81\xba\x06\xb5Lc\xe9>/o\xa4\xf3\xba\x91\xe0\xbeJg\xaf\x7fB,\xd4>W\xbe\xd0;\x17\x99\xcd\xbe\x88s9,\x0e\xa5\xf6\xbe\x83\x83w\x91\x82\xb5\xe7>\x1e6\xe7\xce\xf8\xf0\xe3\xbe\x00\xa5\xedq\xffU\xa3>\x00\xc4c\x02\xfd\x88\xc2>\xbe\x13\xe1\xbf\xf8<\xe3>\xbe\xf4X\xbd\xe7J\xa2>$\x10-\x89\xa8\x1e\xe5>\x92\x15\xfa\x82\x80\xd3\xff>\x17\x80\x86NS\x1a\xc0>\xbex\x82\xd90\xe9\xbb>\x9b\x91\x9b\x97\x83\x85\xeb\xbe\x12\xd4\xb2{\xa4\xd2\xdf\xbeO\x07\x0f\x10\xd8.\xe6\xbe\rMgW\x01#\xee\xbeJ\xf6\x16\x15H\xde\xe2\xbemz\xa7\xcb1\xcf\xe6\xbe\x15\xbbuy\xf0\xc6\xdf\xbeA\xbfV]5\xbe\xe1\xbeN\xcd \xc9\xce+\xe3\xbe\xa4\x98\xcb\xa2O\x8f\xec\xbexU\x7f*^\xae\xe3\xbe\x08\rfM\xe9\x90\xed\xbear\xc5\x18;\x8c\xd2\xbeca\xc7\xc6\x91\xa0\xe6\xbe\xa0\xd0\xd0cH\xc1\xe4\xbe\xae\xe4\xb2\x93\x1c\x85\xf8\xbe\xdc2Z\x1f\xce\xff\xde>:\x9a\xe3\t\xbdu\xf4\xbe\xec\x9b\xd0\xd3\xfc<\xf3\xbe\xf9\x16\xcb\x1e\xf6\xb7\xf0\xbe\xa7u\xcbWJF\x05\xbf\x11\to\x81\x9dG\xe8\xbe\xd7\x9cQ\xa0\x91,\xf2\xbeq\xa2\xd6\xbe\xde\xb8\xf3\xbe\x04\xadXp{\x06\xfd\xbeZ\xe0\xa6~\xae\x8d\xf4\xbe\x03\xc2U\xa0\x96~\xf3\xbe\t\xf4\x86\xa5\xef\x0b\xee\xbe\t\x80\xf3\x00C[\xfe\xbe\xd9\xc4%t;\xee\xf2\xbe@n\x17T\xcd\x1c\x15?\xce\xb0F\xfd+&\x15?\x04xL\x9bz\xda\x16?\x15\xcf\xc8\xa61\x15\x17?\xfa\xf5h\x14\xca8\x15?\xceE\x1fT$/\x15?:6\xf3\xf34\xdb\x14?\x17\xa15\x0b\xc1\x1f\x14?Z`\x1d\x82\xd8K\x16?\x87\xcb/\xc6"\t\x15??8*?\xc2\t\x15?\x8e\xfe\x97\xb0o\xf5\x15?\xc5^\x81\x1e@\x9d\x15?\xf7b\xbdHg\x04\x16?\x80\x15F9wn\x15?\xee\xdb\x85\xea\xd48\r?\x05\x9d\x1c\xaf!\xb3\x0c?:u\xbe\xfcJt\x0e?\xdb\xfd\xc1\x9c:\xc3\x0e?\x08Z\x07e\x95\xd3\x0e?a}cxh\xf9%?\r\x15\x1eL\xac\xdb\x10?.\x04\xd7\xcd\x04\xa3\x0e?,zc\xc3$)\x0f?J\xe1\x81\x95\x1c\xdd\r?wF:?\xce\x12\x10?\x1e5F\xd80\xac\x0f?6HU$0\x1f\r?\xe4Y]H\x08\x18\x0f?\x8a\xc5\x1e(\x00"\x0e?\xcc\xda\xa4/F\xec0\xbf\x03)\x0b\x08+\x86%\xbf\\Z\xac\xf3\xdc*-\xbfr\x14O\x1chd-\xbf\x92Tv\x90\xfc\xe6%\xbf\xda\xa6\x15\xcb\xc0/.\xbf\x85B\xe7cdc%\xbfP\xa0)\x81)\xfe\'\xbf?m\xf7x\xdd4-\xbf\t\x03\x1c\x955&2\xbfPF\xe8GA\xec*\xbf@\x88\xdd\xbc+\xe13\xbf0\xfc\x1dv#\xa6\x0c\xbf\x80b\xf7\xd4\xd0D-\xbf\x9c\xf9\xf9\xf88\xf1+\xbf\xe3c\x10\xbf\xfb\xddW?\x04\xbb8\x81h Y?`\x87\x97\xbe\xffuX?(\x1a\xfb\x04\x9b\xccW?\xb7j\xe4T}tX?\xbe\x11\xed\x95\xeb\x0bX?\xd2\xf9\xce(t\xf3W?\x0f\xc2b\x93\xd3\xc2W?\x8f_}\xea\xa1\xaeW?-.a\x89\x88\xecW?\xbaNsc"\xd5W?\xd7\xe3EPRBY?\xce[\x98\x8d\x95\xfcW?\x18=(\xda}\x03Y?\x1a\xb0\xa3\xe9\xae~X?\x12\xe3%e\xb1\xd6\xec\xbe\xffZ`\x96i\x11\xca>A\xc7\xa5{\xfc1\xdc\xbeE\xd3\xbeH1C\xef\xbe\xe7\x94\xfb\xa1\x1c\x17\xb4\xbeM\x00\xb2\xf7\xbeM\xe5\xbe\n"\xdc"\xc6\xb1\xb6\xbe\xc8\xcf\x93\xf0\xca\x16\xcc\xbei\x88j\xea=G\xdc\xbelGF\x9b6\x15\xf0\xbe\x9c\x03\x05cz/\xe7\xbe\x92\r\xc6\xe5S\xfd\xed\xbe1\xb9;8!\xa3\xcc\xbe\x98\xc3\xe9\x1co\x02\xd9\xbeW\xb7\xbd\xf6S:\xd4\xbe\xbe$VF@@\xeb\xbe\x97}\xde\xad\x10a\xf3\xbe%}\x82\x02\xd0\x16\xf2\xbe\x86\x9b\x84N\xc1a\xf0\xbe\xd0\xa45\xe2\xa3\xc0\xe9\xbev\x99\xed\x03\xa7\x95\xf0\xbe\xec\xa3\xab%{\r\xe6\xbea\x04\x08\x7f\xbb\xcf\xe4\xbe\x8e\\\xcc)^\xa2\xe1\xbeqi7\x8c\xbc\x9b\xec\xbe\xfa\xf4W\xcb#\x95\xdf\xbed9~\x99\xa9i\xea\xbe,\x9e\xc4\xfby3\xe9\xbeH\xdfe\xcf\xc0 \xf2\xbe\x99O\x99\x9f\xb4e\xef\xbe\x1f\xce\xdaA\x06\x16\xf0\xbeq6\xe6\xd5a\xc4\xa6>e\xed\x12>\xf5\xb7\xe6\xbe\x03\x15s\xb5[x\xc1\xbe%\xc2^\xfa!k\xc9>64\xaaB\xcf\x08\xe8\xbe\x8f\x10\x03\xae)\xd0\xc3\xbe\x1c\x0c\xf0\x8e\x95\x12\xd6\xbez\xfe\xbe\x88HG\xed\xbe\xffH\x0fd\x9e\x86\xf2\xbe\x01\xae\xfc\x0b\xcf\x8c\xe3\xbeM\xa1\xadI\xbe\x1d\xee\xbe*\x96\xe5\x8a&\xd7\xd1\xbe1\xde\xb2\xfc\xef\xe3\xe5\xbeM\xad}c\xbc\x9f\xe1\xbeQ\x1f\xbe\xea\xfac\xfa\xbe\xdf\xd1ZiXX\xf7\xbe\xa40\xe1\xa4a`\xf7\xbe\xe5};:m\x1a\xfa\xbe\xfb\xc7\xf5\x8bd\xb1\xf8\xbe8\x0f\xca\x1b\x08\xb9\xf7\xbe\xb8?pl\xad!\xf8\xbe\xc8\xc7U\xa4\xd09\xf8\xbe\xc4x\x8a\xea\xb3R\xfb\xbe\x07\xd8\x7f\xee\x1e\xe6\xf8\xbe\xa1O\xebZn5\xf8\xbe\xe1@r\x10T5\xfa\xbeW\xc96\xd9\xe3\x86\xf6\xbe\xd3\xf1\xa8\x03@\xe5\xf8\xbe@|\xa2\x9fu\xf9\xf8\xbe\'\xf5\x9b\x01\x19\xeck?@u\xea*\xb0Zk?~\xc6\xb5\xd2\xb4\xa8k?\xba\xc8\x06j\x8e\xeak?\x91\x99\xfb\'8\xcak?\xf5\xa7\x85\n,\xack?\x97d\xaa\xb9\x8f\xdck?#A\xe7\xc5\xd6\xf4k?\x8dH\x96n\xf7\xeek?S\xc8\x03\x15\xa3\xf2k?%nE_\x9d\xe6k?\x9e\x05\x8f2\xfdAl?H\xfaV\xf2\x87\xcak?\xd01X\xbb\x8a\x9ak?QS0F\x1f\xa7k?\xe6\xb0\xe4:z\x07\xf1>\xcdYX\xfe\x1e\x91\xfe\xbe\xb8\xe6\x1b\xfb\xf9\x05\xb8\xbe\x15C\xb4\x98\xc7\x86\xe9\xbe\xd6wS\xb7\x1e\x96\xfc\xbe\xed#\xc6yo\xb8\xde>QPE\x8e.g\xf3\xbe@\xbf\x80\x8c6\xac\xeb\xbe\xb8\x10\x80| \xe3\xc4>\xda{\x12&\xcb?\xf3>\xb1\xd3\x04\x06\x93\x95\xde>\xecT\x9d\'8@\xd4>\xb3x\x00\xed\x8e\x89\xf1\xbe\x8a\x99\xbbJqf\xc5\xbe\x92/n\xa2/\x8c\xd9\xbe\n\xdc0\x9a\xcfe\xee\xben\xab\xd2\xae\x05\xfd\xe0>\xfe\x9b\xff\x0f\xa9*\xdd\xbe\xd2\x0f\xdb3s\xc5\xcc\xbe\xd0\xb2\xff*\x9aY\xe8>\xda\x03t\xa5q\xda\xe3\xbe\xd6\x0b8\xf6\xee\x14\xd8>8\x99\x1c\xa5RJ\xbe>\x83\xe6\xeb\x18\x04\xa9\xea\xbe/\xc7cQ}a\xf2\xbe\xc3 \xbe0\x0b\xa4\x86\xbe\xca\xa9\x95\x87\xa6\xa9\xe4\xbe\xd2\x97\x9a(\xe2+\xd0>\x00z\x91\xc5\xfd:\xdd\xbe\xa4\x048S\xf3\x90\xc1\xbev\xac~\x01\xb1\xf5\xea>W\x81\x94;D\xd2\xd4\xbe\xc4\xa5\xe6\xdeD\xb1\xde>\xd7\xe9\x99\xd9\xaa\xa2\xca>\xa4\xdd\x12\xd1<\xc5\xd3\xbe!\x99w\x19\x90\x87\xeb>\xda\xf0\xd3\xed\xe9\x9b\xcb\xbe\x9a\x99\x06T"\x13\xa5\xbe\x90\x86hlU\xb1\x01?\x99X\x85\xcd(\xa4\xf1>\x9br\xddA|\xff\xd7>\x16=\xf0\x08\xb3\xdf\xe0>\xd5S\x7f\xbb\x8d\x87\xe1\xbe\x96\xf1p\x9d\x99\xb9\xdd>\xbfj\x11\xf4S\xf3\xdd>\xeexy\x0e\xb5T\x16?l\xe3\xb5G0\n\x10?\xfd\xb6\xfe\xba\x854\x12?a/Cu\x85R\x11?\xa5\xca\xb5/\xe3~\x10?\xae\x15\xf08\xb4 \x13?\xeb\xf2G\xe1\xf3E\x13?d\xd4\xb2s\xc3\xca\x1f?|[\x8c\xdf{\x1c\x13?\xbe\xf7\xb4\x8c\x18\x8e\x13?\x1f\xb2\xd1\xb6\x1cn\x14?\xb7\x8bd~F}\x14?\xd3\x1c\xda/\xe4\xa2\x12?+r\xd4%1\xa7\x13?\xc1R\xa3H\x06.\x13?#\xc5\xe2\x88\x9f\x15\x10\xbfa\xf8\x8e\x1c\xd0\xe4\x10\xbf\x8e0\x91\xab\x83\xf0\x0e\xbf\xa7\x97\xa4\xa8\xfd\x15\x11\xbf\xf5\xeb\x16\x83 (\x11\xbfa\xd7E#\xbbz\r\xbf\x10\xa9wIi\x9d\x0c\xbfN\xcc\xc4{K\xda\x10\xbf\x93|\x0c>\x92\x95\xe2\xben\x825Y\xbcB\x0f\xbf\xddEO\xd0\x15:\x10\xbf\xcb\x85\x9f\xf3\\\x03\x10\xbf<\x0b\x06\'\xcc&\x0f\xbf\x1dk\xe6\x1aj\xd4\x10\xbf\xc0\xdf\xb0\xaaq\xf6\x0e\xbfo\x82\xb2UY\x93\xe0\xbe;=\x98\x01\x8e#\xc7>\r\x1a\x14\x06\xdfP\xd3\xbe\x01\xb7\'VT\xc1\xf4\xbe.\xeb\x9dG\\\x17\xb4>Z\xc9\x88;T\x08\x05\xbf\x9f\x16}\xec\xa9\xe8\xaf>3Q4\xacP\xe2\xa0>C!\xb8P\xeey\xf9\xbe\x8d*\x02\xec2\xaf\xe4\xbeEH2<\xe8\'\xb6>\xf0(V:Y\x7f\xd2\xbe\x15\x0e\xddY\x06\xcb\xc7>!O\x84Y\xb3r\xd1\xbexz\xf7^Gt\xc8\xbem\xb0;\x18\xae\xba\x1d\xbf\x8c6\xfb\xa1\xb9\xed\x17\xbf\xf1\x89c\xc0\xcej\x1b\xbf\xa7\x1a\x1fC\xed\xd6\x17\xbf\x9c&\xb4\x9eY3\x17\xbfC\xe9\xe4-\xf2\x9f\x1c\xbf\xa8"X\x9b\x93\xbb\x18\xbfR"R\x1a\xfe|\x19\xbf5\x00\xc6b3\xa9\x17\xbf\x9c{\xe7\x88\xa8b\x1d\xbfC\xf7\x85\xf9?\x82\x1b\xbfl0\x97f\xf5\xb9\x1a\xbfL\xbc\x14P\xc9\x85\x19\xbf\xbb\xa0\x9c\xb3\xe6C\x1b\xbf^ul\x13\x98d\x1a\xbf\xbb\xd6\x9a\xd4\xf1+\xd3>)\x88\xb9\xa4.e\x05?W\t\x88\x82f\xf0\x14?:\xe9E\x7f\x9cD\x03?G\x03\xbf4\x0c\xc5\x05?\xd7\xfb\xd3\x96H\x8c\x08?mO\xc0R\\\x92\x0b?\x91\x7fJ1]Z\x07?\xd3\xe83\xfc\xc0\x8e\x04\xbf\x17\xad\xba\xce\x83#\x07?9\x18\x8a\xdb\xa4\xf0\x00?\xe9\x97\xd7}K\x9a\x05?#\xd6\xdf\xa9ml\x0e?1\x9cZy\x92|\x02?%2\xe7v\x8c\x8f\x07?`=\x1b\xfe\x88\xf4\xfa\xbe8\x81$:r\x9d\xb0\xbe\x01\x11\xc6\x06D\x9c\xf5\xbe:5\xd8\x80\xeb\\\xe2\xbenrK\x0cp\xeb\xd4\xbe\x07@~\x96\x1fM\xf7\xbe\xe1\xb1\xd5\xbd\xfd\xd5\xdb\xbe\x04\xdf"\xa0\x05\xb2\xe0\xbe\xb3\xfd\xa9%\x9c\xff\xec\xbe\xee\xed!qY\x9f\xfd\xbe\xb8\xbb\x80\xf7\x8f\x0f\xf3\xbeDB\x07\x00v\x8c\xf3\xbehq\xc7h\xdc\x9f\xd7\xbe\x05(IF\xf9m\xf2\xbe\xfc\xdf%Z\x01k\xee\xbe\xb8\x8e\xbcL}R\xee\xbe\x1a\xe1\xd0@^\xe5\xdf>\xac\x1e\xadUm>\xe0\xbe\xae./V\xf7!\xb3>1\xce\xc6\xd6\x0e\xff\xda>\xbc\xaf\x1c\xd8\xf0Y\xe4\xbe\xa4!\x8cl\xedn\xac>\xfe\x11A]\xc1\xfb\xbe\xbeJ\x9b-U\xe6\r\xda\xbe\x90u*~\xc0,\xea\xbe>\xc8\xbc\xf1\x1cR\xe1\xbe\xdbf\xdf\xb8=g\xe0\xbe\x1c5{\xa7\x0b\x8e\xc4\xbe\xf7\xd5\xd7\xe4`_\xd7\xbe\x18\xcd#\xdfU\xd4\xd9\xbe0\xd5\x1b\x05Y+\x14\xbfw\x98\xe9\x1f\xd9>\x11\xbf\'V\xee:\\)\x13\xbf\xfd\xcbi(z\xe4\x10\xbfyC\xa1X\x85\xc9\x0f\xbf\xbb\x9be<W\xdb\x12\xbf\xf7g\xa6\xd5\x01N\x11\xbf\xd7xJ.\x06?\x11\xbfQ\x05\x99L\t\xa3\x12\xbf\xb1\xc8O\xae^W\x16\xbf\xaat\xac\x1e\xf0\x89\x13\xbf!\xe1\x89\xaf"=\x13\xbfA\xa7x\xbb9\n\x12\xbf\xb7\x95"Sb\x01\x14\xbf\x12\xa3\xd7\xfdi\xa5\x13\xbf{Bs\x81I\xccS\xbf>\x81J\xa7\x9bbS\xbf\x8b\xb0\x1f\xa7\xf5&S\xbf\x03;-\xd95iS\xbf\xd4\x1d\x93\\.\x8cS\xbf\x9630\x99\x17\x15S\xbf\xed\x92\x17\x80s\xcaR\xbf\x03\xf2\x9d\x07\xe3NS\xbf\r\x1c\xa7w&0S\xbfW\xf3d\xbc\xad\x17S\xbf[\xb8&\xeb\xdd\xfaR\xbf\x1d*\xff\x94@2S\xbf\xc0\xbb\xab\xb4?OS\xbf\xaf\x9d\xf4\x8ad#S\xbfF\x01\xdb\xf7\xb4BS\xbf\x0c\x18\xf2-}\r\x1a\xbf\x9b\xad5%(\x9c\x1e\xbf\x8c\x12\xc8\xbd\xf5\x82\x1d\xbf\xb3\xcc\x05\x16@\x84\x1e\xbf\x89\xc4\x7f\x1eoP\x1e\xbf\x88\x068e\xb2\x0b\x1e\xbf\xb3}\x94C^_\x1f\xbf\xb2\xbc\x995L\x1f \xbf\x1eb3\x1e\xa8\xdf\x1f\xbf\xe0\x9a\xf7\xd1oq\x1e\xbf\x05.\xd1\xbb\xe5\x85\x1d\xbfZ\xa4g\xa4\xa1\x0f\x1f\xbf\xa8\xfd\x01\xb5\xd1\xff\x1e\xbf\xc4T\x1e\x9e9\xf7\x1e\xbf,$\xe2>\xc8[\x1e\xbf\x89{u=\xfaG\x0c?\xfe\x93&\xf3?\x8a\n?\xe4^q]\x14]\x0b?C\xaea\x7f\x03\xb8\n?\xc3\xc0\x0b\xb7]\xb7\n?2fT\x8b\xddu\n?j\xc0\x1c\xf2\xa4\xf6\n?\xc8[l\xc4\xd9\xfe\n?U\xa2\xbc\xc7*\xb6\n?\x8a\x9eU\xd7\x13\x1d\t?:\x18\tw\x89\x16\x0b?\x11\xc4Y\x90\x99\x82\x0b?\x85\xfeH\xf2\xa1\xaf\n?dU\x17\xb3\xef\xd9\n?\xc8\xba\xadD\x8d]\x0b?x\xe2P\xfcV\xab\xf3\xbeR\xaeg\xb4\xa4E\x9b>\r=``48\xdf\xbe\xb7\xf6\xabt\xb8\x93\xb3\xbe\xe3\x98\xf3>\xc4\xd1\xe1>\x8345\xcf4\xe8\xf4\xbe\\\x82!A\xc7\xa6\xcc>\x84S\x82\xea\xe8\x81\xc4\xbe\x17\xe1\xdb\xa5\x7f\x84\xd5\xbe\xf1\xe2QU\xcc\xca\xf4\xbe/\xe7\xa8G$\xcc\xd3\xbe\x17\r.\x96\x0c\xcb\xc9\xbe:\xf9\xba\x18\xc5#\xc0>S#&2\xc6\'\xe5\xbe\xaa\x1f\xcd\xd0\xc8\xbc\xbe\xbe\xba\xe6\x84\xbe\x0e\xa7\x17?\x13}\xac**\x98\x17?\xaet\xe9\x1e\x8c\x9c\x17?\xfe:r\x1bZ+\x18?7R\xd5\xc8\xf2\xf0\x17?\xf3@Yx\xd7\xad\x17?\x9e\xbf\x9c\x8b\xcd\xc8\x17?^\xe4\xe4^\xf3\x99\x17?\xf7\x14\x9d\xba\xf5\x9e\x17?xbz\x18\xf7\xa8\x17?\x08G\x9c/\xee\xb0\x17?!Y\x1e{\xfb\xbd\x17?\x15H3nE\x9d\x17?\xb6\xd84.&\x02\x18?J\xe5`\xd1\xb2\x9c\x17?\x87\xdb\xb7J\xb6R\x11?\xa3>>h\x14Q\x10?\xd6\xd5{G\x01\xdc\x10?\xc14|M\xa0\xf9\x0f?\xad*\xbbf\x0b\xf0\x0f?n\xd8\x85\xfd."\x12?z\\M $J\x10?Z\x9dd\x05\xdc\xe9\x10?c%\xa33\x1f7\x11?d4\xb16\xcd[\x11?]s"\x92\xe7\x95\x10?z7<]u\xee\x10?\x87\xb2\x10\xc8u(\x10?*\x1f\xad\xac\x9f\r\x11?\xf2\xd2\x04\x03}\xe8\x10?\x95?\xe5\x7fA\xf4\xf2>\xaeM\x87X\x88V\xeb>\xb8\x10\xd9!\x86\x11\xf1>\xd8\xa1J\xec\xd4\xe9\xf0>3\x02p\x97\xa9\x82\xeb>\xcdU\xbd\x9c\x85\x19\xf2>z\xeee\x86a\x86\xed>L\xaf8\x91O\x01\xee>\x91gr\x04\xf0\x82\xef>\x85\x98\xac\x93\x9a\xd8\xf2>\xd06I>D\x1a\xf0>\xff]\x056\x13\x93\xf2>\x83\xe9\xc2\xdbG\x98\xed>\\\x80\x18-<\x14\xf1>\x93HslX%\xf0>21\x17\x7fL\x16\xf1>\x85\xcfU\xf1\xa25\xae\xbe\xaa\xff\xe8\x02\xe3\\\xe2>\x148]\xdc\xed\xc0\xd0>,u\xd2T\xf9\x01\xc5\xbe\x9f\r\xf2\xba2\xb7\xed>g\xa1\x90\xefC\xe0\xb4>h\x90R\x99G/\xca>~F\xe5\xe1\x0f\xa2\xda>\xf6\x1b.\xea\x81\xe3\xeb>Q\xba\xfc~\xf6\x89\xdc>a\x92\xc4M\xe6o\xe7>\x04`\x9bg\xc0\x97\xd5>R\xaeS\xd4\r\xe0\xe1>O\xd41\xec\x16\xfe\xd4>\x04=\xf0 \xa9{\xeb\xbe\xe1\xfe?\x0b|\x0e\xb6\xbe\x12\xa88\x12\x0f\xba\xe5\xbe\x81k\x81\xbc\x87o\xe0\xbe;\xe7\x1b\x0c\xfbw\xc6>\xe7\xfeU\x0f\xc8F\xea\xbeR\xd2\xfe\x9e\x94\x1d\xa0\xbe\x00\xd0c\x9c\xb0\xd9\xa8\xbe\xa1\r/\xa6\xe1Z\xe3\xbe\xa5\x9dX\x97[\xce\xf1\xbe\x0e\xdf\x1a\xb6\x02\xaf\xde\xbe\x83\x81W\x97I\xb1\xe5\xbe\xb8\x1dp2\xaf\x9f\xc9\xbe\x9f\x172^\x1aG\xe4\xbe\xd0\xed\x94o\xbd`\xdd\xbe\x85\x03\xf4$\xddM\xee>O\x8a\x89g\xf8n\xf2\xbeq;\xa4\xa9@\xe8\xd7>\xd0\xc9\xfaG\xcd\x81\xdc>0\xaf\xc2\xd8\x8f`\xe0\xbe~R-\xbb~\\\xe1>\xec\xf2\x97\xd0\xf9\xc0\xb3\xbevA"3\x9d1\xb4\xbe\xbf:k\xd5\x1fv\xe1>\xe9\x90rw\xa9\xf1\xed>\xa0{\xc0/\xbb;\xc7>\xdak\xfd#\xce\xe6\xdf>-\xfae,\x94;\xce\xbe<RZ\xf1\xca\xfa\xd3>\xe7\x88\xda\xc1Hn\xa6>\x85f\xc3\xb1\xae\xfc\xe6\xbe\x81%p\xddP1\xe7\xbe\x9c\tX\xfb\x8d\x85\xe7\xbe\x87e\x99C\xbaO\xf1\xbeJ\xf9\xd0C\xb8\x8e\xe6\xbe\xe3u\xc5\xd6\x1b\x8b\xe9\xbe\x81W\xca\xbb\x8f\x96\xe5\xbe\xce\xecQ,[x\xe6\xbeXQ\x1f\xc1\xee\x97\xe6\xbes\xad\x83\xab\xc3v\xe7\xbe\x92\x84\xc0\'9\xf3\xe4\xbe\xac^.\xed\xe6+\xed\xbe@ \x8e\xf6\xf0?\xe5\xbe\xa9\x87+\x12u\x03\xe7\xbem"\x17\x08&\xde\xe7\xbe\x9b\xd4\xde\xd5\xd6\xe0\x0c\xbfFr\x14\xde\x03\x83\x03\xbf;\x9f\x8e\xde/\xf3\x05\xbf\x93\x06\xd4]`\xb3\xfe\xbe\xa00\x88\xc3Q\x94\xfc\xbe\xc7\x1a\xd8\xd9\xdb!\x07\xbf\x1aA1\xa8\xa0*\x00\xbf\x15O\x9c\xdd\xe7E\x00\xbf\xb2~\x10\xe3\xedR\x05\xbf\xd0\x996(\x8f\xbf\n\xbf\xe5+\xc5\xffv\xc9\x05\xbf\x16\x8a\xc6r\x93d\x05\xbf\xd9L\xe2a\t8\x00\xbf<]\\\xe7\x84\x06\x05\xbf\xd9\x08\'\xedgD\x03\xbfRx\xf4\xd5\xd1\x1e\xf5\xbe\x80\x9e\x06h\xc4n\xba\xbe\xf8\xec1\xfc;\x1c\xe9\xbeD\x92\x19M\xf38\xd5\xbeC\xde\xac\x9b*B\xc7>\x9e\x9f<nQ|\xf0\xbe\xb3\xab\xb0\x00d\x96\xc2\xbe\xcc\xac\xe96\xc9\xb9\xda\xbe\x1f\xd4[\xf9\xa7g\xe5\xbe\xf8>\x7f\xe8\x1eM\xf4\xbe\x97\xc8d\x8c\xf4\\\xe8\xbe\x1f\xd7^\\\xfez\xd1\xbe6\x07dwS\x17\xd6\xbeU?z\x1d.\x90\xec\xbeX\xb6\xc4ve]\xc5>;U}\x93\xec\xd7\xe4>,:qn\xf8\x80\xc1>\x84\xa4G\xe1\xac(\xe1>\xcd\xbe@\x9ab\x15\xe7>Z\x88\xecI\xeaz\xc9\xbe\xcf\x01\x9f\xb5y\xf4\xe1>v=V}\xa7\xe1\xa4>\x93\x88\xc0\xf1\xc9\x14\xc9>\xfc\x88\x81o\xbc\xda\xb0>\x9e]-\x18\x88\x87\xec>\xd0\x1f\xc2\xbc\xb8r\xda>|\x01[\xed\x8aM\xe8>\x1fi\xfe\x0e\x15\xbe\x9b\xbe\x12:\xfa<\x9b\x9c\xda>\x16\xa1O-\x17\xd9\xd9>\xca\xbb\xc1\x1f\xd7\xb9C?\xf7\xc7A\x12g\xceC?\x8e\xa9\xe1\x9aQ\xe5C?\\\xaa\x81\xa0\x02\xccC?\x984\xf5\x12\x84\xe9C?\xb8O\xad@<*E?\x81&\x15Z\x84jC?\x8a\xe1\x93\xe35nC?H;\x8aU)GD?\x89\xed\xfam\xdd\x93C?d\x9dY\xc2\x8e"D?Q>Z\xaa~\x91C?g\xcb\x19\xa5\x86@C?\xbc\xfb\xcf\x08s\xb2C?\x95\xc3\xa3o\xae5B?LB\xbbQ\xeeN\xe3>J\xd2(\xf2\xac\xa0\xc2>\xf3\x00\x95\xb4\xea\xc1\xe5>Gz\x00hn\xa7\xdb>3\xc5\xad\x91 \xa5\xc1>\xe1KS\xbd\x95\xd8\xe5>MJg;\xdas\xc4>\xa9\xee\x93\x8e\xfe\x8a\xcd>\xde\x96W\xfc\xd2\xf1\xe1>!s\x85\x82\xc5N\xf3>\xd1\x93`m\xbc\xe9\xe1>\xad\xeb\td]\xd8\xeb>\xd5m\xdf\xa0Z!\xd7>a\xb4\xe5\xbbi/\xe8><\x82\xbb\xfe\xc5\x13\xe9>\x1f\x05&5\x7fN\xeb>\x92\xceP\x8e0x\xf2\xbe\x83\x94F\xe9u\xfb\xd4>\xb3D\x0c1\xe4U\xdb\xbe!\xe4\x83\xc8N\r\xfc\xbe\x0e\xa8*\x0ee\x01\xdc>\x8a\xbe\xb9\xc6<Y\xea\xbe\x8d\xbavTH}\xd5\xbe\x9a\x99B\xdc#!\xad>g|\xf4rL!\xee>!\xdf\xb2\x1aE\xf4\xd4>Q\xff+\xf3P\x03\xe2>\x85~\xae~:\xec\xde\xbe\xfc3\xb4\x91\x16\x88\xc2>\x801\xafP\xb3Y\xb2\xbe*5z\xde\xe6\xe2\x01?\x12\xb8\x16\xe3\x92\xfa\x01?ir\x89\x88B\xec\x01?\x8e\x89R\x01^\xc3\x02?x\x1a\xd8\xa3G\xad\xf1>#\xbf\x08N\xbb\xda\xf2>\xd2\x9b\x98\x9e\xb5\xee\xe4><G\xcf\xf2kX\x02?Lf\x06DxA\x01?V\x1e\xe1S\x91\xed\x17?\xb5>\xf8\xa6\x1c\xd4\x02?\x88F`\xecr\x1b\x02?\xb7\xba`\xb0z\xb3\x03?\xbeL\x15\x8d\xae\xe8\x03?n&\x7f\xd6\x90|\x06?\xb7\xcb\x8aA\xbdm\xe2\xbeg\xb6.\x14u\xe6\xa9>a\xccic|\xac\xdd\xbe\xfe\x08A\x06C\xa4\xe7\xbe\x9a(\x1d\x00\x7f\xf1\xf7>`1\x9c\x14\x9b+\xe4\xbe\xf8o-\x94\x9e\x12\xd4\xbeL\xd8\x9b\xfd]\x1f\xc1\xbeZ\xd1\x1b\xe12\xc0\xcb\xbe\\\x1d\xc5$\x18x\xe5\xbe3Q\xea\xe7\xb9\x80\xef\xbe\xdc[>\xedj\x94\xee\xbe\xd6\x1f\xdfUN\xa0\xdf\xbe\x1c\x84\'o\xa2b\xdf\xbe\xac\xf6X\xc8Y\x8d\xcd\xbe\x81\x90(JI\xf8\xe8\xbe\xb7\x87=\xd5*U\xdc\xbe\xe15\xcc\xa4\xf4\xab\xe2\xbeJ\\\x83F\xb6\xee\xe9\xbe\x92\xbf\xa0\xf5\xa4\xb4\xf7\xben.b\xee\xe7\x03\xf1\xbe\xbbQ:G\xb5\xed\xd4\xbe\xf2\xa8|\x05\xa6\x1e\xdc\xbe\x03\x8b,\x92\xa2\xa9\xe6\xbeq\xfd\x12\xf1C\xea\xee\xbe\x9an\x13\xc4\xa2G\xbb\xbe\xcdM\xff\x81$\xf5\xe5\xber\xc5$RP\n\xc9\xbe\xc7\xa3\xc3D\x03/\xe3\xbeRu\xf6$\x1c<\xd5\xbe\xfc^6C~\x01\xf5>l\x1a{z\x86h\xf4><vf\xa7c\xda\xf5>\x92\xc8\xd9Z\x08C\xf7> l\x8cP&\xd5\xf4>\xe1\xcc-\xbbT[\xf1>:\x99\xd3\x10"\xaa\xf6>\x11\xaa\xdd\x1f\x90\xfd\xf4>~A\xffZ&0\xf5>r\xe3%R\'G\xf5>\xb1)\x89\xa9\xfac\xf8>\x7f\xc6X\xb3_\x98\xf8>\x16\xa1\xfaw\xeb\xa1\xf4>Z\xfa\x17\xaa\xbc\xc8\xf3>\x0c\xfa\xc6\x94\xc6B\xf5>n\x99\xa5\xb1f?g?x=\xe3\x89\xdf\x9ef?\xfe\xde\xe3<\x01\xfbf?\xbb\xf20\xa0\x18\x90f?\x01\x18\xff\xfe\xf8\x81f?\xe5v\xbfc\xb5 g?\x93\xde\xa3\xe6`\x8ff?\xa7\x8dY\xec\xe5\xb9f?\x9b\xc7U\xa6\xf4\x99f?\xe5\x000\xb8\x9a8g?NxsH\xfb\xfdf?\xe5\x15\xcbbN\xfaf?\x81\x89L\x01\xcb\xc0f?\xd7\xa7\xfc\xddr\x00g?\xd7\x90Y\'T\xeef?:\x1a\xe1\xf0\x82\xf2\xed>6\xfb\xefx\xc9\x97\xd6\xbe\xf7\xa4y=\xb6\xee\xe3>3r\x9cU\xb9\xfc\xcc>\x07=\xac\xf5h\xfa\xe2\xbe\xb2\x8a\xeehD>\xe7>\xc3\xe5*\xb1\x05\xd6\xab\xbe\xf18\xdd-\x8d%\xaa>\xf1 \x9a\xb8@\x87\xdd>\xbdh\xf9\x8b\x9b\x84\xf2>j=Z\xee\x02{\xe1>\x1fN\xf6\xf1\x8a\x0f\xea>\x1fA\x99\xe3\xeb[\xae\xbe)\x92!\x1c\xc9\x11\xe3>U\xedXN\xc0\xc2\xd2>[\x9a\xc0\x81\xb7!\x07?\xdcC\x0b\xc0\xcf\xd2\x06?>\xeehxV\x1a\x06?\xd1\xb5\xdf\xdap\xd7\x07?\xd6\xbc38h\xb0\x06?Zb\x10\x1b\xa0\x04\x07?\xfc\x18\xddwyu\x05?oG\xfcF\x16\xaf\x05?\xc93(U\xd5r\x06?\xa8L\x9bH\xcf\xb1\x06?i\xd1\xe7\xb2\x04\x1f\x06?>\x1a:#r\x19\x06?\xc5k\xdf\xeex#\x06?\xffi\xce\xacmU\x06?\x12\x0b0\xc2+\xed\x05?g-\x12\x99\r\x8a\xeb\xbe\xf8\xacL\xb1M\x1d\xd1>W1\x1d\xaez\xc7\xe5\xbe@9_ I5\xe0\xbe\xffCQe\x88\xe8\xd0>\xcecc\xfeD\x1b\xe8\xbe\xff\xfe\x15\xb7Eg\xcb>H\x05\x02\xf1C\xe9\x87\xbe\xfc\xedu\xc0\xfcc\xe1\xbe\x19\xac\xf6\x9eO0\xf3\xbe\x849M^\xbb\xc5\xd5\xbeq\x83%\x04\xd6\xa0\xea\xbe\xc3T\t\x87\xb0\xe3\xc3>`k\xbeEC@\xe2\xbe\xf8W\xe2\xb3\x1e\x1e\xd8\xbe\x91&\xee\xf1\xacS\xf4>\x90\x08\x0f\x0f7\xc5\xca>\xdfn\x03\x95\x9fY\xed>P|2\xb1I\xce\xd8>\x1fu\xb1\xd4\xf8\xff\xad>\xf7\x85{\x1d\x98|\xed>\xb11\x89\xe4\xa2\xc0\xd6>\xc5\xe1\xcd\xbb\xed\xbc\xe3>L\xb1\x99\xe0G\xc0\xea>6\x07\xec\xb4\xe5\xc9\xf5>\xe4\xb8\xd7\xa3XX\xee>%\x1b\xf8Z^\x9e\xef>{\xf3\xa1k\x0b\xda\xda>\xa7\xd1}\x8b\x87\x00\xec>\xc4-\xf6#<\x84\xea>\xc4\xfc7t9|\xfe\xbe!M\xe2\xa1\xd4\x9f\x00\xbfN\xe4r\xe4\x9c\xb6\x00\xbf\xcc\xb5\xd22\xa3\x9b\x01\xbfCP\xd4Q\xb4G\xff\xbe\xf7\xcb\x99K\xbe\xb6\x00\xbf\x90f\xe1\xb5\xf4\xa5\x00\xbf\xc9\x04K\xd0\xe5\xba\x00\xbf\xfe\xda\xfe\xf2/\x12\x01\xbf\x15\x13\xd0f\x9d\x19\x01\xbf\xba\x01\x07\x7f\xf4\xda\x00\xbf\xbcl\xe1\x19gF\x01\xbfqD\x00\x8b\n\xbd\x00\xbf,\\\xe5o\xcd\xd8\x00\xbf\x0b\xa8\xd3\xe1.\xb5\x00\xbf:\x0eu\xdfNi\xf0>\xb0\xed\xd0(\'\x91\xd8\xbeWB\x83\x1e\x16f\xda>\xed\xf4\x04\nw|\xc5>\xe5\t&\xeeE\x8c\xd4\xbe\xc3\x95!\x92I\xe5\xe1> \x11\x8b\xdf\xe5@\xcf\xbed"}\xe1\xb2\x89\xbc>\x1a\x85\x0f\x07<\xe1\xd6>\xb3\xcf\xae\xfe\xb3\xb9\xf0>\x9fZ\x9e\xb3T\x18\xc7>\xda\x1a,\xd3\xe4\xee\xe9>\xca\xc2:\xd0\xaa;\xbc\xbe\x9aW\xfcO\x0bY\xdc>$\x8b,\xab\x05\xb8\xd7>\xce\x11\xe6\x05\xb4!\x0f\xbfZ\xbck\xf2S\xeb\x06\xbf\raW\xb6\xdc;\x05\xbf\xfc]F\xee7Z\x04\xbf)\xbbQ\x98)B\xf5\xbe\xd2"/\xa3\x8cK\x06\xbfrm\x81V\x87z\x1c\xbf\x13\x85O^\xd6z\x11\xbf\xe8\xcd\x08*g\xba\xfd\xbe\xe2\\\xd2a\t\x91\x12\xbf\x9cQ\xb3M\rq\x06\xbf\xf8\x07\xfd\xc2\xd5\xc8\x0c\xbfP\xa7\xa0\xec\x96\x89\xdf\xbe\x05\xed\xbd\xd9U\xb1\x15\xbf5\xdf\xa8\x89\xd2\xc2\x04\xbf\x1b\x1a\xb1C=\xb0\xf6\xbe\x04\xc6}\xf0\xe8\xe1\xf6\xbe\x8e\xec\'SA\xe7\xf4\xbew\xa2<`\xf7\xc4\xf7\xbe\xf2K\x1f\x8d+\xd4\xf2\xbeP?\x1e\xaf\xa3\xb5\xf8\xbe\x15\x82\xa8\xd4\xc27\xf7\xbe\xaa\xaa\xe4{|9\xf6\xbe<\xa3p\x93\xf7#\xfb\xbe\x81U\xf3\x9c\xac\x1d\xf6\xbe\xf3\xbb\x9f\x18Ey\xf4\xbe\xaf\x03\x84\xde\x17s\xf5\xbe\xcd\x1b\x9fA\x00{\xf5\xbe\x07=;\xec\xeb\x0f\xf7\xbe\x19\xbf\xc5%61\xf4\xbe\xc5\xfd\xc7)\xe1 \'\xbf\xd5\xedh\x1a>\xf9%\xbf\x84\x12\xfb/Bl$\xbf/TK\xd4v}#\xbfK\x80D\x0b\x80c$\xbf\x98!\xdc \x19\xd8$\xbf\xb1\x9e}\xfc\x0c\xf80\xbf\xfa\'\xe9\xae\xb0S)\xbf\xb8\x86q\xd0o\x9f!\xbf\x93i\x9b\x1a\xd1\x86+\xbf%x\xfb\xab\xc6\xfa"\xbf\xfb\xf0\x01\x87v{&\xbf\xe3\xa2\xdd\x1a\xdf\xe1\x1b\xbf\x803BB\xef\xd1,\xbf\xe6;\xdb\xf1\x91q$\xbf\xd7\xf7\xebY\xc7n\x08\xbf\x984\x84\x90\x82.\xf1\xbe\xad8N\xab\x15d\xfa\xbe\x9f\x9f]\x96\x89\x18\x03\xbf\xeaJ\x05\xb0U\x0f\n?\xc9\x01\xb9\xf5qn\xf5\xbex\xf9\x8b\x97\x90\xf7\xf5\xbe\xca\xb1\xb3\x86P\xbc\xf2\xbe:b\x12\xfb\xbb@\xf5\xbeH\xe1\xb4<U\xb2\xed\xbeh}^\x8e\xeb\xa5\xfc\xbe#Z(tFl\xf3\xbe\xbe\xd3$9\xf8\xcf\xee\xbe\x87\x18\xfe7A\xc1\xfc\xbe=\xb8\xc9\xd3\xfcT\xf1\xbe7"\x93\xdaZ\xa6#?\xa9f\xb1\xf8D\r$?\x0e\xebT\xd6\xa4\x9b#?\xe0\x9e\xa8\xfe;\xc7#?S\xafg\xca\xbb\xa6#?\x08\xeb}\x86X\xf6#?7\xb5\x1c\x07\x9f\xa1"?\xe5|\xe4@\xca\x10$?\xa7E\x98Z\x19\xdd#?\x08\xb6\xfe*\x05\x84#?\x8d\x8f\x96\xa0\x19\xbe#?\xc0\x98q\x9fC\xc9#?\xab\xb4\xffV3\x80#?\xffe_\xfd\xde\xd0#?\x04J\xd7u\xecf#?\x92\xb2\xf3\xf2\x8aW\x19?\xaa;<\xd8D\x06\x13?\x9a\xd0\xdc?\xe4\xe3\x16?\xa3y\xe4\xee\x8b\xb1\x14?(\xadJ(\xefE\n?\x91y~\xda\x8a\x0b\x17?<\xb8\xa8\x97t<\x13?\x9e;8P\xdeU\x14?\xfa\x99\x9f]pG\x16?1\xc9\x8f\x82\xc8\xf7\x15?\x1e\x08\xe2\x18\xf5\xf0\x17?\x1c_L\xb1\x9d\xdf\x15?\xcf\t\xdbr23\x15?\x0c\xbb\xd6\xb2\x08:\x15?`1\xb0A\x86b\x15?\xb7\x95P\xab\xdc\xa7\x05?C\xf7\xf6\xf4T(\xf7>a\x9f\xd0\x07%\xda\xfb>\xf9\xca\xb6\x92\x03b\x04?xe\xe7p\xc3\t\xf6\xbe\xa0\x1d\x1foR,\xfb>\x07\x85|\n\xa6\xeb\xf9>\x8d\xd6\xf5\x03\x18\xd4\xf8>%;\xb7\xad\x82\xd0\xfa>wU\xec\xdag!\xf2>\x03\x9e2\xcc\xf7\xa4\xf5>\x89S\x05\xa9\xc7\x90\xf8>m\xf2\xec\x82\xbf\xa2\xf7>\xec\xbb\x107\xf6\xb1\xfe>\xb0q=df\x89\xf8>\xca\x15\xc98\xdeh\x85\xbf\xa8\xfc\xed\x13\xb7\x82\x85\xbf>\xec\x99\x10\xb5m\x85\xbfm)*$\xc0\x90\x85\xbf\xcf\xd5\xe6t0w\x85\xbf\xac/\x96\xc3\xf9g\x85\xbf \xb4\xf9S*u\x85\xbf\x7fF_\xc8\x15z\x85\xbfX\xd7\x1a\xedQf\x85\xbf\x15\xc6\xd95\xf3[\x85\xbf\x1fC\xfd\x8c\xead\x85\xbfm\xcc\xef\'mo\x85\xbf8\xe0G/$w\x85\xbfn\xb2"\xb5Nl\x85\xbf\xa4\xb3sysm\x85\xbf\xa1\x04_F\x88 L?\xbfLg\x91\xf8\x12L?\xe8\t.=\xd2>L??\xe5\xc0\x95Q<L?a\xe9`-$=L?A\x86\xf9{\xd1\xe5K?p+\x7fP\x8f\x1cL?:\xda\xe2(\xfd\xe4K?\xd7RK\xcc\xf7XL?,=\xfc\xcct"L?\x17\xd7\x0eN\x82(L?\x96+@\xb3\xea(L?<\x89\x99G,:L?\xd07\x1b\x91\xe5\'L?e\x04\xbe\x16\x10*L?j gC\xa5\xda\x15?,}.\xf1\xd3t\x14?N\x10\x8d2<\'\x12?Du\xdeP\xe2\x99\x10?\x91\x1c%\xa0\xcfS\x12?\x07\x83\xb5\xe0\xfe:\x12?\x8d\xa9\xcc\xc0\x18S#?\xbb\r\xc2\tFy\x19?\xee}\xc3?\xc9\xcd\x0c?n7\x88\x80\xd6\t\x1d?#\x87\xe9\xd8\x1c\xf1\x0f?\xf2\x82\xbb\xeez(\x16?G\x82\x06\xc72\xc9\x00?\xaa\'a\xba"\xca\x1e?\x0f\xa8:\xf1\xe1\xed\x11?\xfeO\x82\xa8\x1f\x85\xfc>\xbe\xd8\x9f;J\x83\xcc>:\xf4\x1cr\xb8l\xe2>,\xe3]QL\xc1\xfd>.\xba\x08\xd5Zg\t\xbf\xda\ny\xa7\x83W\xe4>\xc5g\xb7\xcd\xca\xcf\xdf>d\xb2_\x9c\xf5\xc3\xd8>\xed5\x11g\xf1B\xda>s\x8e\xb3\xbd\x0f\xd2\xdc\xbe\xb3.\x8d\xc5\xa7\x9e\xc7>\xb1YI\xbfR\xce\xe9>\xb1\xd1\x0b{\x01\xef\xcd>{\x03\x84\t\x1fc\xeb>\xe6 \xc0\xa9\x88\xb4\xd0>\xc5\x92\x7f\xe2\xaat\x98?\xad\\\xf0<\xe0T\x98?Io\xfc\xb1\xad\x1c\x98?\x85,V\x02\x12\xfe\x97?\xc4\x13\x8f0/\x1d\x98?J\x10\x18\xd5\x1a+\x98?, f\xf8+\xf3\x99?\xfbE\xe8\xaa\xbd\xc7\x98?x\xe0\xc2S\xad\xc2\x97?-\xc6\xc3\x94\xf4\x0f\x99?\xe3\x7f\xc76\xb1\xee\x97?\x05\x81\x810^r\x98?\x7f?\xa1\x84\x93C\x97?\x9ca|\xa0x?\x99?\xd6Z\x85\x99(\x1b\x98?\xf1\x8azVX\xee\xf1\xbe\xf6$\xe7\xc2\\K\x99\xbe\x88\t\x82\xfe\xf1\xc5\xc6\xbeW\xda\xff\xf7k\xaf\xf7\xbel\x02 y\x0e\xe2\xfc>\xac\xb2\x07:\xdc\x99\xcb>I\xb9E\xd4\x9e\x95\xe7\xbe\xc1n_,c\xcb\xe5\xbe\xc41\xab\xec \x8e\xb2\xbe01o:\x01\x8a\xd2>\xc1\x02{\xdc\xfb\xb7\xe4\xbe\xc0\xa0\n{r\xbe\xc5>\xb3e\x1a\xbe\xf3#\xb4>q\x00g\xab\xe7u\xdb\xbe\xfbBt\xea\xf8\x14\xa4\xbe\xea\x12\x93 M2\x0e?n\xe2\xe8\x9d\xda\x92\r?\x83\x1fJ\x1drR\x10?\xbbC\xdd8<\xde\x0f?\xb7\xa6(p\xe7\xc6\x1f?$K\xbdqtL\x00?\x81>\x14h\x96\xdd\x11?\xf7O\xe7\xa3<\xfa\x0c?!\xb9\x07\xacK7\x0e?\x9f\xab+I\xa3<\x0e?\xae\x91Vo\x07 \x0e?#\x0b\xa0\xb2lj\x0e?\xc7}Ca\xd9@\r?\\\xf8r\xf7-5\x15?\x93\x83\xf3w\x11\xb6\x11?\x0e\x9d\xc4\xef\xb0\xd8\xf7\xbe\x95j\xb7\xb9\xc58\xcc>>\xa6\xce\x97P\xf9\xe7\xbe\x17\x86\xf1\xc6o\'\xdd\xbeW\xec\x9f\xc2\xad\xa7\xf6>\xd1&\xab\xdbJ\x9e\xec\xbe\x05|\xd0Ry\xf5\xce\xbeN\x03pv\x0f\x8b\xca\xbe\xf3O\xaa\xeb\xa1G\xe3\xbeS\x93\x01v\xe9\xc0\xed\xbeC\x9cQ\xf5\xd0e\xdf\xbe\xf8-\xa0^/S\xf1\xbe\xfb\x01\xf1\xbd~j\xbf\xbe7\xc8j~\xfd\xfa\xeb\xbe\x1c\xb5\x166*S\xdb\xbe\xe9[0r2c\xf0\xbe\x98\x8bz\xad\xc5\xbc\xd4\xbe\x17\x9b\xae\x9c\xee/\xe3\xbe\xee\x95\xdd\xd1\xc3_\xe1\xbe\x91\xfel\xbf\xc1\x01\xd8\xbe\xc1C\xd2s\xac\x96\xe6\xbe1M\x96\t\n\x9a\xd4\xbe%Q0\xda\xdd1\xdd\xbe{\x15\xde\xb6\xc6\x1e\xe3\xbe\x9b\x17\x17\xf8\xf3\xe2\xe8\xbe\xf1m\x9bG\x90T\xdc\xbe\x106\nF\x99\xb2\xde\xbe\x84\r\x9a<\xc8=\xd8\xbe\xa4B\\\x9bs\xb7\xdc\xbe\xbb\x94\xce\xce\x12\x95\xcd\xbe\x95\xe2.\x8bbeT\xbf\xdf\xfa\xe4s\x10\x7fT\xbf|\xa7Y\n+%T\xbfD\xdeFNpKT\xbfGT\xc6\x93\xda@T\xbf\xc1\xcd\x077\xd1\xacU\xbf\x18\x93*x\xffST\xbf\x0e/\x0f$\xd0vT\xbf\xe3\xff]_\x96LT\xbfc\x84\x9b\xcc;,T\xbf\xa8\x0b\xac2g"T\xbf\x15O\xe2\x99\xff:T\xbf\x9c\xa3\xd5\xb7?UT\xbf\xbe\xfa\'\xcd\xb9\'T\xbf\xb6\xfe\x8d\t\x06\x11T\xbf\x894\xad\xdaa\x1b\xe8\xbe\n\xfcMw\xbc\x13\xa1>E\xccw\x87\xb46\xec\xbeMR;p\xa8\xa8\xd9\xbe\xec\xd9\xb5\x16`%\x87>\x9f\xf1\xc8\xa9fm\xea\xbe,\xa8,\x1f\\\xa7\xc3\xbe@\x0c<\x90L\x06\xb1\xbe\xb8\n\xe7\xa0\x8c\xdc\xe7\xbe|\x10V\xb2be\xef\xbeQEW\xc1\xda\xfd\xe2\xbe\xd2s\xd1\xf3o\xe3\xe5\xbe\xad\xb9!B\xf5u\xd8\xbe`\x93\x18\x1c\xbe\x07\xe4\xbex\xcf\xec\x96\x8a\'\xd6\xbe\xfdz\xad\x15[>\xf0>\xedj\x13\xacf\xd9\x02?#\x1b\xffh\xbe\xe0\x10?\xc8\xb7\xe3\xf8\xefn\x10?\\O\x17\x93d\t\x16?\x03/\xa0\x10B\xbd+\xbf\xbeY\xcd3\xe8&\x1e?Z\xd8\xa5\xfe\xee(\x1f?\xbe\x0e\xb4sO\x8e\x14?ua\x0f\xca\xc0\xcc\x15?u\x06j\x92[\xd0\x17?u\x99\xc2\xcf\x12[\x12?m\xbd\xefb\xdd\x01\x1c?\x87\x00=~\x15y\xe7>\xb8X\xab\xb4\x07\x99\x17?\x88\xe6fF?\xf7\xfa\xbeo\xb5\xe5\x1b\xfa\x13\xc5>\x81\x8d\x81\x13)6\xe3>\xcdu\xf3\x8f\x0e\xdc\xab>3\x8f\xe3D{\xf7\xd3>\xb1\r\x04mO\xf6\xf7\xbe3@{\xef\x85/\xbb\xbe\xa8\xe4\x19\xe0\x02\xaf\xd0\xbe\x9d\x9e\x198\xb8+\xe4\xbe\x87\xa1\xdf}z\xe3\xfc\xbe\x92\x90\x94\xc3N\xf8\xf0\xbe\xff\xbb\xbeD\xdf\x81\xf5\xbe\xec\x0f\x89;\xcf\x85\xe0\xbe\x95\x18\x8e\xc6\xae)\xf1\xbe\x97\x18\xec\x80\xb0\x18\xeb\xbe0\xa0\xde\xfd\xb2\x04]\xbf~\x05)\x02\xba\xe5\\\xbf\xfe\xcb\xf2\xfaY\xe3\\\xbf{\xeb\xbe+\xe2\x9b\\\xbfS\x88\xdc4\xfeV_\xbf`aL\x9c\xea\xda\\\xbf\xc4\x1b\xf7\x85\xf5\xcc\\\xbfJ\x8f\x93\xcd\xb2\xd9\\\xbf1\xbdA&\xe4\x88\\\xbf\xc9&\x1a\x03b\xe2\\\xbf`\xc9}mQ\xdf\\\xbf\xb8\xf6\x08\xaa\xc9\x81\\\xbfP\xdc\xae\x81\x8e\xd8\\\xbfR\x10kK\xcez\\\xbf\x1a\xff6\xdd\xc3\xe1\\\xbf\xf8\x1bp\xcf\x90\xae\xfe\xbe\xd7+\x94W=\x8f\xc1\xbe\xe9\x93l\xbb\x1f\xdf\x04\xbf\xa0\x13\x8c\xcf\xf2\x9f\xeb\xbe{@\xa8Mck\x9c\xbegY\x82v\xb3\x04\xfc\xbe\x15\x8d\xd2\x12\xd5\xdd\xa6\xbeX&\x081\xbe\xe7\xca\xbeA}\x9b\xa7J>\xf7\xbe9r\x0f\x0c\r\x00\x00\xbf\x8a!\xbe\x83\xc6\xea\xf9\xbe\x17\xdc(\x08\x01T\xff\xbe\xe1]b\x07\x18\x17\xe1\xbe\xc3\xfd#\xc4.\xff\xf2\xbeHfn\x9d\'\xaf\xf1\xbe\xc0h\x00B\xd0\x0b#?M\xa7\xc6c\xffO4\xbf\xd3\xc5*\xfb1F0\xbfN\xf3\xdb\x01&b,\xbfR\x1e\xa7\xc5\xa0\x99,\xbf\\\x93\x9f\x04\x9aeF\xbf\xc8S\x8e\xd7\xe3\xd0-\xbf\x0c\x00^\x94\x1b\x8f.\xbf\xda\x90j\x12\xc3\x92*\xbf\x97k\xa7\xe6\r\xb26\xbf\x1aI\xdd\xa3Q\xdd(\xbf\xe4\xf3\x86\x00\x1c\xdb.\xbf\x11\xf0\xad\xb2\xc3X/\xbf\x93N\xf6\xae\xc0\xf8+\xbf\x92\xb6\ni|&.?cw\x1c\xf4&\x02\xee>J\x01\xe4X\xcdG\xc2>\x93S\xca1\xe7r\xe3>\xc5@g\x90\xae#\xdd>{\xe6\xf0\x11\n\x01\xa2>\x87I\xa6\x1a\xc4\x9a\xf1>\x9ck\x0f\x8f\xa1\xac\xd3>\x10\t\xfc\x94\xe4\x96\xd9>\x11\x01o\xf3\xc3v\xe6>W\xf8\xb6\xdd\x8f!\xf2>\xf6\x82`\x9a\x9b\xd7\xe9>i\x1ed^\x14y\xe1>\xfb\xacj\xba\xca\x98\xdb>wr\xcd\x1d\xe6\xad\xe7>\x0b\x05\xa6\xf8\xeeH\xe3>\xf5\x8a\x05P\xe6:\xf5>\x87\x01\xa1\xc2\xec\xcf\xe7>\xb1\x80\xc0\xaf\xea0\xe5>S\xdcu\xe1\x10\x82\xea>\x93\x0f\xfd;\x84m\xe8>\x92f\xef\nZ\xf6\xf7>1@\x1dI\x12\x0f\xee>\n\x15q_[O\xef>\xa4\xfc\xe7\x17\xd1\x82\xea>2Kva\xe7\x08\xf7>\x1b\x9eMo\n\x94\xe9>x\xec\xaf{Q\xd8\xf2>\xee\xdat\x8a\x9e\xff\xe6>Z{t\xf9\xef\x13\xf6>\xa9\xbb,\x0b\x8a\x07\xf4>\xb3 %\x0c\xd0\xcec\xbf%H\xa7wc\xfaf\xbfn^\xe2\xc7u\xf8f\xbf\xe8\x80\x96\x15\x91\xcff\xbf\r\xb4\t)\xda\xe1f\xbf\xa5-v\x94.Zj\xbfC0<\xf8\xf0\xb1f\xbfJ\xcb\x7fX#\xeaf\xbfZ\xcb\x19\xc1\xaf\xa8f\xbf\x9b\x00\x14\xac@\xcff\xbf\xa0ra\x1c\xf9\xb3f\xbfo\x16\x91R\x92\xaff\xbf\x01\xc0\xe2\xfah\xe3f\xbf\xac\xf8}\xad\xa2\x88f\xbf\xa0\x82B\xf7\x94of\xbf{\xbc\xe9X0\xcf\xe8\xbe\xcc\x93\x89\x00\xb4^\xea>\xee#\xf1iL\xfa\xd8\xbe\xf2\xe0\xc2c\xfa\x99\xe9>\x95\xe8m\xfd\xa6\\\xf4>\xfc\xa8\x8d\xb4Q\xd1\xf0\xbe\xf7\xa3u\xfd\xfd\xe7\xdf>\xb1~\x19\xd5\xd1F\xd8>r-\xd91 w\xe3\xbe8U3\xeet]\xed\xbe\xc1\xe8\x9e\x86\x0e\xbd\xc2\xbe)\xb6\x8d\x1e\x9e\xf8\xd6\xbe!E\xf0\xe3Hx\xd8>\xe1\xaa\xb0S7a\xd0\xbe\x8f\xb1:\xbc\x83\xb6\xd0>\x07r\x19\x853\x96\xf7>\x8fl\xe0\xbf?\x8b\xb3>N6\xe0Y)\xb7\xe1>>\n\xd6}LV\xa1>\'.\x8b\x12)\xaa\xd6\xbegj\xb1\xf9v\xfc\x87>\xd7\x80S\xe3\xf1\xe0\xc1\xbe7\xe9\xe76\x842\xc0\xbe\xf6\xe1\xd5\xd4p\x8c\xe4>\x08g\x18\xa7\xe2\x84\xf8>J\xd7\xda$\xd4\x0f\xe1>r\x96|[\x85\x1a\xf7>\x96~\xdf\xcd\x93\x1f\xc5>\x17\x8a1d\xdf\x07\xe8>\x13\x16\xa1\xb2\xc5\xd8\xf6\xbe)\xb5\xc3]\xf3L\xf1\xbe\xae9e\xdfBt\xb3\xbeq\xbc\xa5\xd2\xe3\x07\xe6\xbe>\x06H\x05gi\xd0\xbe\xa7}\xf7J\xbd\xa3\xc4><\xbe\xb8\xd58\x94\xeb\xbe\x85\xe4\xde\xa9`7\xb6\xbe\xccu\xa2\x9c\xf5\xa6\xd1\xbe\xeaP\x12*\x9e\xe5\xeb\xbe\xeeS\xe5\x0fv\xa3\xf2\xbe/\x15\xa2\xb3\xaf\x0f\xb2\xbe\x19\xf4<\xfa\xa7P\xef\xbe\x1e\x92YX9\x7f\xce\xbeU^\x82\xeb`\'\xe6\xbe\xf1\xcb\xdc\x9c@V\xe0\xbe\xf1\xf1,\x05\xb6|@\xbfa\x94\xc8\x01@k?\xbf\r\x06\xb84\xb5\\@\xbf\x10\x89v\x1e\xbb\xae?\xbf\xce+wr\x14M>\xbf\x80\xe9I\x85Q\xa2>\xbf\xc3\xc5\xa5\xc2\xd2\xf2?\xbf\xe9\x90&4\x05l?\xbf\x95z\x8c\x950\xa5@\xbf\x88-U\xc2\xddj@\xbf\xef\x81\x86 (8@\xbf\x99l\x0eM\x05S@\xbf\xf8m\x97z\xae+@\xbf<8\n\x99\xd7=@\xbf\xe8\xed\xca\xc3\xb7\x17@\xbf'
p2854
tp2855
basg105
I00
sg106
I00
sg59
g0
(g60
g2
Ntp2856
Rp2857
(dp2858
g64
(I00
I00
I00
tp2859
sg65
S'float64'
p2860
sg67
g100
sg68
I00
sg38
Nsbsg112
Nsbsg38
Nsg55
(itheano.gof.utils
scratchpad
p2861
(dp2862
bsg12
Nsg59
g2857
sbasg55
(itheano.gof.utils
scratchpad
p2863
(dp2864
g138
(lp2865
(g187
I75
g188
S'self.functions()'
p2866
tp2867
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p2868
tp2869
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p2870
tp2871
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2872
tp2873
asbsg154
(lp2874
g2805
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2875
(dp2876
g138
(lp2877
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p2878
tp2879
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2880
tp2881
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2882
tp2883
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p2884
tp2885
asbsg59
g0
(g60
g2
Ntp2886
Rp2887
(dp2888
g64
(I00
I00
I00
tp2889
sg65
S'float64'
p2890
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp2891
Rp2892
(dp2893
g12
g0
(g13
g2
Ntp2894
Rp2895
(dp2896
g17
(lp2897
g0
(g8
g2
Ntp2898
Rp2899
(dp2900
g12
g0
(g13
g2
Ntp2901
Rp2902
(dp2903
g17
(lp2904
g0
(g33
g2
Ntp2905
Rp2906
(dp2907
g37
Nsg55
(itheano.gof.utils
scratchpad
p2908
(dp2909
g58
Nsbsg59
g0
(g60
g2
Ntp2910
Rp2911
(dp2912
g64
(tsg65
S'float64'
p2913
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp2914
g44
tp2915
Rp2916
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p2917
tp2918
bsbasg55
(itheano.gof.utils
scratchpad
p2919
(dp2920
g138
(lp2921
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p2922
tp2923
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p2924
tp2925
a(g148
I533
g149
S'inplace=False)(input))'
p2926
tp2927
a(g144
I401
g145
S'self.add_tag_trace(node)'
p2928
tp2929
asbsg154
(lp2930
g2899
asg156
g0
(g157
g2
Ntp2931
Rp2932
(dp2933
g161
(lp2934
sg163
(lp2935
sg165
(lp2936
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp2937
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p2938
(dp2939
bsg59
g0
(g60
g2
Ntp2940
Rp2941
(dp2942
g64
(I01
I01
I01
tp2943
sg65
g2913
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp2944
Rp2945
(dp2946
g12
g0
(g13
g2
Ntp2947
Rp2948
(dp2949
g17
(lp2950
g0
(g8
g2
Ntp2951
Rp2952
(dp2953
g12
g0
(g13
g2
Ntp2954
Rp2955
(dp2956
g17
(lp2957
g0
(g8
g2
Ntp2958
Rp2959
(dp2960
g12
g0
(g13
g2
Ntp2961
Rp2962
(dp2963
g17
(lp2964
g0
(g8
g2
Ntp2965
Rp2966
(dp2967
g12
g0
(g13
g2
Ntp2968
Rp2969
(dp2970
g17
(lp2971
g0
(g8
g2
Ntp2972
Rp2973
(dp2974
g12
g0
(g13
g2
Ntp2975
Rp2976
(dp2977
g17
(lp2978
g0
(g8
g2
Ntp2979
Rp2980
(dp2981
g12
g0
(g13
g2
Ntp2982
Rp2983
(dp2984
g17
(lp2985
g0
(g8
g2
Ntp2986
Rp2987
(dp2988
g12
g0
(g13
g2
Ntp2989
Rp2990
(dp2991
g17
(lp2992
g0
(g8
g2
Ntp2993
Rp2994
(dp2995
g12
g0
(g13
g2
Ntp2996
Rp2997
(dp2998
g17
(lp2999
g0
(g8
g2
Ntp3000
Rp3001
(dp3002
g12
g0
(g13
g2
Ntp3003
Rp3004
(dp3005
g17
(lp3006
g0
(g8
g2
Ntp3007
Rp3008
(dp3009
g12
g0
(g13
g2
Ntp3010
Rp3011
(dp3012
g17
(lp3013
g0
(g8
g2
Ntp3014
Rp3015
(dp3016
g12
g0
(g13
g2
Ntp3017
Rp3018
(dp3019
g17
(lp3020
g0
(g8
g2
Ntp3021
Rp3022
(dp3023
g12
g0
(g13
g2
Ntp3024
Rp3025
(dp3026
g17
(lp3027
g0
(g8
g2
Ntp3028
Rp3029
(dp3030
g12
g0
(g13
g2
Ntp3031
Rp3032
(dp3033
g17
(lp3034
g545
ag0
(g8
g2
Ntp3035
Rp3036
(dp3037
g12
g0
(g13
g2
Ntp3038
Rp3039
(dp3040
g17
(lp3041
g0
(g8
g2
Ntp3042
Rp3043
(dp3044
g12
g0
(g13
g2
Ntp3045
Rp3046
(dp3047
g17
(lp3048
g469
ag0
(g8
g2
Ntp3049
Rp3050
(dp3051
g12
g0
(g13
g2
Ntp3052
Rp3053
(dp3054
g17
(lp3055
g0
(g8
g2
Ntp3056
Rp3057
(dp3058
g12
g0
(g13
g2
Ntp3059
Rp3060
(dp3061
g17
(lp3062
g545
asg55
(itheano.gof.utils
scratchpad
p3063
(dp3064
g138
g708
sbsg154
(lp3065
g3057
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3066
(dp3067
g138
g728
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3068
(dp3069
g138
g750
sbsg154
(lp3070
g3050
asg156
g764
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3071
(dp3072
bsg59
g776
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3073
(dp3074
g138
g780
sbsg154
(lp3075
g3043
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3076
(dp3077
g138
g794
sbsg59
g804
sg38
Nsbag0
(g8
g2
Ntp3078
Rp3079
(dp3080
g12
g0
(g13
g2
Ntp3081
Rp3082
(dp3083
g17
(lp3084
g469
ag0
(g8
g2
Ntp3085
Rp3086
(dp3087
g12
g0
(g13
g2
Ntp3088
Rp3089
(dp3090
g17
(lp3091
g0
(g8
g2
Ntp3092
Rp3093
(dp3094
g12
g0
(g13
g2
Ntp3095
Rp3096
(dp3097
g17
(lp3098
g545
asg55
(itheano.gof.utils
scratchpad
p3099
(dp3100
g138
g830
sbsg154
(lp3101
g3093
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3102
(dp3103
g138
g842
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3104
(dp3105
g138
g853
sbsg154
(lp3106
g3086
asg156
g864
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3107
(dp3108
bsg59
g873
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3109
(dp3110
g138
g877
sbsg154
(lp3111
g3079
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3112
(dp3113
g138
g889
sbsg59
g899
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3114
(dp3115
g138
g904
sbsg154
(lp3116
g3036
asg156
g921
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3117
(dp3118
g138
g926
sbsg59
g937
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3119
(dp3120
g138
g942
sbsg154
(lp3121
g3029
asg156
g957
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3122
(dp3123
bsg59
g963
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3124
(dp3125
g138
(lp3126
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p3127
I4578
S'grad'
p3128
S'ygrad = dot(x.T, gz)'
p3129
tp3130
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3132
tp3133
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p3134
I3084
S'transpose'
p3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3136
tp3137
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3138
tp3139
asbsg154
(lp3140
g3022
asg156
g0
(g157
g2
Ntp3141
Rp3142
(dp3143
g161
(lp3144
sg163
(lp3145
I1
aI0
asg165
(lp3146
sg167
g965
sg168
I00
sg169
(I1
I0
tp3147
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3148
(dp3149
bsg59
g0
(g60
g2
Ntp3150
Rp3151
(dp3152
g64
(I00
I00
tp3153
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3154
Rp3155
(dp3156
g12
g0
(g13
g2
Ntp3157
Rp3158
(dp3159
g17
(lp3160
g0
(g8
g2
Ntp3161
Rp3162
(dp3163
g12
g0
(g13
g2
Ntp3164
Rp3165
(dp3166
g17
(lp3167
g0
(g8
g2
Ntp3168
Rp3169
(dp3170
g12
g0
(g13
g2
Ntp3171
Rp3172
(dp3173
g17
(lp3174
g0
(g8
g2
Ntp3175
Rp3176
(dp3177
g12
g0
(g13
g2
Ntp3178
Rp3179
(dp3180
g17
(lp3181
g0
(g8
g2
Ntp3182
Rp3183
(dp3184
g12
g0
(g13
g2
Ntp3185
Rp3186
(dp3187
g17
(lp3188
g3029
ag0
(g8
g2
Ntp3189
Rp3190
(dp3191
g12
g0
(g13
g2
Ntp3192
Rp3193
(dp3194
g17
(lp3195
g85
ag0
(g8
g2
Ntp3196
Rp3197
(dp3198
g12
g0
(g13
g2
Ntp3199
Rp3200
(dp3201
g17
(lp3202
g0
(g8
g2
Ntp3203
Rp3204
(dp3205
g12
g0
(g13
g2
Ntp3206
Rp3207
(dp3208
g17
(lp3209
g469
ag0
(g8
g2
Ntp3210
Rp3211
(dp3212
g12
g0
(g13
g2
Ntp3213
Rp3214
(dp3215
g17
(lp3216
g0
(g8
g2
Ntp3217
Rp3218
(dp3219
g12
g0
(g13
g2
Ntp3220
Rp3221
(dp3222
g17
(lp3223
g85
asg55
(itheano.gof.utils
scratchpad
p3224
(dp3225
g138
g1003
sbsg154
(lp3226
g3218
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3227
(dp3228
g138
g1015
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3229
(dp3230
g138
g1026
sbsg154
(lp3231
g3211
asg156
g1037
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3232
(dp3233
bsg59
g1046
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3234
(dp3235
g138
g1050
sbsg154
(lp3236
g3204
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3237
(dp3238
g138
g1062
sbsg59
g1072
sg38
Nsbag0
(g8
g2
Ntp3239
Rp3240
(dp3241
g12
g0
(g13
g2
Ntp3242
Rp3243
(dp3244
g17
(lp3245
g0
(g8
g2
Ntp3246
Rp3247
(dp3248
g12
g0
(g13
g2
Ntp3249
Rp3250
(dp3251
g17
(lp3252
g469
ag0
(g8
g2
Ntp3253
Rp3254
(dp3255
g12
g0
(g13
g2
Ntp3256
Rp3257
(dp3258
g17
(lp3259
g0
(g8
g2
Ntp3260
Rp3261
(dp3262
g12
g0
(g13
g2
Ntp3263
Rp3264
(dp3265
g17
(lp3266
g85
asg55
(itheano.gof.utils
scratchpad
p3267
(dp3268
g138
g1105
sbsg154
(lp3269
g3261
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3270
(dp3271
g138
g1117
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3272
(dp3273
g138
g1128
sbsg154
(lp3274
g3254
asg156
g1139
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3275
(dp3276
bsg59
g1148
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3277
(dp3278
g138
g1152
sbsg154
(lp3279
g3247
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3280
(dp3281
g138
g1164
sbsg59
g1174
sg38
Nsbag0
(g8
g2
Ntp3282
Rp3283
(dp3284
g12
g0
(g13
g2
Ntp3285
Rp3286
(dp3287
g17
(lp3288
g0
(g8
g2
Ntp3289
Rp3290
(dp3291
g12
g0
(g13
g2
Ntp3292
Rp3293
(dp3294
g17
(lp3295
g85
asg55
(itheano.gof.utils
scratchpad
p3296
(dp3297
g138
g1193
sbsg154
(lp3298
g3290
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3299
(dp3300
g138
g1205
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3301
(dp3302
g138
g1216
sbsg154
(lp3303
g3283
asg156
g1227
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3304
(dp3305
bsg59
g1236
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3306
(dp3307
g138
g1240
sbsg154
(lp3308
g3240
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3309
(dp3310
g138
g1252
sbsg59
g1262
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3311
(dp3312
g138
g1267
sbsg154
(lp3313
g3197
asg156
g1278
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3314
(dp3315
g138
g1283
sbsg59
g1293
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3316
(dp3317
g138
g1298
sbsg154
(lp3318
g3190
asg156
g1309
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3319
(dp3320
bsg59
g1314
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3321
(dp3322
g138
g1319
sbsg154
(lp3323
g3183
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3324
(dp3325
bsg59
g1336
sg38
Nsbag0
(g8
g2
Ntp3326
Rp3327
(dp3328
g12
g0
(g13
g2
Ntp3329
Rp3330
(dp3331
g17
(lp3332
g35
ag0
(g8
g2
Ntp3333
Rp3334
(dp3335
g12
g0
(g13
g2
Ntp3336
Rp3337
(dp3338
g17
(lp3339
g0
(g8
g2
Ntp3340
Rp3341
(dp3342
g12
g0
(g13
g2
Ntp3343
Rp3344
(dp3345
g17
(lp3346
g545
asg55
(itheano.gof.utils
scratchpad
p3347
(dp3348
g138
g1363
sbsg154
(lp3349
g3341
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3350
(dp3351
g138
g1375
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3352
(dp3353
g138
g1386
sbsg154
(lp3354
g3334
asg156
g1397
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3355
(dp3356
bsg59
g1409
sg38
Nsbag0
(g8
g2
Ntp3357
Rp3358
(dp3359
g12
g0
(g13
g2
Ntp3360
Rp3361
(dp3362
g17
(lp3363
g0
(g8
g2
Ntp3364
Rp3365
(dp3366
g12
g0
(g13
g2
Ntp3367
Rp3368
(dp3369
g17
(lp3370
g85
asg55
(itheano.gof.utils
scratchpad
p3371
(dp3372
g138
g1428
sbsg154
(lp3373
g3365
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3374
(dp3375
g138
g1440
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3376
(dp3377
g138
g1451
sbsg154
(lp3378
g3358
asg156
g1462
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3379
(dp3380
bsg59
g1473
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3381
(dp3382
g138
g1478
sbsg154
(lp3383
g3327
asg156
g1492
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3384
(dp3385
bsg59
g1497
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3386
(dp3387
g138
g1503
sbsg154
(lp3388
g3176
asg156
g1514
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3389
(dp3390
bsg59
g1519
sg38
Nsbag0
(g8
g2
Ntp3391
Rp3392
(dp3393
g12
g0
(g13
g2
Ntp3394
Rp3395
(dp3396
g17
(lp3397
g1682
asg55
(itheano.gof.utils
scratchpad
p3398
(dp3399
g138
(lp3400
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p3401
I2079
S'zeros_like'
p3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3403
tp3404
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3405
tp3406
a(g148
I533
g149
S'inplace=False)(input))'
p3407
tp3408
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3409
tp3410
asbsg154
(lp3411
g3392
asg156
g0
(g157
g2
Ntp3412
Rp3413
(dp3414
g161
(lp3415
sg163
(lp3416
sg165
(lp3417
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp3418
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3419
(dp3420
bsg59
g0
(g60
g2
Ntp3421
Rp3422
(dp3423
g64
(I01
I01
I01
tp3424
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3425
(dp3426
g138
(lp3427
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/subtensor.py'
p3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p3429
tp3430
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p3432
tp3433
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3434
tp3435
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3436
tp3437
asbsg154
(lp3438
g3169
asg156
g0
(g196
g2
Ntp3439
Rp3440
(dp3441
g200
g201
sg202
g0
(ctheano.scalar.basic
Second
p3442
g2
Ntp3443
Rp3444
(dp3445
g207
g0
(ctheano.scalar.basic
transfer_type
p3446
g2
Ntp3447
Rp3448
(dp3449
S'transfer'
p3450
(I1
tp3451
sbsg172
g173
sg38
S'second'
p3452
sbsg38
S'Elemwise{second,no_inplace}'
p3453
sg172
g173
sg211
(dp3454
sg213
Nsg216
(dp3455
sg218
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p3456
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3457
(dp3458
g138
(lp3459
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3460
tp3461
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3462
tp3463
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3464
tp3465
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p3466
tp3467
asbsg59
g0
(g60
g2
Ntp3468
Rp3469
(dp3470
g64
(I00
I00
I00
tp3471
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3472
Rp3473
(dp3474
g12
g0
(g13
g2
Ntp3475
Rp3476
(dp3477
g17
(lp3478
g0
(g8
g2
Ntp3479
Rp3480
(dp3481
g12
g0
(g13
g2
Ntp3482
Rp3483
(dp3484
g17
(lp3485
g0
(g8
g2
Ntp3486
Rp3487
(dp3488
g12
g0
(g13
g2
Ntp3489
Rp3490
(dp3491
g17
(lp3492
g3176
asg55
(itheano.gof.utils
scratchpad
p3493
(dp3494
g138
g1524
sbsg154
(lp3495
g3487
asg156
g1537
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3496
(dp3497
bsg59
g1548
sg38
Nsbag0
(g8
g2
Ntp3498
Rp3499
(dp3500
g12
g0
(g13
g2
Ntp3501
Rp3502
(dp3503
g17
(lp3504
g1682
asg55
(itheano.gof.utils
scratchpad
p3505
(dp3506
g138
(lp3507
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3508
tp3509
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3510
tp3511
a(g148
I533
g149
S'inplace=False)(input))'
p3512
tp3513
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3514
tp3515
asbsg154
(lp3516
g3499
asg156
g0
(g157
g2
Ntp3517
Rp3518
(dp3519
g161
(lp3520
sg163
(lp3521
sg165
(lp3522
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp3523
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3524
(dp3525
bsg59
g0
(g60
g2
Ntp3526
Rp3527
(dp3528
g64
(I01
I01
I01
tp3529
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3530
(dp3531
g138
(lp3532
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p3533
tp3534
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p3535
tp3536
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3537
tp3538
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3539
tp3540
asbsg154
(lp3541
g3480
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3542
(dp3543
g138
(lp3544
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p3545
tp3546
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3547
tp3548
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3549
tp3550
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p3551
tp3552
asbsg59
g0
(g60
g2
Ntp3553
Rp3554
(dp3555
g64
(I00
I00
I00
tp3556
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3557
Rp3558
(dp3559
g12
g0
(g13
g2
Ntp3560
Rp3561
(dp3562
g17
(lp3563
g0
(g8
g2
Ntp3564
Rp3565
(dp3566
g12
g0
(g13
g2
Ntp3567
Rp3568
(dp3569
g17
(lp3570
g0
(g8
g2
Ntp3571
Rp3572
(dp3573
g12
g0
(g13
g2
Ntp3574
Rp3575
(dp3576
g17
(lp3577
g0
(g8
g2
Ntp3578
Rp3579
(dp3580
g12
g0
(g13
g2
Ntp3581
Rp3582
(dp3583
g17
(lp3584
g0
(g8
g2
Ntp3585
Rp3586
(dp3587
g12
g0
(g13
g2
Ntp3588
Rp3589
(dp3590
g17
(lp3591
g0
(g8
g2
Ntp3592
Rp3593
(dp3594
g12
g0
(g13
g2
Ntp3595
Rp3596
(dp3597
g17
(lp3598
g0
(g8
g2
Ntp3599
Rp3600
(dp3601
g12
g0
(g13
g2
Ntp3602
Rp3603
(dp3604
g17
(lp3605
g0
(g8
g2
Ntp3606
Rp3607
(dp3608
g12
g0
(g13
g2
Ntp3609
Rp3610
(dp3611
g17
(lp3612
g3487
asg55
(itheano.gof.utils
scratchpad
p3613
(dp3614
g138
g1553
sbsg154
(lp3615
g3607
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3616
(dp3617
g138
g1565
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3618
(dp3619
g138
g1576
sbsg154
(lp3620
g3600
asg156
g1587
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3621
(dp3622
bsg59
g1596
sg38
Nsbag0
(g8
g2
Ntp3623
Rp3624
(dp3625
g12
g0
(g13
g2
Ntp3626
Rp3627
(dp3628
g17
(lp3629
g3487
ag0
(g1605
g2
Ntp3630
Rp3631
(dp3632
g12
g0
(g13
g2
Ntp3633
Rp3634
(dp3635
g17
(lp3636
g3600
asg55
(itheano.gof.utils
scratchpad
p3637
(dp3638
g138
g1615
sbsg154
(lp3639
g3631
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3640
(dp3641
bsg59
g1638
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3642
(dp3643
g138
g1642
sbsg154
(lp3644
g3624
asg156
g1653
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3645
(dp3646
bsg59
g1664
sg38
Nsbag0
(g8
g2
Ntp3647
Rp3648
(dp3649
g12
g0
(g13
g2
Ntp3650
Rp3651
(dp3652
g17
(lp3653
g0
(g8
g2
Ntp3654
Rp3655
(dp3656
g12
g0
(g13
g2
Ntp3657
Rp3658
(dp3659
g17
(lp3660
g1682
ag0
(g8
g2
Ntp3661
Rp3662
(dp3663
g12
g0
(g13
g2
Ntp3664
Rp3665
(dp3666
g17
(lp3667
g3600
ag0
(g8
g2
Ntp3668
Rp3669
(dp3670
g12
g0
(g13
g2
Ntp3671
Rp3672
(dp3673
g17
(lp3674
g0
(g8
g2
Ntp3675
Rp3676
(dp3677
g12
g0
(g13
g2
Ntp3678
Rp3679
(dp3680
g17
(lp3681
g0
(g8
g2
Ntp3682
Rp3683
(dp3684
g12
g0
(g13
g2
Ntp3685
Rp3686
(dp3687
g17
(lp3688
g0
(g8
g2
Ntp3689
Rp3690
(dp3691
g12
g0
(g13
g2
Ntp3692
Rp3693
(dp3694
g17
(lp3695
g1731
asg55
(itheano.gof.utils
scratchpad
p3696
(dp3697
g138
g1748
sbsg154
(lp3698
g3690
asg156
g1761
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3699
(dp3700
bsg59
g1770
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3701
(dp3702
g138
g1775
sbsg154
(lp3703
g3683
asg156
g1789
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3704
(dp3705
g138
g1794
sbsg59
g1805
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3706
(dp3707
g138
g1810
sbsg154
(lp3708
g3676
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3709
(dp3710
g138
g1824
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3711
(dp3712
g138
g1835
sbsg154
(lp3713
g3669
asg156
g1846
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3714
(dp3715
bsg59
g1855
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3716
(dp3717
g138
g1859
sbsg154
(lp3718
g3662
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3719
(dp3720
g138
g1871
sbsg59
g1881
sg38
Nsbag0
(g8
g2
Ntp3721
Rp3722
(dp3723
g12
g0
(g13
g2
Ntp3724
Rp3725
(dp3726
g17
(lp3727
g0
(g8
g2
Ntp3728
Rp3729
(dp3730
g12
g0
(g13
g2
Ntp3731
Rp3732
(dp3733
g17
(lp3734
g3683
asg55
(itheano.gof.utils
scratchpad
p3735
(dp3736
g138
g1900
sbsg154
(lp3737
g3729
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3738
(dp3739
g138
g1912
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3740
(dp3741
g138
g1923
sbsg154
(lp3742
g3722
asg156
g1934
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3743
(dp3744
bsg59
g1943
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3745
(dp3746
g138
g1947
sbsg154
(lp3747
g3655
asg156
g1962
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3748
(dp3749
g138
g1966
sbsg59
g1977
sg38
Nsbag3683
ag0
(g1605
g2
Ntp3750
Rp3751
(dp3752
g12
g0
(g13
g2
Ntp3753
Rp3754
(dp3755
g17
(lp3756
g3669
asg55
(itheano.gof.utils
scratchpad
p3757
(dp3758
g138
g1989
sbsg154
(lp3759
g3751
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3760
(dp3761
bsg59
g2002
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3762
(dp3763
g138
g2006
sbsg154
(lp3764
g3648
asg156
g2022
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3765
(dp3766
g138
g2035
sbsg59
g1977
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3767
(dp3768
g138
(lp3769
(S'/usr/local/lib/python2.7/site-packages/theano/gradient.py'
p3770
I1063
S'access_grad_cache'
p3771
S'term = access_term_cache(node)[idx]'
p3772
tp3773
a(S'/usr/local/lib/python2.7/site-packages/theano/gradient.py'
p3774
I924
S'access_term_cache'
p3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3776
tp3777
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan_op.py'
p3778
I1400
g3128
S'outs = self(*inputs)'
p3779
tp3780
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3781
tp3782
asbsg154
(lp3783
g3593
asg156
g2059
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3784
(dp3785
g138
(lp3786
(g3778
I1400
g3128
S'outs = self(*inputs)'
p3787
tp3788
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3789
tp3790
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p3791
tp3792
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p3793
tp3794
asbsg59
g2279
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3795
(dp3796
g138
(lp3797
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3798
tp3799
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p3800
tp3801
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p3802
tp3803
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3804
tp3805
asbsg154
(lp3806
g3586
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3807
(dp3808
g138
(lp3809
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p3810
tp3811
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3812
tp3813
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p3814
tp3815
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p3816
tp3817
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3818
(dp3819
g138
(lp3820
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3821
tp3822
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p3823
tp3824
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p3825
tp3826
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3827
tp3828
asbsg154
(lp3829
g3579
asg156
g0
(g762
g2
Ntp3830
Rp3831
(dp3832
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p3833
tp3834
Rp3835
tp3836
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3837
(dp3838
bsg59
g0
(g60
g2
Ntp3839
Rp3840
(dp3841
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag469
asg55
(itheano.gof.utils
scratchpad
p3842
(dp3843
g138
(lp3844
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3845
tp3846
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p3847
tp3848
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p3849
I136
S'__sub__'
p3850
S'return theano.tensor.basic.sub(self, other)'
p3851
tp3852
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3853
tp3854
asbsg154
(lp3855
g3572
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3856
(dp3857
g138
(lp3858
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p3859
tp3860
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p3861
tp3862
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3863
tp3864
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p3865
tp3866
asbsg59
g0
(g60
g2
Ntp3867
Rp3868
(dp3869
g64
(tsg65
S'int64'
p3870
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3871
Rp3872
(dp3873
g12
g0
(g13
g2
Ntp3874
Rp3875
(dp3876
g17
(lp3877
g3624
asg55
(itheano.gof.utils
scratchpad
p3878
(dp3879
g138
(lp3880
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3881
tp3882
a(g3778
I1563
g3128
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p3883
tp3884
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p3885
tp3886
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3887
tp3888
asbsg154
(lp3889
g3872
asg156
g0
(g762
g2
Ntp3890
Rp3891
(dp3892
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p3893
tp3894
Rp3895
tp3896
Rp3897
tp3898
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3899
(dp3900
bsg59
g0
(g60
g2
Ntp3901
Rp3902
(dp3903
g64
(I00
I00
I00
tp3904
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3905
Rp3906
(dp3907
g12
g0
(g13
g2
Ntp3908
Rp3909
(dp3910
g17
(lp3911
g0
(g8
g2
Ntp3912
Rp3913
(dp3914
g12
g0
(g13
g2
Ntp3915
Rp3916
(dp3917
g17
(lp3918
g3593
asg55
(itheano.gof.utils
scratchpad
p3919
(dp3920
g138
(lp3921
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3922
tp3923
a(g3778
I1579
g3128
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p3924
tp3925
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p3926
tp3927
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3928
tp3929
asbsg154
(lp3930
g3913
asg156
g0
(g762
g2
Ntp3931
Rp3932
(dp3933
g766
(g1399
(Ng767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p3934
tp3935
Rp3936
Ntp3937
Rp3938
tp3939
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3940
(dp3941
bsg59
g0
(g60
g2
Ntp3942
Rp3943
(dp3944
g64
(I00
I00
tp3945
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p3946
(dp3947
g138
(lp3948
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3949
tp3950
a(g3778
I1579
g3128
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p3951
tp3952
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p3953
tp3954
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3955
tp3956
asbsg154
(lp3957
g3906
asg156
g0
(g762
g2
Ntp3958
Rp3959
(dp3960
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p3961
tp3962
Rp3963
tp3964
Rp3965
tp3966
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p3967
(dp3968
bsg59
g0
(g60
g2
Ntp3969
Rp3970
(dp3971
g64
(I00
I00
tp3972
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp3973
Rp3974
(dp3975
g12
g0
(g13
g2
Ntp3976
Rp3977
(dp3978
g17
(lp3979
g0
(g8
g2
Ntp3980
Rp3981
(dp3982
g12
g0
(g13
g2
Ntp3983
Rp3984
(dp3985
g17
(lp3986
g3593
asg55
(itheano.gof.utils
scratchpad
p3987
(dp3988
g138
(lp3989
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3990
tp3991
a(g3778
I1607
g3128
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p3992
tp3993
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p3994
tp3995
a(g144
I401
g145
S'self.add_tag_trace(node)'
p3996
tp3997
asbsg154
(lp3998
g3981
asg156
g0
(g762
g2
Ntp3999
Rp4000
(dp4001
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p4002
tp4003
Rp4004
tp4005
Rp4006
tp4007
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4008
(dp4009
bsg59
g0
(g60
g2
Ntp4010
Rp4011
(dp4012
g64
(I00
I00
tp4013
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4014
(dp4015
g138
(lp4016
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4017
tp4018
a(g3778
I1607
g3128
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p4019
tp4020
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p4021
tp4022
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4023
tp4024
asbsg154
(lp4025
g3974
asg156
g0
(g762
g2
Ntp4026
Rp4027
(dp4028
g766
(g1399
(Ng767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p4029
tp4030
Rp4031
Ntp4032
Rp4033
tp4034
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4035
(dp4036
bsg59
g0
(g60
g2
Ntp4037
Rp4038
(dp4039
g64
(I00
I00
tp4040
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4041
Rp4042
(dp4043
g12
g0
(g13
g2
Ntp4044
Rp4045
(dp4046
g17
(lp4047
g0
(g8
g2
Ntp4048
Rp4049
(dp4050
g12
g0
(g13
g2
Ntp4051
Rp4052
(dp4053
g17
(lp4054
g0
(g8
g2
Ntp4055
Rp4056
(dp4057
g12
g0
(g13
g2
Ntp4058
Rp4059
(dp4060
g17
(lp4061
g0
(g8
g2
Ntp4062
Rp4063
(dp4064
g12
g0
(g13
g2
Ntp4065
Rp4066
(dp4067
g17
(lp4068
g3600
ag3624
ag3648
asg55
(itheano.gof.utils
scratchpad
p4069
(dp4070
g138
g2047
sbsg154
(lp4071
g4063
asg156
g2059
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4072
(dp4073
g138
g2285
sbsg59
g2279
sg38
Nsbag0
(g8
g2
Ntp4074
Rp4075
(dp4076
g12
g0
(g13
g2
Ntp4077
Rp4078
(dp4079
g17
(lp4080
g1682
asg55
(itheano.gof.utils
scratchpad
p4081
(dp4082
g138
(lp4083
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4084
tp4085
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4086
tp4087
a(g148
I533
g149
S'inplace=False)(input))'
p4088
tp4089
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4090
tp4091
asbsg154
(lp4092
g4075
asg156
g0
(g157
g2
Ntp4093
Rp4094
(dp4095
g161
(lp4096
sg163
(lp4097
sg165
(lp4098
I0
aI1
asg167
(tsg168
I00
sg169
(g170
g170
tp4099
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4100
(dp4101
bsg59
g0
(g60
g2
Ntp4102
Rp4103
(dp4104
g64
(I01
I01
tp4105
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4106
(dp4107
g138
(lp4108
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p4109
tp4110
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p4111
tp4112
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4113
tp4114
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4115
tp4116
asbsg154
(lp4117
g4056
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4118
(dp4119
g138
(lp4120
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4121
tp4122
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4123
tp4124
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4125
tp4126
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4127
tp4128
asbsg59
g0
(g60
g2
Ntp4129
Rp4130
(dp4131
g64
(I00
I00
tp4132
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4133
Rp4134
(dp4135
g12
g0
(g13
g2
Ntp4136
Rp4137
(dp4138
g17
(lp4139
g0
(g8
g2
Ntp4140
Rp4141
(dp4142
g12
g0
(g13
g2
Ntp4143
Rp4144
(dp4145
g17
(lp4146
g0
(g8
g2
Ntp4147
Rp4148
(dp4149
g12
g0
(g13
g2
Ntp4150
Rp4151
(dp4152
g17
(lp4153
g4063
asg55
(itheano.gof.utils
scratchpad
p4154
(dp4155
g138
g2297
sbsg154
(lp4156
g4148
asg156
g2310
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4157
(dp4158
bsg59
g2321
sg38
Nsbag0
(g8
g2
Ntp4159
Rp4160
(dp4161
g12
g0
(g13
g2
Ntp4162
Rp4163
(dp4164
g17
(lp4165
g1682
asg55
(itheano.gof.utils
scratchpad
p4166
(dp4167
g138
(lp4168
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4169
tp4170
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4171
tp4172
a(g148
I533
g149
S'inplace=False)(input))'
p4173
tp4174
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4175
tp4176
asbsg154
(lp4177
g4160
asg156
g0
(g157
g2
Ntp4178
Rp4179
(dp4180
g161
(lp4181
sg163
(lp4182
sg165
(lp4183
I0
aI1
asg167
(tsg168
I00
sg169
(g170
g170
tp4184
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4185
(dp4186
bsg59
g0
(g60
g2
Ntp4187
Rp4188
(dp4189
g64
(I01
I01
tp4190
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4191
(dp4192
g138
(lp4193
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p4194
tp4195
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p4196
tp4197
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4198
tp4199
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4200
tp4201
asbsg154
(lp4202
g4141
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4203
(dp4204
g138
(lp4205
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p4206
tp4207
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4208
tp4209
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4210
tp4211
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4212
tp4213
asbsg59
g0
(g60
g2
Ntp4214
Rp4215
(dp4216
g64
(I00
I00
tp4217
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4218
Rp4219
(dp4220
g12
g0
(g13
g2
Ntp4221
Rp4222
(dp4223
g17
(lp4224
g0
(g8
g2
Ntp4225
Rp4226
(dp4227
g12
g0
(g13
g2
Ntp4228
Rp4229
(dp4230
g17
(lp4231
g0
(g8
g2
Ntp4232
Rp4233
(dp4234
g12
g0
(g13
g2
Ntp4235
Rp4236
(dp4237
g17
(lp4238
g0
(g8
g2
Ntp4239
Rp4240
(dp4241
g12
g0
(g13
g2
Ntp4242
Rp4243
(dp4244
g17
(lp4245
g0
(g8
g2
Ntp4246
Rp4247
(dp4248
g12
g0
(g13
g2
Ntp4249
Rp4250
(dp4251
g17
(lp4252
g0
(g8
g2
Ntp4253
Rp4254
(dp4255
g12
g0
(g13
g2
Ntp4256
Rp4257
(dp4258
g17
(lp4259
g0
(g8
g2
Ntp4260
Rp4261
(dp4262
g12
g0
(g13
g2
Ntp4263
Rp4264
(dp4265
g17
(lp4266
g0
(g8
g2
Ntp4267
Rp4268
(dp4269
g12
g0
(g13
g2
Ntp4270
Rp4271
(dp4272
g17
(lp4273
g0
(g8
g2
Ntp4274
Rp4275
(dp4276
g12
g0
(g13
g2
Ntp4277
Rp4278
(dp4279
g17
(lp4280
g0
(g8
g2
Ntp4281
Rp4282
(dp4283
g12
g0
(g13
g2
Ntp4284
Rp4285
(dp4286
g17
(lp4287
g0
(g8
g2
Ntp4288
Rp4289
(dp4290
g12
g0
(g13
g2
Ntp4291
Rp4292
(dp4293
g17
(lp4294
g0
(g8
g2
Ntp4295
Rp4296
(dp4297
g12
g0
(g13
g2
Ntp4298
Rp4299
(dp4300
g17
(lp4301
g572
ag0
(g8
g2
Ntp4302
Rp4303
(dp4304
g12
g0
(g13
g2
Ntp4305
Rp4306
(dp4307
g17
(lp4308
g0
(g8
g2
Ntp4309
Rp4310
(dp4311
g12
g0
(g13
g2
Ntp4312
Rp4313
(dp4314
g17
(lp4315
g0
(g8
g2
Ntp4316
Rp4317
(dp4318
g12
g0
(g13
g2
Ntp4319
Rp4320
(dp4321
g17
(lp4322
g0
(g8
g2
Ntp4323
Rp4324
(dp4325
g12
g0
(g13
g2
Ntp4326
Rp4327
(dp4328
g17
(lp4329
g4148
asg55
(itheano.gof.utils
scratchpad
p4330
(dp4331
g138
g2326
sbsg154
(lp4332
g4324
asg156
g2337
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4333
(dp4334
bsg59
g2346
sg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p4335
(dp4336
g138
g2351
sbsg154
(lp4337
g4317
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4338
(dp4339
bsg59
g2364
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4340
(dp4341
g138
g2369
sbsg154
(lp4342
g4310
asg156
g2380
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4343
(dp4344
g138
g2393
sbsg59
g2403
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4345
(dp4346
g138
g2448
sbsg154
(lp4347
g4303
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4348
(dp4349
g138
g2475
sbsg59
g2485
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4350
(dp4351
g138
g2490
sbsg154
(lp4352
g4296
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4353
(dp4354
g138
g2502
sbsg59
g2512
sg38
Nsbag0
(g8
g2
Ntp4355
Rp4356
(dp4357
g12
g0
(g13
g2
Ntp4358
Rp4359
(dp4360
g17
(lp4361
g0
(g8
g2
Ntp4362
Rp4363
(dp4364
g12
g0
(g13
g2
Ntp4365
Rp4366
(dp4367
g17
(lp4368
g2530
ag572
asg55
(itheano.gof.utils
scratchpad
p4369
(dp4370
g138
g2550
sbsg154
(lp4371
g4363
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4372
(dp4373
g138
g2578
sbsg59
g2588
sg38
Nsbag0
(g8
g2
Ntp4374
Rp4375
(dp4376
g12
g0
(g13
g2
Ntp4377
Rp4378
(dp4379
g17
(lp4380
g0
(g8
g2
Ntp4381
Rp4382
(dp4383
g12
g0
(g13
g2
Ntp4384
Rp4385
(dp4386
g17
(lp4387
g2530
ag4310
asg55
(itheano.gof.utils
scratchpad
p4388
(dp4389
g138
g2607
sbsg154
(lp4390
g4382
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4391
(dp4392
g138
g2619
sbsg59
g2629
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4393
(dp4394
g138
g2634
sbsg154
(lp4395
g4375
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4396
(dp4397
g138
g2646
sbsg59
g2656
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4398
(dp4399
g138
g2661
sbsg154
(lp4400
g4356
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4401
(dp4402
g138
g2673
sbsg59
g2683
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4403
(dp4404
g138
g2688
sbsg154
(lp4405
g4289
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4406
(dp4407
g138
g2700
sbsg59
g2710
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4408
(dp4409
g138
g2715
sbsg154
(lp4410
g4282
asg156
g2728
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4411
(dp4412
g138
g2744
sbsg59
g2754
sg38
Nsbag0
(g33
g2
Ntp4413
Rp4414
(dp4415
g37
Nsg38
Nsg39
I01
sg40
g41
(g42
(I0
tp4416
g44
tp4417
Rp4418
(I1
(tg100
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p4419
tp4420
bsg55
(itheano.gof.utils
scratchpad
p4421
(dp4422
g58
Nsbsg59
g0
(g60
g2
Ntp4423
Rp4424
(dp4425
g64
(tsg65
S'float64'
p4426
sg67
g100
sg68
I00
sg38
Nsbsbasg55
(itheano.gof.utils
scratchpad
p4427
(dp4428
g138
(lp4429
(S'/usr/local/lib/python2.7/site-packages/theano/gradient.py'
p4430
I450
g3128
S'g_cost = _float_ones_like(cost)'
p4431
tp4432
a(S'/usr/local/lib/python2.7/site-packages/theano/gradient.py'
p4433
I1124
S'_float_ones_like'
p4434
S'rval = tensor.ones_like(x)'
p4435
tp4436
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p4437
I2070
S'ones_like'
p4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p4439
tp4440
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4441
tp4442
asbsg154
(lp4443
g4275
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4444
(dp4445
g138
(lp4446
(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p4447
tp4448
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4449
tp4450
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4451
tp4452
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4453
tp4454
asbsg59
g0
(g60
g2
Ntp4455
Rp4456
(dp4457
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4458
(dp4459
g138
(lp4460
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4462
tp4463
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p4464
I763
S'_bgrad'
p4465
S'ret.append(transform(scalar_igrad))'
p4466
tp4467
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p4468
I755
S'transform'
p4469
S'*[transform(ipt) for ipt in node.inputs])'
p4470
tp4471
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4472
tp4473
asbsg154
(lp4474
g4268
asg156
g0
(g196
g2
Ntp4475
Rp4476
(dp4477
g38
Nsg202
g2732
sg211
(dp4478
sg213
Nsg216
(dp4479
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4480
(dp4481
g138
(lp4482
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4483
tp4484
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4485
tp4486
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4487
tp4488
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4489
tp4490
asbsg59
g0
(g60
g2
Ntp4491
Rp4492
(dp4493
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag572
asg55
(itheano.gof.utils
scratchpad
p4494
(dp4495
g138
(lp4496
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4497
tp4498
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4499
tp4500
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4501
tp4502
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4503
tp4504
asbsg154
(lp4505
g4261
asg156
g0
(g196
g2
Ntp4506
Rp4507
(dp4508
g38
Nsg202
g501
sg211
(dp4509
sg213
Nsg216
(dp4510
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4511
(dp4512
g138
(lp4513
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4514
tp4515
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4516
tp4517
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4518
tp4519
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4520
tp4521
asbsg59
g0
(g60
g2
Ntp4522
Rp4523
(dp4524
g64
(tsg65
S'float64'
p4525
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag4310
asg55
(itheano.gof.utils
scratchpad
p4526
(dp4527
g138
(lp4528
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4529
tp4530
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4531
tp4532
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4533
tp4534
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4535
tp4536
asbsg154
(lp4537
g4254
asg156
g0
(g196
g2
Ntp4538
Rp4539
(dp4540
g38
Nsg202
g0
(ctheano.scalar.basic
TrueDiv
p4541
g2
Ntp4542
Rp4543
(dp4544
g207
g208
sg172
g173
sg38
S'true_div'
p4545
sbsg211
(dp4546
sg213
Nsg216
(dp4547
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4548
(dp4549
g138
(lp4550
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4551
tp4552
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4553
tp4554
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4555
tp4556
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4557
tp4558
asbsg59
g0
(g60
g2
Ntp4559
Rp4560
(dp4561
g64
(tsg65
S'float64'
p4562
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4563
Rp4564
(dp4565
g12
g0
(g13
g2
Ntp4566
Rp4567
(dp4568
g17
(lp4569
g0
(g8
g2
Ntp4570
Rp4571
(dp4572
g12
g0
(g13
g2
Ntp4573
Rp4574
(dp4575
g17
(lp4576
g0
(g8
g2
Ntp4577
Rp4578
(dp4579
g12
g0
(g13
g2
Ntp4580
Rp4581
(dp4582
g17
(lp4583
g4268
ag4363
asg55
(itheano.gof.utils
scratchpad
p4584
(dp4585
g138
(lp4586
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4587
tp4588
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4589
tp4590
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4591
tp4592
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4593
tp4594
asbsg154
(lp4595
g4578
asg156
g0
(g196
g2
Ntp4596
Rp4597
(dp4598
g38
Nsg202
g501
sg211
(dp4599
sg213
Nsg216
(dp4600
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4601
(dp4602
g138
(lp4603
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4604
tp4605
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4606
tp4607
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4608
tp4609
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4610
tp4611
asbsg59
g0
(g60
g2
Ntp4612
Rp4613
(dp4614
g64
(tsg65
S'float64'
p4615
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag4382
asg55
(itheano.gof.utils
scratchpad
p4616
(dp4617
g138
(lp4618
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4619
tp4620
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4621
tp4622
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4623
tp4624
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4625
tp4626
asbsg154
(lp4627
g4571
asg156
g0
(g196
g2
Ntp4628
Rp4629
(dp4630
g38
Nsg202
g4543
sg211
(dp4631
sg213
Nsg216
(dp4632
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4633
(dp4634
g138
(lp4635
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4636
tp4637
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4638
tp4639
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4640
tp4641
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4642
tp4643
asbsg59
g0
(g60
g2
Ntp4644
Rp4645
(dp4646
g64
(tsg65
S'float64'
p4647
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4648
(dp4649
g138
(lp4650
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4651
tp4652
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4653
tp4654
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4655
tp4656
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4657
tp4658
asbsg154
(lp4659
g4564
asg156
g0
(g196
g2
Ntp4660
Rp4661
(dp4662
g38
Nsg202
g2732
sg211
(dp4663
sg213
Nsg216
(dp4664
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4665
(dp4666
g138
(lp4667
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4668
tp4669
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4670
tp4671
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4672
tp4673
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4674
tp4675
asbsg59
g0
(g60
g2
Ntp4676
Rp4677
(dp4678
g64
(tsg65
g4647
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4679
(dp4680
g138
(lp4681
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p4682
tp4683
a(S'/usr/local/lib/python2.7/site-packages/theano/gradient.py'
p4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p4685
tp4686
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p4687
tp4688
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4689
tp4690
asbsg154
(lp4691
g4247
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4692
(dp4693
g138
(lp4694
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p4695
tp4696
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4697
tp4698
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4699
tp4700
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4701
tp4702
asbsg59
g0
(g60
g2
Ntp4703
Rp4704
(dp4705
g64
(tsg65
S'float64'
p4706
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4707
Rp4708
(dp4709
g12
g0
(g13
g2
Ntp4710
Rp4711
(dp4712
g17
(lp4713
g4317
asg55
(itheano.gof.utils
scratchpad
p4714
(dp4715
g138
(lp4716
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4717
tp4718
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4719
tp4720
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4721
tp4722
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4723
tp4724
asbsg154
(lp4725
g4708
asg156
g0
(g196
g2
Ntp4726
Rp4727
(dp4728
g38
Nsg202
g2385
sg211
(dp4729
sg213
Nsg216
(dp4730
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4731
(dp4732
g138
(lp4733
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4734
tp4735
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4736
tp4737
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4738
tp4739
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4740
tp4741
asbsg59
g0
(g60
g2
Ntp4742
Rp4743
(dp4744
g64
(tsg65
S'float64'
p4745
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4746
(dp4747
g138
(lp4748
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4749
tp4750
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4751
tp4752
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4753
tp4754
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4755
tp4756
asbsg154
(lp4757
g4240
asg156
g0
(g196
g2
Ntp4758
Rp4759
(dp4760
g38
Nsg202
g501
sg211
(dp4761
sg213
Nsg216
(dp4762
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4763
(dp4764
g138
(lp4765
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4766
tp4767
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4768
tp4769
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4770
tp4771
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4772
tp4773
asbsg59
g0
(g60
g2
Ntp4774
Rp4775
(dp4776
g64
(tsg65
S'float64'
p4777
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4778
Rp4779
(dp4780
g12
g0
(g13
g2
Ntp4781
Rp4782
(dp4783
g17
(lp4784
g0
(g8
g2
Ntp4785
Rp4786
(dp4787
g12
g0
(g13
g2
Ntp4788
Rp4789
(dp4790
g17
(lp4791
g2530
asg55
(itheano.gof.utils
scratchpad
p4792
(dp4793
g138
(lp4794
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4795
tp4796
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4797
tp4798
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p4799
tp4800
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4801
tp4802
asbsg154
(lp4803
g4786
asg156
g0
(g157
g2
Ntp4804
Rp4805
(dp4806
g161
(lp4807
sg163
(lp4808
sg165
(lp4809
sg167
(tsg168
I00
sg169
(tsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4810
(dp4811
bsg59
g0
(g60
g2
Ntp4812
Rp4813
(dp4814
g64
(tsg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp4815
Rp4816
(dp4817
g12
g0
(g13
g2
Ntp4818
Rp4819
(dp4820
g17
(lp4821
g4317
asg55
(itheano.gof.utils
scratchpad
p4822
(dp4823
g138
(lp4824
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4825
tp4826
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4827
tp4828
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4829
tp4830
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4831
tp4832
asbsg154
(lp4833
g4816
asg156
g0
(g196
g2
Ntp4834
Rp4835
(dp4836
g38
Nsg202
g2385
sg211
(dp4837
sg213
Nsg216
(dp4838
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4839
(dp4840
g138
(lp4841
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4842
tp4843
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4844
tp4845
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4846
tp4847
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4848
tp4849
asbsg59
g0
(g60
g2
Ntp4850
Rp4851
(dp4852
g64
(tsg65
S'float64'
p4853
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4854
(dp4855
g138
(lp4856
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4857
tp4858
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4859
tp4860
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4861
tp4862
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4863
tp4864
asbsg154
(lp4865
g4779
asg156
g0
(g196
g2
Ntp4866
Rp4867
(dp4868
g38
Nsg202
g2567
sg211
(dp4869
sg213
Nsg216
(dp4870
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4871
(dp4872
g138
(lp4873
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4874
tp4875
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4876
tp4877
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4878
tp4879
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4880
tp4881
asbsg59
g0
(g60
g2
Ntp4882
Rp4883
(dp4884
g64
(tsg65
S'float64'
p4885
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4886
(dp4887
g138
(lp4888
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p4889
tp4890
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p4891
tp4892
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4893
tp4894
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4895
tp4896
asbsg154
(lp4897
g4233
asg156
g0
(g196
g2
Ntp4898
Rp4899
(dp4900
g38
Nsg202
g501
sg211
(dp4901
sg213
Nsg216
(dp4902
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4903
(dp4904
g138
(lp4905
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p4906
tp4907
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4908
tp4909
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4910
tp4911
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4912
tp4913
asbsg59
g0
(g60
g2
Ntp4914
Rp4915
(dp4916
g64
(tsg65
S'float64'
p4917
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4918
(dp4919
g138
(lp4920
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p4921
tp4922
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4923
tp4924
a(g148
I533
g149
S'inplace=False)(input))'
p4925
tp4926
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4927
tp4928
asbsg154
(lp4929
g4226
asg156
g0
(g157
g2
Ntp4930
Rp4931
(dp4932
g161
(lp4933
sg163
(lp4934
sg165
(lp4935
I0
asg167
(tsg168
I00
sg169
(g170
tp4936
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4937
(dp4938
bsg59
g0
(g60
g2
Ntp4939
Rp4940
(dp4941
g64
(I01
tp4942
sg65
g4917
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p4943
(dp4944
g138
(lp4945
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4946
tp4947
a(g3127
I4562
g3128
S'xgrad = gz * y'
p4948
tp4949
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p4950
tp4951
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4952
tp4953
asbsg154
(lp4954
g4219
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4955
(dp4956
g138
(lp4957
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p4958
tp4959
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4960
tp4961
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4962
tp4963
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4964
tp4965
asbsg59
g0
(g60
g2
Ntp4966
Rp4967
(dp4968
g64
(I00
tp4969
sg65
S'float64'
p4970
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4971
(dp4972
g138
(lp4973
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p4974
tp4975
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4976
tp4977
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p4978
tp4979
a(g144
I401
g145
S'self.add_tag_trace(node)'
p4980
tp4981
asbsg154
(lp4982
g4134
asg156
g0
(g2020
g2
Ntp4983
Rp4984
(dp4985
g766
(lp4986
g2341
asg2030
(lp4987
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p4988
(dp4989
g138
(lp4990
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p4991
tp4992
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p4993
tp4994
a(g2040
I1109
g149
S'[x.type()])'
p4995
tp4996
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p4997
tp4998
asbsg59
g4215
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p4999
(dp5000
g138
(lp5001
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5002
tp5003
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5004
tp5005
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5006
tp5007
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5008
tp5009
asbsg154
(lp5010
g4049
asg156
g0
(g2020
g2
Ntp5011
Rp5012
(dp5013
g766
(lp5014
g1399
(g2314
NNtp5015
Rp5016
asg2030
(lp5017
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5018
(dp5019
g138
(lp5020
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5021
tp5022
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5023
tp5024
a(g2040
I1109
g149
S'[x.type()])'
p5025
tp5026
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5027
tp5028
asbsg59
g4130
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5029
(dp5030
g138
(lp5031
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5032
tp5033
a(g3778
I1707
g3128
S'outer_inp_mitmot.append(dC_douts[idx + offset][::-1])'
p5034
tp5035
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p5036
tp5037
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5038
tp5039
asbsg154
(lp5040
g4042
asg156
g0
(g762
g2
Ntp5041
Rp5042
(dp5043
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p5044
tp5045
Rp5046
tp5047
Rp5048
tp5049
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5050
(dp5051
bsg59
g0
(g60
g2
Ntp5052
Rp5053
(dp5054
g64
(I00
I00
tp5055
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag3600
asg55
(itheano.gof.utils
scratchpad
p5056
(dp5057
g138
(lp5058
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5059
tp5060
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5061
tp5062
a(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p5063
tp5064
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5065
tp5066
asbsg154
(lp5067
g0
(g8
g2
Ntp5068
Rp5069
(dp5070
g12
g3568
sg37
I0
sg55
(itheano.gof.utils
scratchpad
p5071
(dp5072
g138
(lp5073
(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p5074
tp5075
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5076
tp5077
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p5078
tp5079
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5080
tp5081
asbsg59
g0
(g60
g2
Ntp5082
Rp5083
(dp5084
g64
(I00
I00
tp5085
sg65
S'float64'
p5086
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag3565
asg156
g0
(g2057
g2
Ntp5087
Rp5088
(dp5089
g529
I00
sg17
(lp5090
g0
(g8
g2
Ntp5091
Rp5092
(dp5093
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p5094
(dp5095
g138
(lp5096
(g3778
I1420
g3128
S'self.outputs)'
p5097
tp5098
a(S'/usr/local/lib/python2.7/site-packages/theano/scan_module/scan_utils.py'
p5099
I793
S'reconstruct_graph'
p5100
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p5101
tp5102
a(g2090
I75
g2091
S'nw_x = x.type()'
p5103
tp5104
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5105
tp5106
asbsg59
g2077
sg38
Nsbag0
(g8
g2
Ntp5107
Rp5108
(dp5109
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p5110
(dp5111
g138
(lp5112
(g3778
I1420
g3128
S'self.outputs)'
p5113
tp5114
a(g5099
I793
g5100
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p5115
tp5116
a(g2090
I75
g2091
S'nw_x = x.type()'
p5117
tp5118
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5119
tp5120
asbsg59
g2097
sg38
Nsbag0
(g8
g2
Ntp5121
Rp5122
(dp5123
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p5124
(dp5125
g138
(lp5126
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5127
tp5128
a(g3778
I1497
g3128
S'Xt_placeholder = safe_new(Xt)'
p5129
tp5130
a(g2090
I75
g2091
S'nw_x = x.type()'
p5131
tp5132
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5133
tp5134
asbsg59
g2171
sg38
Nsbag0
(g8
g2
Ntp5135
Rp5136
(dp5137
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p5138
(dp5139
g138
(lp5140
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5141
tp5142
a(g3778
I1521
g3128
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p5143
tp5144
a(g2090
I75
g2091
S'nw_x = x.type()'
p5145
tp5146
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5147
tp5148
asbsg59
g2171
sg38
Nsbag0
(g8
g2
Ntp5149
Rp5150
(dp5151
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p5152
(dp5153
g138
(lp5154
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5155
tp5156
a(g3778
I1553
g3128
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p5157
tp5158
a(g2090
I75
g2091
S'nw_x = x.type()'
p5159
tp5160
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5161
tp5162
asbsg59
g2171
sg38
Nsbasg2101
(lp5163
(lp5164
I0
aI1
aasg2105
I-8076213172467989068
sg154
(lp5165
g0
(g8
g2
Ntp5166
Rp5167
(dp5168
g12
g0
(g13
g2
Ntp5169
Rp5170
(dp5171
g17
(lp5172
g0
(g8
g2
Ntp5173
Rp5174
(dp5175
g12
g0
(g13
g2
Ntp5176
Rp5177
(dp5178
g17
(lp5179
g5136
ag0
(g8
g2
Ntp5180
Rp5181
(dp5182
g12
g0
(g13
g2
Ntp5183
Rp5184
(dp5185
g17
(lp5186
g0
(g8
g2
Ntp5187
Rp5188
(dp5189
g12
g0
(g13
g2
Ntp5190
Rp5191
(dp5192
g17
(lp5193
g5092
asg55
(itheano.gof.utils
scratchpad
p5194
(dp5195
g138
g2123
sbsg154
(lp5196
g5188
asg156
g2137
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5197
(dp5198
g138
g2141
sbsg59
g2077
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5199
(dp5200
g138
(lp5201
(g3127
I4567
g3128
S'xgrad = dot(gz, y.T)'
p5202
tp5203
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p5204
tp5205
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p5206
tp5207
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5208
tp5209
asbsg154
(lp5210
g5181
asg156
g0
(g157
g2
Ntp5211
Rp5212
(dp5213
g161
(lp5214
sg163
(lp5215
I1
aI0
asg165
(lp5216
sg167
g2079
sg168
I00
sg169
(I1
I0
tp5217
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5218
(dp5219
bsg59
g0
(g60
g2
Ntp5220
Rp5221
(dp5222
g64
(I00
I00
tp5223
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5224
(dp5225
g138
(lp5226
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5227
tp5228
a(g3127
I4567
g3128
S'xgrad = dot(gz, y.T)'
p5229
tp5230
a(g2162
I4732
g2155
S'return _dot(a, b)'
p5231
tp5232
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5233
tp5234
asbsg154
(lp5235
g5174
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5236
(dp5237
bsg59
g0
(g60
g2
Ntp5238
Rp5239
(dp5240
g64
(I00
tp5241
sg65
S'float64'
p5242
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag5150
asg55
(itheano.gof.utils
scratchpad
p5243
(dp5244
g138
(lp5245
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5246
tp5247
a(g3778
I1560
g3128
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p5248
tp5249
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p5250
tp5251
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5252
tp5253
asbsg154
(lp5254
g5167
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5255
(dp5256
g138
(lp5257
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p5258
tp5259
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5260
tp5261
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5262
tp5263
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5264
tp5265
asbsg59
g0
(g60
g2
Ntp5266
Rp5267
(dp5268
g64
(I00
tp5269
sg65
g5086
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5270
Rp5271
(dp5272
g12
g0
(g13
g2
Ntp5273
Rp5274
(dp5275
g17
(lp5276
g0
(g8
g2
Ntp5277
Rp5278
(dp5279
g12
g0
(g13
g2
Ntp5280
Rp5281
(dp5282
g17
(lp5283
g0
(g8
g2
Ntp5284
Rp5285
(dp5286
g12
g0
(g13
g2
Ntp5287
Rp5288
(dp5289
g17
(lp5290
g0
(g8
g2
Ntp5291
Rp5292
(dp5293
g12
g0
(g13
g2
Ntp5294
Rp5295
(dp5296
g17
(lp5297
g5108
asg55
(itheano.gof.utils
scratchpad
p5298
(dp5299
g138
(lp5300
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p5301
tp5302
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p5303
tp5304
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p5305
tp5306
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5307
tp5308
asbsg154
(lp5309
g5292
asg156
g0
(g157
g2
Ntp5310
Rp5311
(dp5312
g161
(lp5313
sg163
(lp5314
I0
asg165
(lp5315
sg167
g2099
sg168
I00
sg169
(I0
tp5316
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5317
(dp5318
bsg59
g0
(g60
g2
Ntp5319
Rp5320
(dp5321
g64
(I00
tp5322
sg65
g2100
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5323
(dp5324
g138
(lp5325
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p5326
tp5327
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p5328
I4937
S'outer'
p5329
S"x.dimshuffle(0, 'x'),"
p5330
tp5331
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p5332
I324
S'dimshuffle'
p5333
S'return op(self)'
p5334
tp5335
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5336
tp5337
asbsg154
(lp5338
g5285
asg156
g0
(g157
g2
Ntp5339
Rp5340
(dp5341
g161
(lp5342
sg163
(lp5343
I0
asg165
(lp5344
I1
asg167
(I00
tp5345
sg168
I00
sg169
(I0
g170
tp5346
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5347
(dp5348
bsg59
g0
(g60
g2
Ntp5349
Rp5350
(dp5351
g64
(I00
I01
tp5352
sg65
g2100
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5353
Rp5354
(dp5355
g12
g0
(g13
g2
Ntp5356
Rp5357
(dp5358
g17
(lp5359
g5136
asg55
(itheano.gof.utils
scratchpad
p5360
(dp5361
g138
(lp5362
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p5363
tp5364
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p5365
tp5366
a(g5332
I324
g5333
S'return op(self)'
p5367
tp5368
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5369
tp5370
asbsg154
(lp5371
g5354
asg156
g0
(g157
g2
Ntp5372
Rp5373
(dp5374
g161
(lp5375
sg163
(lp5376
I0
asg165
(lp5377
I0
asg167
(I00
tp5378
sg168
I00
sg169
(g170
I0
tp5379
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5380
(dp5381
bsg59
g0
(g60
g2
Ntp5382
Rp5383
(dp5384
g64
(I01
I00
tp5385
sg65
g2174
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5386
(dp5387
g138
(lp5388
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p5389
tp5390
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p5391
tp5392
a(g2162
I4732
g2155
S'return _dot(a, b)'
p5393
tp5394
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5395
tp5396
asbsg154
(lp5397
g5278
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5398
(dp5399
bsg59
g0
(g60
g2
Ntp5400
Rp5401
(dp5402
g64
(I00
I00
tp5403
sg65
S'float64'
p5404
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5405
Rp5406
(dp5407
g12
g0
(g13
g2
Ntp5408
Rp5409
(dp5410
g17
(lp5411
g5092
asg55
(itheano.gof.utils
scratchpad
p5412
(dp5413
g138
(lp5414
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5415
tp5416
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5417
tp5418
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/nnet/nnet.py'
p5419
I370
g3128
S'sm = softmax(x)'
p5420
tp5421
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5422
tp5423
asbsg154
(lp5424
g5406
asg156
g2137
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5425
(dp5426
g138
(lp5427
(g5419
I370
g3128
S'sm = softmax(x)'
p5428
tp5429
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5430
tp5431
a(g2146
I359
g149
S'return Apply(self, [x], [x.type()])'
p5432
tp5433
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5434
tp5435
asbsg59
g2077
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5436
(dp5437
g138
(lp5438
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5439
tp5440
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5441
tp5442
a(g5419
I371
g3128
S'return [softmax_grad(g_sm, sm)]'
p5443
tp5444
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5445
tp5446
asbsg154
(lp5447
g5271
asg156
g0
(ctheano.tensor.nnet.nnet
SoftmaxGrad
p5448
g2
Ntp5449
Rp5450
(dp5451
g172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5452
(dp5453
bsg59
g2077
sg38
Nsbasg2175
I4
sg2176
(lp5454
I00
aI00
aI00
asg2245
I00
sg211
g2178
((lp5455
tp5456
Rp5457
sg2182
I1
sg2183
I1
sg2184
(lp5458
g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p5459
tp5460
Rp5461
aI0
asg2104
I1
sg2190
I5
sg2191
I00
sg2192
I-1
sg2193
I3
sg38
S'grad_of_scan_fn'
p5462
sg2195
g2198
sg2223
g2178
((lp5463
(lp5464
g2193
aI3
aa(lp5465
g2234
aI0
aa(lp5466
g2101
ag5163
aa(lp5467
g2245
aI00
aa(lp5468
g2104
aI1
aa(lp5469
g2229
aI1
aa(lp5470
g2231
a(lp5471
(lp5472
I1
aaaa(lp5473
g2192
aI-1
aa(lp5474
g2189
aI0
aa(lp5475
g2237
aI0
aa(lp5476
g2182
aI1
aa(lp5477
g2191
aI00
aa(lp5478
g529
aI00
aa(lp5479
g211
ag5457
aa(lp5480
g38
ag5462
aa(lp5481
g2242
aNaatp5482
Rp5483
sg2250
((t(g2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p5484
S'md5:f52f5718bd2358862745753c2c77eac4'
p5485
(g2137
((g2077
((I-1
I0
tp5486
I00
tp5487
tp5488
tp5489
(I1
(I00
tp5490
tp5491
tp5492
(g2137
((g2077
(g5486
I00
tp5493
tp5494
tp5495
(I1
(I00
tp5496
tp5497
tp5498
(g5373
((g2171
((I-1
I3
tp5499
I00
tp5500
tp5501
tp5502
(I1
(I00
tp5503
tp5504
tp5505
(g5311
((g2097
((I-1
I1
tp5506
I00
tp5507
tp5508
tp5509
(I1
(I00
tp5510
tp5511
tp5512
(g5212
((g2077
((I1
I0
tp5513
I00
tp5514
tp5515
tp5516
(I1
(I00
tp5517
tp5518
tp5519
(g5340
((g5320
((I3
I0
tp5520
I00
tp5521
tp5522
tp5523
(I1
(I00
tp5524
tp5525
tp5526
(g1331
((g2171
(g5499
I00
tp5527
tp5528
(g5221
((I4
I0
tp5529
I00
tp5530
tp5531
tp5532
(I1
(I00
tp5533
tp5534
tp5535
(g1331
((g5350
((I5
I0
tp5536
I00
tp5537
tp5538
(g5383
((I2
I0
tp5539
I00
tp5540
tp5541
tp5542
(I1
(I00
tp5543
tp5544
tp5545
(g294
((g5239
((I6
I0
tp5546
I00
tp5547
tp5548
(g2171
((I-1
I4
tp5549
I00
tp5550
tp5551
tp5552
(I1
(I00
tp5553
tp5554
tp5555
(g5450
((g5401
((I7
I0
tp5556
I00
tp5557
tp5558
(g2077
((I0
I0
tp5559
I00
tp5560
tp5561
tp5562
(I1
(I00
tp5563
tp5564
tp5565
tp5566
tp5567
sg2234
I0
sg2273
(lp5568
I00
aI00
asg2275
I1
sg2237
I0
sg2242
Nsg2276
(lp5569
g5083
ag0
(g60
g2
Ntp5570
Rp5571
(dp5572
g64
(I00
I00
I00
tp5573
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbasg2189
I0
sg2229
I1
sg2282
I5
sg2231
g5471
sbsbsg37
I1
sg55
(itheano.gof.utils
scratchpad
p5574
(dp5575
g138
(lp5576
(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p5577
tp5578
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5579
tp5580
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p5581
tp5582
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5583
tp5584
asbsg59
g5571
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5585
(dp5586
g138
(lp5587
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5588
tp5589
a(g3778
I1832
g3128
S'gradients.append(x[::-1])'
p5590
tp5591
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p5592
tp5593
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5594
tp5595
asbsg154
(lp5596
g3558
asg156
g0
(g762
g2
Ntp5597
Rp5598
(dp5599
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p5600
tp5601
Rp5602
tp5603
Rp5604
tp5605
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5606
(dp5607
bsg59
g0
(g60
g2
Ntp5608
Rp5609
(dp5610
g64
(I00
I00
I00
tp5611
sg65
g1339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag3631
asg55
(itheano.gof.utils
scratchpad
p5612
(dp5613
g138
(lp5614
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5615
tp5616
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5617
tp5618
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5619
tp5620
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5621
tp5622
asbsg154
(lp5623
g3473
asg156
g0
(g2020
g2
Ntp5624
Rp5625
(dp5626
g766
(lp5627
g1399
(Ng1656
Ntp5628
Rp5629
asg2030
(lp5630
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5631
(dp5632
g138
(lp5633
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5634
tp5635
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5636
tp5637
a(g2040
I1109
g149
S'[x.type()])'
p5638
tp5639
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5640
tp5641
asbsg59
g3554
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5642
(dp5643
g138
(lp5644
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5645
tp5646
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5647
tp5648
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5649
tp5650
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5651
tp5652
asbsg154
(lp5653
g3162
asg156
g0
(g2020
g2
Ntp5654
Rp5655
(dp5656
g766
(lp5657
g1399
(g1541
NNtp5658
Rp5659
asg2030
(lp5660
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5661
(dp5662
g138
(lp5663
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p5664
tp5665
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5666
tp5667
a(g2040
I1109
g149
S'[x.type()])'
p5668
tp5669
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5670
tp5671
asbsg59
g3469
sg38
Nsbag0
(g8
g2
Ntp5672
Rp5673
(dp5674
g12
g0
(g13
g2
Ntp5675
Rp5676
(dp5677
g17
(lp5678
g3183
asg55
(itheano.gof.utils
scratchpad
p5679
(dp5680
g138
(lp5681
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5682
tp5683
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5684
tp5685
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5687
tp5688
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5689
tp5690
asbsg154
(lp5691
g5673
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5692
(dp5693
g138
(lp5694
(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5695
tp5696
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5697
tp5698
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p5699
tp5700
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5701
tp5702
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5703
(dp5704
g138
(lp5705
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5706
tp5707
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5708
tp5709
a(g949
I3958
g946
S'rval = op(x, newshape)'
p5710
tp5711
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5712
tp5713
asbsg154
(lp5714
g3155
asg156
g0
(g955
g2
Ntp5715
Rp5716
(dp5717
g959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5718
(dp5719
bsg59
g0
(g60
g2
Ntp5720
Rp5721
(dp5722
g64
(I00
I00
tp5723
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5724
(dp5725
g138
(lp5726
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5727
tp5728
a(g3127
I4578
g3128
S'ygrad = dot(x.T, gz)'
p5729
tp5730
a(g2162
I4732
g2155
S'return _dot(a, b)'
p5731
tp5732
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5733
tp5734
asbsg154
(lp5735
g3015
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5736
(dp5737
bsg59
g0
(g60
g2
Ntp5738
Rp5739
(dp5740
g64
(I00
I00
tp5741
sg65
S'float64'
p5742
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5743
Rp5744
(dp5745
g12
g0
(g13
g2
Ntp5746
Rp5747
(dp5748
g17
(lp5749
g85
asg55
(itheano.gof.utils
scratchpad
p5750
(dp5751
g138
(lp5752
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p5753
tp5754
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5755
tp5756
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5757
tp5758
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5759
tp5760
asbsg154
(lp5761
g5744
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5762
(dp5763
g138
(lp5764
(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5765
tp5766
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5767
tp5768
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p5769
tp5770
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5771
tp5772
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5773
(dp5774
g138
(lp5775
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5776
tp5777
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p5778
tp5779
a(g949
I3958
g946
S'rval = op(x, newshape)'
p5780
tp5781
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5782
tp5783
asbsg154
(lp5784
g3008
asg156
g0
(g955
g2
Ntp5785
Rp5786
(dp5787
g959
I3
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5788
(dp5789
bsg59
g0
(g60
g2
Ntp5790
Rp5791
(dp5792
g64
(I00
I00
I00
tp5793
sg65
g5742
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5794
Rp5795
(dp5796
g12
g0
(g13
g2
Ntp5797
Rp5798
(dp5799
g17
(lp5800
g123
asg55
(itheano.gof.utils
scratchpad
p5801
(dp5802
g138
(lp5803
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p5804
tp5805
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5806
tp5807
a(g148
I533
g149
S'inplace=False)(input))'
p5808
tp5809
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5810
tp5811
asbsg154
(lp5812
g5795
asg156
g0
(g157
g2
Ntp5813
Rp5814
(dp5815
g161
(lp5816
sg163
(lp5817
sg165
(lp5818
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp5819
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5820
(dp5821
bsg59
g0
(g60
g2
Ntp5822
Rp5823
(dp5824
g64
(I01
I01
I01
tp5825
sg65
g135
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5826
(dp5827
g138
(lp5828
(g187
I75
g188
S'self.functions()'
p5829
tp5830
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p5831
tp5832
a(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p5833
tp5834
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5835
tp5836
asbsg154
(lp5837
g3001
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5838
(dp5839
g138
(lp5840
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p5841
tp5842
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5843
tp5844
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5845
tp5846
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5847
tp5848
asbsg59
g0
(g60
g2
Ntp5849
Rp5850
(dp5851
g64
(I00
I00
I00
tp5852
sg65
S'float64'
p5853
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5854
(dp5855
g138
(lp5856
(g187
I75
g188
S'self.functions()'
p5857
tp5858
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p5859
tp5860
a(g246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p5861
tp5862
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5863
tp5864
asbsg154
(lp5865
g2994
asg156
g0
(g252
g2
Ntp5866
Rp5867
(dp5868
g256
g5853
sg65
g5853
sg172
g173
sg202
g259
sg262
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5869
(dp5870
g138
(lp5871
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5872
tp5873
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p5874
tp5875
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p5876
tp5877
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5878
tp5879
asbsg59
g0
(g60
g2
Ntp5880
Rp5881
(dp5882
g64
(tsg65
g5853
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5883
(dp5884
g138
(lp5885
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p5886
tp5887
a(g187
I75
g188
S'self.functions()'
p5888
tp5889
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p5890
tp5891
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5892
tp5893
asbsg154
(lp5894
g2987
asg156
g0
(g196
g2
Ntp5895
Rp5896
(dp5897
g200
g201
sg202
g0
(ctheano.scalar.basic
Sqrt
p5898
g2
Ntp5899
Rp5900
(dp5901
g207
g2387
sg172
g173
sg38
S'sqrt'
p5902
sbsg38
S'Elemwise{sqrt,no_inplace}'
p5903
sg172
g173
sg211
(dp5904
sg213
(g5902
I1
I1
tp5905
sg216
(dp5906
sg218
S"square root of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p5907
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5908
(dp5909
g138
(lp5910
(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p5911
tp5912
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5913
tp5914
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5915
tp5916
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5917
tp5918
asbsg59
g0
(g60
g2
Ntp5919
Rp5920
(dp5921
g64
(tsg65
S'float64'
p5922
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag123
asg55
(itheano.gof.utils
scratchpad
p5923
(dp5924
g138
(lp5925
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p5926
tp5927
a(g187
I75
g188
S'self.functions()'
p5928
tp5929
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p5930
tp5931
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5932
tp5933
asbsg154
(lp5934
g2980
asg156
g0
(g196
g2
Ntp5935
Rp5936
(dp5937
g200
g201
sg202
g0
(ctheano.scalar.basic
GE
p5938
g2
Ntp5939
Rp5940
(dp5941
g172
g173
sg38
Nsbsg38
S'Elemwise{ge,no_inplace}'
p5942
sg172
g173
sg211
(dp5943
sg213
(S'greater_equal'
p5944
I2
I1
tp5945
sg216
(dp5946
sg218
S"a >= b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p5947
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5948
(dp5949
g138
(lp5950
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p5951
tp5952
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5953
tp5954
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5955
tp5956
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p5957
tp5958
asbsg59
g0
(g60
g2
Ntp5959
Rp5960
(dp5961
g64
(tsg65
S'int8'
p5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p5963
(dp5964
g138
(lp5965
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p5966
tp5967
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p5968
tp5969
a(g148
I533
g149
S'inplace=False)(input))'
p5970
tp5971
a(g144
I401
g145
S'self.add_tag_trace(node)'
p5972
tp5973
asbsg154
(lp5974
g2973
asg156
g0
(g157
g2
Ntp5975
Rp5976
(dp5977
g161
(lp5978
sg163
(lp5979
sg165
(lp5980
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp5981
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p5982
(dp5983
bsg59
g0
(g60
g2
Ntp5984
Rp5985
(dp5986
g64
(I01
I01
I01
tp5987
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp5988
Rp5989
(dp5990
g12
g0
(g13
g2
Ntp5991
Rp5992
(dp5993
g17
(lp5994
g3008
ag0
(g8
g2
Ntp5995
Rp5996
(dp5997
g12
g0
(g13
g2
Ntp5998
Rp5999
(dp6000
g17
(lp6001
g0
(g8
g2
Ntp6002
Rp6003
(dp6004
g12
g0
(g13
g2
Ntp6005
Rp6006
(dp6007
g17
(lp6008
g123
ag2987
asg55
(itheano.gof.utils
scratchpad
p6009
(dp6010
g138
(lp6011
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p6012
tp6013
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p6014
I222
S'__rdiv__'
p6015
S'return theano.tensor.basic.div_proxy(other, self)'
p6016
tp6017
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p6018
I2948
S'div_proxy'
p6019
S'return f(x, y)'
p6020
tp6021
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6022
tp6023
asbsg154
(lp6024
g6003
asg156
g0
(g196
g2
Ntp6025
Rp6026
(dp6027
g200
g201
sg202
g4543
sg38
S'Elemwise{true_div,no_inplace}'
p6028
sg172
g173
sg211
(dp6029
sg213
(S'true_divide'
p6030
I2
I1
tp6031
sg216
(dp6032
sg218
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p6033
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6034
(dp6035
g138
(lp6036
(g6018
I2948
g6019
S'return f(x, y)'
p6037
tp6038
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6039
tp6040
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6041
tp6042
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6043
tp6044
asbsg59
g0
(g60
g2
Ntp6045
Rp6046
(dp6047
g64
(tsg65
S'float64'
p6048
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6049
(dp6050
g138
(lp6051
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p6052
tp6053
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6054
tp6055
a(g148
I533
g149
S'inplace=False)(input))'
p6056
tp6057
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6058
tp6059
asbsg154
(lp6060
g5996
asg156
g0
(g157
g2
Ntp6061
Rp6062
(dp6063
g161
(lp6064
sg163
(lp6065
sg165
(lp6066
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp6067
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6068
(dp6069
bsg59
g0
(g60
g2
Ntp6070
Rp6071
(dp6072
g64
(I01
I01
I01
tp6073
sg65
g6048
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6074
(dp6075
g138
(lp6076
(g187
I75
g188
S'self.functions()'
p6077
tp6078
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p6079
tp6080
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p6081
tp6082
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6083
tp6084
asbsg154
(lp6085
g5989
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6086
(dp6087
g138
(lp6088
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p6089
tp6090
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6091
tp6092
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6093
tp6094
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6095
tp6096
asbsg59
g0
(g60
g2
Ntp6097
Rp6098
(dp6099
g64
(I00
I00
I00
tp6100
sg65
S'float64'
p6101
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag3008
asg55
(itheano.gof.utils
scratchpad
p6102
(dp6103
g138
(lp6104
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p6105
tp6106
a(g187
I75
g188
S'self.functions()'
p6107
tp6108
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p6109
tp6110
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6111
tp6112
asbsg154
(lp6113
g2966
asg156
g0
(g196
g2
Ntp6114
Rp6115
(dp6116
g200
g201
sg202
g0
(ctheano.scalar.basic
Switch
p6117
g2
Ntp6118
Rp6119
(dp6120
g172
g173
sg38
Nsbsg38
S'Elemwise{switch,no_inplace}'
p6121
sg172
g173
sg211
(dp6122
sg213
(S'where'
p6123
I3
I1
tp6124
sg216
(dp6125
sg218
S"if cond then ift else iff\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p6126
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6127
(dp6128
g138
(lp6129
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p6130
tp6131
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6132
tp6133
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6134
tp6135
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6136
tp6137
asbsg59
g0
(g60
g2
Ntp6138
Rp6139
(dp6140
g64
(I00
I00
I00
tp6141
sg65
S'float64'
p6142
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6143
(dp6144
g138
(lp6145
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p6146
tp6147
a(g187
I75
g188
S'self.functions()'
p6148
tp6149
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6150
tp6151
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6152
tp6153
asbsg154
(lp6154
g2959
asg156
g0
(g196
g2
Ntp6155
Rp6156
(dp6157
g200
g201
sg202
g0
(ctheano.scalar.basic
IsNan
p6158
g2
Ntp6159
Rp6160
(dp6161
g172
g173
sg38
Nsbsg38
S'Elemwise{isnan,no_inplace}'
p6162
sg172
g173
sg211
(dp6163
sg213
(S'isnan'
p6164
I1
I1
tp6165
sg216
(dp6166
sg218
S"isnan(a)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p6167
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6168
(dp6169
g138
(lp6170
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6171
tp6172
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6173
tp6174
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6175
tp6176
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6177
tp6178
asbsg59
g0
(g60
g2
Ntp6179
Rp6180
(dp6181
g64
(I00
I00
I00
tp6182
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp6183
Rp6184
(dp6185
g12
g0
(g13
g2
Ntp6186
Rp6187
(dp6188
g17
(lp6189
g2966
asg55
(itheano.gof.utils
scratchpad
p6190
(dp6191
g138
(lp6192
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p6193
tp6194
a(g187
I75
g188
S'self.functions()'
p6195
tp6196
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6197
tp6198
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6199
tp6200
asbsg154
(lp6201
g6184
asg156
g0
(g196
g2
Ntp6202
Rp6203
(dp6204
g200
g201
sg202
g0
(ctheano.scalar.basic
IsInf
p6205
g2
Ntp6206
Rp6207
(dp6208
g172
g173
sg38
Nsbsg38
S'Elemwise{isinf,no_inplace}'
p6209
sg172
g173
sg211
(dp6210
sg213
(S'isinf'
p6211
I1
I1
tp6212
sg216
(dp6213
sg218
S"isinf(a)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p6214
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6215
(dp6216
g138
(lp6217
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6218
tp6219
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6220
tp6221
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6222
tp6223
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6224
tp6225
asbsg59
g0
(g60
g2
Ntp6226
Rp6227
(dp6228
g64
(I00
I00
I00
tp6229
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6230
(dp6231
g138
(lp6232
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p6233
tp6234
a(g187
I75
g188
S'self.functions()'
p6235
tp6236
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6237
tp6238
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6239
tp6240
asbsg154
(lp6241
g2952
asg156
g0
(g196
g2
Ntp6242
Rp6243
(dp6244
g200
g201
sg202
g0
(ctheano.scalar.basic
OR
p6245
g2
Ntp6246
Rp6247
(dp6248
g172
g173
sg38
Nsbsg38
S'Elemwise{or_,no_inplace}'
p6249
sg172
g173
sg211
(dp6250
sg213
(S'bitwise_or'
p6251
I2
I1
tp6252
sg216
(dp6253
sg218
S"bitwise a | b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p6254
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6255
(dp6256
g138
(lp6257
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p6258
tp6259
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6260
tp6261
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6262
tp6263
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6264
tp6265
asbsg59
g0
(g60
g2
Ntp6266
Rp6267
(dp6268
g64
(I00
I00
I00
tp6269
sg65
S'int8'
p6270
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp6271
Rp6272
(dp6273
g12
g0
(g13
g2
Ntp6274
Rp6275
(dp6276
g17
(lp6277
g0
(g8
g2
Ntp6278
Rp6279
(dp6280
g12
g0
(g13
g2
Ntp6281
Rp6282
(dp6283
g17
(lp6284
g0
(g33
g2
Ntp6285
Rp6286
(dp6287
g37
Nsg55
(itheano.gof.utils
scratchpad
p6288
(dp6289
g58
Nsbsg59
g0
(g60
g2
Ntp6290
Rp6291
(dp6292
g64
(tsg65
S'float64'
p6293
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp6294
g44
tp6295
Rp6296
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p6297
tp6298
bsbasg55
(itheano.gof.utils
scratchpad
p6299
(dp6300
g138
(lp6301
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6302
tp6303
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6304
tp6305
a(g148
I533
g149
S'inplace=False)(input))'
p6306
tp6307
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6308
tp6309
asbsg154
(lp6310
g6279
asg156
g0
(g157
g2
Ntp6311
Rp6312
(dp6313
g161
(lp6314
sg163
(lp6315
sg165
(lp6316
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp6317
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6318
(dp6319
bsg59
g0
(g60
g2
Ntp6320
Rp6321
(dp6322
g64
(I01
I01
I01
tp6323
sg65
g6293
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag85
asg55
(itheano.gof.utils
scratchpad
p6324
(dp6325
g138
(lp6326
(g187
I75
g188
S'self.functions()'
p6327
tp6328
a(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p6329
tp6330
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6331
tp6332
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6333
tp6334
asbsg154
(lp6335
g6272
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6336
(dp6337
g138
(lp6338
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6339
tp6340
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6341
tp6342
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6343
tp6344
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6345
tp6346
asbsg59
g0
(g60
g2
Ntp6347
Rp6348
(dp6349
g64
(I00
I00
I00
tp6350
sg65
S'float64'
p6351
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag2966
asg55
(itheano.gof.utils
scratchpad
p6352
(dp6353
g138
(lp6354
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p6355
tp6356
a(g187
I75
g188
S'self.functions()'
p6357
tp6358
a(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p6359
tp6360
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6361
tp6362
asbsg154
(lp6363
g2945
asg156
g6115
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6364
(dp6365
g138
(lp6366
(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p6367
tp6368
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6369
tp6370
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6371
tp6372
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6373
tp6374
asbsg59
g0
(g60
g2
Ntp6375
Rp6376
(dp6377
g64
(I00
I00
I00
tp6378
sg65
S'float64'
p6379
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6380
(dp6381
g138
(lp6382
(g187
I75
g188
S'self.functions()'
p6383
tp6384
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p6385
tp6386
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6387
tp6388
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6389
tp6390
asbsg154
(lp6391
g2892
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6392
(dp6393
g138
(lp6394
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6395
tp6396
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6397
tp6398
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6399
tp6400
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6401
tp6402
asbsg59
g0
(g60
g2
Ntp6403
Rp6404
(dp6405
g64
(I00
I00
I00
tp6406
sg65
S'float64'
p6407
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6408
(dp6409
g138
(lp6410
(g187
I75
g188
S'self.functions()'
p6411
tp6412
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p6413
tp6414
a(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p6415
tp6416
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6417
tp6418
asbsg154
(lp6419
g2798
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6420
(dp6421
g138
(lp6422
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p6423
tp6424
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6425
tp6426
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6427
tp6428
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6429
tp6430
asbsg59
g0
(g60
g2
Ntp6431
Rp6432
(dp6433
g64
(I00
I00
I00
tp6434
sg65
S'float64'
p6435
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6436
(dp6437
g138
(lp6438
(g187
I75
g188
S'self.functions()'
p6439
tp6440
a(g552
I207
g553
S'updates.append((param, param + upd))'
p6441
tp6442
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p6443
tp6444
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6445
tp6446
asbsg154
(lp6447
g2791
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6448
(dp6449
g138
(lp6450
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p6451
tp6452
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6453
tp6454
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6455
tp6456
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6457
tp6458
asbsg59
g0
(g60
g2
Ntp6459
Rp6460
(dp6461
g64
(I00
I00
I00
tp6462
sg65
S'float64'
p6463
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg539
g90
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g85
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp6464
Rp6465
(dp6466
g38
Nsg538
g0
(g8
g2
Ntp6467
Rp6468
(dp6469
g12
g0
(g13
g2
Ntp6470
Rp6471
(dp6472
g17
(lp6473
g331
ag0
(g8
g2
Ntp6474
Rp6475
(dp6476
g12
g0
(g13
g2
Ntp6477
Rp6478
(dp6479
g17
(lp6480
g0
(g8
g2
Ntp6481
Rp6482
(dp6483
g12
g0
(g13
g2
Ntp6484
Rp6485
(dp6486
g17
(lp6487
g0
(g8
g2
Ntp6488
Rp6489
(dp6490
g12
g0
(g13
g2
Ntp6491
Rp6492
(dp6493
g17
(lp6494
g35
asg55
(itheano.gof.utils
scratchpad
p6495
(dp6496
g138
(lp6497
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6498
tp6499
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6500
tp6501
a(g148
I533
g149
S'inplace=False)(input))'
p6502
tp6503
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6504
tp6505
asbsg154
(lp6506
g6489
asg156
g0
(g157
g2
Ntp6507
Rp6508
(dp6509
g161
(lp6510
sg163
(lp6511
sg165
(lp6512
I0
asg167
(tsg168
I00
sg169
(g170
tp6513
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6514
(dp6515
bsg59
g0
(g60
g2
Ntp6516
Rp6517
(dp6518
g64
(I01
tp6519
sg65
g66
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g83
g2
Ntp6520
Rp6521
(dp6522
g37
Nsg87
g0
(g88
g2
Ntp6523
Rp6524
(dp6525
g38
Nsg92
(lp6526
g41
(g42
(I0
tp6527
g44
tp6528
Rp6529
(I1
(I15
tp6530
g100
I00
S'\x8d\x9f\x80\x93\x0eW\x10\xbf\xb1\x8a\x9e8\xb0\xda\x19?\x03\x9dfC5\x05\x05\xbf\x04\xe8K=\x05\x05\x1e?\x90\xa7\xb9&\xf4\x1d\x1c?\xda\xa6[nm\xda\x08\xbf\xae\x9a\xbde\x1b\x86\xff>\xbeuL\xdc"t\xf7>\xd3\xe2\xd2\xd9Q\x9a\x16\xbf\xc30\xc8\xe5\xc1\xce\x14\xbf\x1a>zG\xabT\x04\xbf\xd2\xbb\x15\x91\xceu\xe3\xbe`\xf7\xdc\\\x80\x89\x0e?\x1c\xadOt\xd5\x84\x05\xbf\xc1\xc9`\xcb\x08\x83\xfc\xbe'
p6531
tp6532
basg105
I00
sg106
I00
sg59
g0
(g60
g2
Ntp6533
Rp6534
(dp6535
g64
(I00
tp6536
sg65
S'float64'
p6537
sg67
g100
sg68
I00
sg38
Nsbsg112
Nsbsg38
Nsg55
(itheano.gof.utils
scratchpad
p6538
(dp6539
bsg12
Nsg59
g6534
sbasg55
(itheano.gof.utils
scratchpad
p6540
(dp6541
g138
(lp6542
(g187
I75
g188
S'self.functions()'
p6543
tp6544
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p6545
tp6546
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6547
tp6548
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6549
tp6550
asbsg154
(lp6551
g6482
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6552
(dp6553
g138
(lp6554
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6555
tp6556
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6557
tp6558
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6559
tp6560
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6561
tp6562
asbsg59
g0
(g60
g2
Ntp6563
Rp6564
(dp6565
g64
(I00
tp6566
sg65
S'float64'
p6567
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp6568
Rp6569
(dp6570
g12
g0
(g13
g2
Ntp6571
Rp6572
(dp6573
g17
(lp6574
g0
(g8
g2
Ntp6575
Rp6576
(dp6577
g12
g0
(g13
g2
Ntp6578
Rp6579
(dp6580
g17
(lp6581
g0
(g33
g2
Ntp6582
Rp6583
(dp6584
g37
Nsg55
(itheano.gof.utils
scratchpad
p6585
(dp6586
g58
Nsbsg59
g0
(g60
g2
Ntp6587
Rp6588
(dp6589
g64
(tsg65
S'float64'
p6590
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp6591
g44
tp6592
Rp6593
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p6594
tp6595
bsbasg55
(itheano.gof.utils
scratchpad
p6596
(dp6597
g138
(lp6598
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p6599
tp6600
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6601
tp6602
a(g148
I533
g149
S'inplace=False)(input))'
p6603
tp6604
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6605
tp6606
asbsg154
(lp6607
g6576
asg156
g0
(g157
g2
Ntp6608
Rp6609
(dp6610
g161
(lp6611
sg163
(lp6612
sg165
(lp6613
I0
asg167
(tsg168
I00
sg169
(g170
tp6614
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6615
(dp6616
bsg59
g0
(g60
g2
Ntp6617
Rp6618
(dp6619
g64
(I01
tp6620
sg65
g6590
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp6621
Rp6622
(dp6623
g12
g0
(g13
g2
Ntp6624
Rp6625
(dp6626
g17
(lp6627
g0
(g8
g2
Ntp6628
Rp6629
(dp6630
g12
g0
(g13
g2
Ntp6631
Rp6632
(dp6633
g17
(lp6634
g0
(g8
g2
Ntp6635
Rp6636
(dp6637
g12
g0
(g13
g2
Ntp6638
Rp6639
(dp6640
g17
(lp6641
g0
(g8
g2
Ntp6642
Rp6643
(dp6644
g12
g0
(g13
g2
Ntp6645
Rp6646
(dp6647
g17
(lp6648
g0
(g8
g2
Ntp6649
Rp6650
(dp6651
g12
g0
(g13
g2
Ntp6652
Rp6653
(dp6654
g17
(lp6655
g0
(g8
g2
Ntp6656
Rp6657
(dp6658
g12
g0
(g13
g2
Ntp6659
Rp6660
(dp6661
g17
(lp6662
g0
(g8
g2
Ntp6663
Rp6664
(dp6665
g12
g0
(g13
g2
Ntp6666
Rp6667
(dp6668
g17
(lp6669
g0
(g8
g2
Ntp6670
Rp6671
(dp6672
g12
g0
(g13
g2
Ntp6673
Rp6674
(dp6675
g17
(lp6676
g0
(g8
g2
Ntp6677
Rp6678
(dp6679
g12
g0
(g13
g2
Ntp6680
Rp6681
(dp6682
g17
(lp6683
g0
(g8
g2
Ntp6684
Rp6685
(dp6686
g12
g0
(g13
g2
Ntp6687
Rp6688
(dp6689
g17
(lp6690
g0
(g8
g2
Ntp6691
Rp6692
(dp6693
g12
g0
(g13
g2
Ntp6694
Rp6695
(dp6696
g17
(lp6697
g0
(g8
g2
Ntp6698
Rp6699
(dp6700
g12
g0
(g13
g2
Ntp6701
Rp6702
(dp6703
g17
(lp6704
g0
(g8
g2
Ntp6705
Rp6706
(dp6707
g12
g0
(g13
g2
Ntp6708
Rp6709
(dp6710
g17
(lp6711
g0
(g8
g2
Ntp6712
Rp6713
(dp6714
g12
g0
(g13
g2
Ntp6715
Rp6716
(dp6717
g17
(lp6718
g0
(g8
g2
Ntp6719
Rp6720
(dp6721
g12
g0
(g13
g2
Ntp6722
Rp6723
(dp6724
g17
(lp6725
g0
(g8
g2
Ntp6726
Rp6727
(dp6728
g12
g0
(g13
g2
Ntp6729
Rp6730
(dp6731
g17
(lp6732
g0
(g8
g2
Ntp6733
Rp6734
(dp6735
g12
g0
(g13
g2
Ntp6736
Rp6737
(dp6738
g17
(lp6739
g0
(g8
g2
Ntp6740
Rp6741
(dp6742
g12
g0
(g13
g2
Ntp6743
Rp6744
(dp6745
g17
(lp6746
g4282
ag4414
asg55
(itheano.gof.utils
scratchpad
p6747
(dp6748
g138
(lp6749
(g4430
I450
g3128
S'g_cost = _float_ones_like(cost)'
p6750
tp6751
a(g4433
I1124
g4434
S'rval = tensor.ones_like(x)'
p6752
tp6753
a(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p6754
tp6755
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6756
tp6757
asbsg154
(lp6758
g6741
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6759
(dp6760
g138
(lp6761
(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p6762
tp6763
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6764
tp6765
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6766
tp6767
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6768
tp6769
asbsg59
g0
(g60
g2
Ntp6770
Rp6771
(dp6772
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6773
(dp6774
g138
(lp6775
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6776
tp6777
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6778
tp6779
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6780
tp6781
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6782
tp6783
asbsg154
(lp6784
g6734
asg156
g0
(g196
g2
Ntp6785
Rp6786
(dp6787
g38
Nsg202
g2732
sg211
(dp6788
sg213
Nsg216
(dp6789
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6790
(dp6791
g138
(lp6792
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6793
tp6794
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6795
tp6796
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6797
tp6798
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6799
tp6800
asbsg59
g0
(g60
g2
Ntp6801
Rp6802
(dp6803
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag572
asg55
(itheano.gof.utils
scratchpad
p6804
(dp6805
g138
(lp6806
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6807
tp6808
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6809
tp6810
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6811
tp6812
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6813
tp6814
asbsg154
(lp6815
g6727
asg156
g0
(g196
g2
Ntp6816
Rp6817
(dp6818
g38
Nsg202
g501
sg211
(dp6819
sg213
Nsg216
(dp6820
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6821
(dp6822
g138
(lp6823
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6824
tp6825
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6826
tp6827
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6828
tp6829
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6830
tp6831
asbsg59
g0
(g60
g2
Ntp6832
Rp6833
(dp6834
g64
(tsg65
S'float64'
p6835
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag4310
asg55
(itheano.gof.utils
scratchpad
p6836
(dp6837
g138
(lp6838
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6839
tp6840
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6841
tp6842
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6843
tp6844
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6845
tp6846
asbsg154
(lp6847
g6720
asg156
g0
(g196
g2
Ntp6848
Rp6849
(dp6850
g38
Nsg202
g4543
sg211
(dp6851
sg213
Nsg216
(dp6852
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6853
(dp6854
g138
(lp6855
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6856
tp6857
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6858
tp6859
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6860
tp6861
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6862
tp6863
asbsg59
g0
(g60
g2
Ntp6864
Rp6865
(dp6866
g64
(tsg65
S'float64'
p6867
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp6868
Rp6869
(dp6870
g12
g0
(g13
g2
Ntp6871
Rp6872
(dp6873
g17
(lp6874
g0
(g8
g2
Ntp6875
Rp6876
(dp6877
g12
g0
(g13
g2
Ntp6878
Rp6879
(dp6880
g17
(lp6881
g0
(g8
g2
Ntp6882
Rp6883
(dp6884
g12
g0
(g13
g2
Ntp6885
Rp6886
(dp6887
g17
(lp6888
g6734
ag4363
asg55
(itheano.gof.utils
scratchpad
p6889
(dp6890
g138
(lp6891
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6892
tp6893
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6894
tp6895
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6896
tp6897
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6898
tp6899
asbsg154
(lp6900
g6883
asg156
g0
(g196
g2
Ntp6901
Rp6902
(dp6903
g38
Nsg202
g501
sg211
(dp6904
sg213
Nsg216
(dp6905
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6906
(dp6907
g138
(lp6908
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6909
tp6910
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6911
tp6912
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6913
tp6914
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6915
tp6916
asbsg59
g0
(g60
g2
Ntp6917
Rp6918
(dp6919
g64
(tsg65
S'float64'
p6920
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag4382
asg55
(itheano.gof.utils
scratchpad
p6921
(dp6922
g138
(lp6923
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6924
tp6925
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6926
tp6927
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6928
tp6929
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6930
tp6931
asbsg154
(lp6932
g6876
asg156
g0
(g196
g2
Ntp6933
Rp6934
(dp6935
g38
Nsg202
g4543
sg211
(dp6936
sg213
Nsg216
(dp6937
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6938
(dp6939
g138
(lp6940
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6941
tp6942
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6943
tp6944
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6945
tp6946
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6947
tp6948
asbsg59
g0
(g60
g2
Ntp6949
Rp6950
(dp6951
g64
(tsg65
S'float64'
p6952
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6953
(dp6954
g138
(lp6955
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p6956
tp6957
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p6958
tp6959
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6960
tp6961
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6962
tp6963
asbsg154
(lp6964
g6869
asg156
g0
(g196
g2
Ntp6965
Rp6966
(dp6967
g38
Nsg202
g2732
sg211
(dp6968
sg213
Nsg216
(dp6969
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6970
(dp6971
g138
(lp6972
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p6973
tp6974
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p6975
tp6976
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6977
tp6978
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p6979
tp6980
asbsg59
g0
(g60
g2
Ntp6981
Rp6982
(dp6983
g64
(tsg65
g6952
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p6984
(dp6985
g138
(lp6986
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p6987
tp6988
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p6989
tp6990
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p6991
tp6992
a(g144
I401
g145
S'self.add_tag_trace(node)'
p6993
tp6994
asbsg154
(lp6995
g6713
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p6996
(dp6997
g138
(lp6998
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p6999
tp7000
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7001
tp7002
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7003
tp7004
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7005
tp7006
asbsg59
g0
(g60
g2
Ntp7007
Rp7008
(dp7009
g64
(tsg65
S'float64'
p7010
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7011
Rp7012
(dp7013
g12
g0
(g13
g2
Ntp7014
Rp7015
(dp7016
g17
(lp7017
g4317
asg55
(itheano.gof.utils
scratchpad
p7018
(dp7019
g138
(lp7020
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7021
tp7022
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7023
tp7024
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7025
tp7026
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7027
tp7028
asbsg154
(lp7029
g7012
asg156
g0
(g196
g2
Ntp7030
Rp7031
(dp7032
g38
Nsg202
g2385
sg211
(dp7033
sg213
Nsg216
(dp7034
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7035
(dp7036
g138
(lp7037
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7038
tp7039
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7040
tp7041
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7042
tp7043
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7044
tp7045
asbsg59
g0
(g60
g2
Ntp7046
Rp7047
(dp7048
g64
(tsg65
S'float64'
p7049
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7050
(dp7051
g138
(lp7052
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p7053
tp7054
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7055
tp7056
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7057
tp7058
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7059
tp7060
asbsg154
(lp7061
g6706
asg156
g0
(g196
g2
Ntp7062
Rp7063
(dp7064
g38
Nsg202
g501
sg211
(dp7065
sg213
Nsg216
(dp7066
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7067
(dp7068
g138
(lp7069
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7070
tp7071
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7072
tp7073
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7074
tp7075
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7076
tp7077
asbsg59
g0
(g60
g2
Ntp7078
Rp7079
(dp7080
g64
(tsg65
S'float64'
p7081
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7082
Rp7083
(dp7084
g12
g0
(g13
g2
Ntp7085
Rp7086
(dp7087
g17
(lp7088
g0
(g8
g2
Ntp7089
Rp7090
(dp7091
g12
g0
(g13
g2
Ntp7092
Rp7093
(dp7094
g17
(lp7095
g2530
asg55
(itheano.gof.utils
scratchpad
p7096
(dp7097
g138
(lp7098
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7099
tp7100
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7101
tp7102
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p7103
tp7104
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7105
tp7106
asbsg154
(lp7107
g7090
asg156
g0
(g157
g2
Ntp7108
Rp7109
(dp7110
g161
(lp7111
sg163
(lp7112
sg165
(lp7113
sg167
(tsg168
I00
sg169
(tsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7114
(dp7115
bsg59
g0
(g60
g2
Ntp7116
Rp7117
(dp7118
g64
(tsg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7119
Rp7120
(dp7121
g12
g0
(g13
g2
Ntp7122
Rp7123
(dp7124
g17
(lp7125
g4317
asg55
(itheano.gof.utils
scratchpad
p7126
(dp7127
g138
(lp7128
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7129
tp7130
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7131
tp7132
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7133
tp7134
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7135
tp7136
asbsg154
(lp7137
g7120
asg156
g0
(g196
g2
Ntp7138
Rp7139
(dp7140
g38
Nsg202
g2385
sg211
(dp7141
sg213
Nsg216
(dp7142
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7143
(dp7144
g138
(lp7145
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7146
tp7147
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7148
tp7149
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7150
tp7151
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7152
tp7153
asbsg59
g0
(g60
g2
Ntp7154
Rp7155
(dp7156
g64
(tsg65
S'float64'
p7157
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7158
(dp7159
g138
(lp7160
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p7161
tp7162
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7163
tp7164
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7165
tp7166
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7167
tp7168
asbsg154
(lp7169
g7083
asg156
g0
(g196
g2
Ntp7170
Rp7171
(dp7172
g38
Nsg202
g2567
sg211
(dp7173
sg213
Nsg216
(dp7174
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7175
(dp7176
g138
(lp7177
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7178
tp7179
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7180
tp7181
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7182
tp7183
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7184
tp7185
asbsg59
g0
(g60
g2
Ntp7186
Rp7187
(dp7188
g64
(tsg65
S'float64'
p7189
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7190
(dp7191
g138
(lp7192
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p7193
tp7194
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p7195
tp7196
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7197
tp7198
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7199
tp7200
asbsg154
(lp7201
g6699
asg156
g0
(g196
g2
Ntp7202
Rp7203
(dp7204
g38
Nsg202
g501
sg211
(dp7205
sg213
Nsg216
(dp7206
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7207
(dp7208
g138
(lp7209
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p7210
tp7211
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7212
tp7213
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7214
tp7215
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7216
tp7217
asbsg59
g0
(g60
g2
Ntp7218
Rp7219
(dp7220
g64
(tsg65
S'float64'
p7221
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7222
(dp7223
g138
(lp7224
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7225
tp7226
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7227
tp7228
a(g148
I533
g149
S'inplace=False)(input))'
p7229
tp7230
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7231
tp7232
asbsg154
(lp7233
g6692
asg156
g0
(g157
g2
Ntp7234
Rp7235
(dp7236
g161
(lp7237
sg163
(lp7238
sg165
(lp7239
I0
asg167
(tsg168
I00
sg169
(g170
tp7240
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7241
(dp7242
bsg59
g0
(g60
g2
Ntp7243
Rp7244
(dp7245
g64
(I01
tp7246
sg65
g7221
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag4324
asg55
(itheano.gof.utils
scratchpad
p7247
(dp7248
g138
(lp7249
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7250
tp7251
a(g3127
I4563
g3128
S'ygrad = gz * x'
p7252
tp7253
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7254
tp7255
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7256
tp7257
asbsg154
(lp7258
g6685
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7259
(dp7260
g138
(lp7261
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7262
tp7263
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7264
tp7265
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7266
tp7267
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7268
tp7269
asbsg59
g0
(g60
g2
Ntp7270
Rp7271
(dp7272
g64
(I00
tp7273
sg65
S'float64'
p7274
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7275
Rp7276
(dp7277
g12
g0
(g13
g2
Ntp7278
Rp7279
(dp7280
g17
(lp7281
g123
asg55
(itheano.gof.utils
scratchpad
p7282
(dp7283
g138
(lp7284
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p7285
tp7286
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7287
tp7288
a(g148
I533
g149
S'inplace=False)(input))'
p7289
tp7290
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7291
tp7292
asbsg154
(lp7293
g7276
asg156
g0
(g157
g2
Ntp7294
Rp7295
(dp7296
g161
(lp7297
sg163
(lp7298
sg165
(lp7299
I0
asg167
(tsg168
I00
sg169
(g170
tp7300
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7301
(dp7302
bsg59
g0
(g60
g2
Ntp7303
Rp7304
(dp7305
g64
(I01
tp7306
sg65
g135
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7307
(dp7308
g138
(lp7309
(g187
I75
g188
S'self.functions()'
p7310
tp7311
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p7312
tp7313
a(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p7314
tp7315
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7316
tp7317
asbsg154
(lp7318
g6678
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7319
(dp7320
g138
(lp7321
(g140
I166
g141
S'return theano.tensor.basic.pow(self, other)'
p7322
tp7323
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7324
tp7325
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7326
tp7327
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7328
tp7329
asbsg59
g0
(g60
g2
Ntp7330
Rp7331
(dp7332
g64
(I00
tp7333
sg65
S'float64'
p7334
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7335
(dp7336
g138
(lp7337
(g187
I75
g188
S'self.functions()'
p7338
tp7339
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p7340
tp7341
a(g246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p7342
tp7343
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7344
tp7345
asbsg154
(lp7346
g6671
asg156
g0
(g252
g2
Ntp7347
Rp7348
(dp7349
g256
g7334
sg65
g7334
sg172
g173
sg202
g259
sg262
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7350
(dp7351
g138
(lp7352
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7353
tp7354
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p7355
tp7356
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p7357
tp7358
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7359
tp7360
asbsg59
g0
(g60
g2
Ntp7361
Rp7362
(dp7363
g64
(tsg65
g7334
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7364
(dp7365
g138
(lp7366
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7367
tp7368
a(g187
I75
g188
S'self.functions()'
p7369
tp7370
a(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p7371
tp7372
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7373
tp7374
asbsg154
(lp7375
g6664
asg156
g5896
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7376
(dp7377
g138
(lp7378
(g552
I191
g553
S'gparam_norm = T.sqrt(T.sum(pre_clip_gparam**2))'
p7379
tp7380
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7381
tp7382
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7383
tp7384
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7385
tp7386
asbsg59
g0
(g60
g2
Ntp7387
Rp7388
(dp7389
g64
(tsg65
S'float64'
p7390
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag123
asg55
(itheano.gof.utils
scratchpad
p7391
(dp7392
g138
(lp7393
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7394
tp7395
a(g187
I75
g188
S'self.functions()'
p7396
tp7397
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7398
tp7399
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7400
tp7401
asbsg154
(lp7402
g6657
asg156
g5936
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7403
(dp7404
g138
(lp7405
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7406
tp7407
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7408
tp7409
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7410
tp7411
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7412
tp7413
asbsg59
g0
(g60
g2
Ntp7414
Rp7415
(dp7416
g64
(tsg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7417
(dp7418
g138
(lp7419
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7420
tp7421
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7422
tp7423
a(g148
I533
g149
S'inplace=False)(input))'
p7424
tp7425
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7426
tp7427
asbsg154
(lp7428
g6650
asg156
g0
(g157
g2
Ntp7429
Rp7430
(dp7431
g161
(lp7432
sg163
(lp7433
sg165
(lp7434
I0
asg167
(tsg168
I00
sg169
(g170
tp7435
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7436
(dp7437
bsg59
g0
(g60
g2
Ntp7438
Rp7439
(dp7440
g64
(I01
tp7441
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7442
Rp7443
(dp7444
g12
g0
(g13
g2
Ntp7445
Rp7446
(dp7447
g17
(lp7448
g6685
ag0
(g8
g2
Ntp7449
Rp7450
(dp7451
g12
g0
(g13
g2
Ntp7452
Rp7453
(dp7454
g17
(lp7455
g0
(g8
g2
Ntp7456
Rp7457
(dp7458
g12
g0
(g13
g2
Ntp7459
Rp7460
(dp7461
g17
(lp7462
g123
ag6664
asg55
(itheano.gof.utils
scratchpad
p7463
(dp7464
g138
(lp7465
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7466
tp7467
a(g6014
I222
g6015
S'return theano.tensor.basic.div_proxy(other, self)'
p7468
tp7469
a(g6018
I2948
g6019
S'return f(x, y)'
p7470
tp7471
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7472
tp7473
asbsg154
(lp7474
g7457
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7475
(dp7476
g138
(lp7477
(g6018
I2948
g6019
S'return f(x, y)'
p7478
tp7479
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7480
tp7481
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7482
tp7483
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7484
tp7485
asbsg59
g0
(g60
g2
Ntp7486
Rp7487
(dp7488
g64
(tsg65
S'float64'
p7489
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7490
(dp7491
g138
(lp7492
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7493
tp7494
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7495
tp7496
a(g148
I533
g149
S'inplace=False)(input))'
p7497
tp7498
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7499
tp7500
asbsg154
(lp7501
g7450
asg156
g0
(g157
g2
Ntp7502
Rp7503
(dp7504
g161
(lp7505
sg163
(lp7506
sg165
(lp7507
I0
asg167
(tsg168
I00
sg169
(g170
tp7508
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7509
(dp7510
bsg59
g0
(g60
g2
Ntp7511
Rp7512
(dp7513
g64
(I01
tp7514
sg65
g7489
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7515
(dp7516
g138
(lp7517
(g187
I75
g188
S'self.functions()'
p7518
tp7519
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7520
tp7521
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7522
tp7523
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7524
tp7525
asbsg154
(lp7526
g7443
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7527
(dp7528
g138
(lp7529
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p7530
tp7531
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7532
tp7533
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7534
tp7535
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7536
tp7537
asbsg59
g0
(g60
g2
Ntp7538
Rp7539
(dp7540
g64
(I00
tp7541
sg65
S'float64'
p7542
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag6685
asg55
(itheano.gof.utils
scratchpad
p7543
(dp7544
g138
(lp7545
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7546
tp7547
a(g187
I75
g188
S'self.functions()'
p7548
tp7549
a(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7550
tp7551
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7552
tp7553
asbsg154
(lp7554
g6643
asg156
g6115
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7555
(dp7556
g138
(lp7557
(g552
I193
g553
S'switchgrad = T.switch(T.ge(gparam_norm, self.clip_threshold), pre_clip_gparam * (self.clip_threshold/gparam_norm), pre_clip_gparam)'
p7558
tp7559
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7560
tp7561
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7562
tp7563
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7564
tp7565
asbsg59
g0
(g60
g2
Ntp7566
Rp7567
(dp7568
g64
(I00
tp7569
sg65
S'float64'
p7570
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7571
(dp7572
g138
(lp7573
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7574
tp7575
a(g187
I75
g188
S'self.functions()'
p7576
tp7577
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7578
tp7579
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7580
tp7581
asbsg154
(lp7582
g6636
asg156
g6156
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7583
(dp7584
g138
(lp7585
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7586
tp7587
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7588
tp7589
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7590
tp7591
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7592
tp7593
asbsg59
g0
(g60
g2
Ntp7594
Rp7595
(dp7596
g64
(I00
tp7597
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7598
Rp7599
(dp7600
g12
g0
(g13
g2
Ntp7601
Rp7602
(dp7603
g17
(lp7604
g6643
asg55
(itheano.gof.utils
scratchpad
p7605
(dp7606
g138
(lp7607
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7608
tp7609
a(g187
I75
g188
S'self.functions()'
p7610
tp7611
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7612
tp7613
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7614
tp7615
asbsg154
(lp7616
g7599
asg156
g6203
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7617
(dp7618
g138
(lp7619
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7620
tp7621
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7622
tp7623
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7624
tp7625
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7626
tp7627
asbsg59
g0
(g60
g2
Ntp7628
Rp7629
(dp7630
g64
(I00
tp7631
sg65
g5962
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7632
(dp7633
g138
(lp7634
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7635
tp7636
a(g187
I75
g188
S'self.functions()'
p7637
tp7638
a(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7639
tp7640
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7641
tp7642
asbsg154
(lp7643
g6629
asg156
g6243
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7644
(dp7645
g138
(lp7646
(g552
I195
g553
S'nonfinite = T.or_(T.isnan(switchgrad), T.isinf(switchgrad))'
p7647
tp7648
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7649
tp7650
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7651
tp7652
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7653
tp7654
asbsg59
g0
(g60
g2
Ntp7655
Rp7656
(dp7657
g64
(I00
tp7658
sg65
S'int8'
p7659
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp7660
Rp7661
(dp7662
g12
g0
(g13
g2
Ntp7663
Rp7664
(dp7665
g17
(lp7666
g0
(g8
g2
Ntp7667
Rp7668
(dp7669
g12
g0
(g13
g2
Ntp7670
Rp7671
(dp7672
g17
(lp7673
g0
(g33
g2
Ntp7674
Rp7675
(dp7676
g37
Nsg55
(itheano.gof.utils
scratchpad
p7677
(dp7678
g58
Nsbsg59
g0
(g60
g2
Ntp7679
Rp7680
(dp7681
g64
(tsg65
S'float64'
p7682
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp7683
g44
tp7684
Rp7685
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p7686
tp7687
bsbasg55
(itheano.gof.utils
scratchpad
p7688
(dp7689
g138
(lp7690
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p7691
tp7692
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7693
tp7694
a(g148
I533
g149
S'inplace=False)(input))'
p7695
tp7696
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7697
tp7698
asbsg154
(lp7699
g7668
asg156
g0
(g157
g2
Ntp7700
Rp7701
(dp7702
g161
(lp7703
sg163
(lp7704
sg165
(lp7705
I0
asg167
(tsg168
I00
sg169
(g170
tp7706
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7707
(dp7708
bsg59
g0
(g60
g2
Ntp7709
Rp7710
(dp7711
g64
(I01
tp7712
sg65
g7682
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p7713
(dp7714
g138
(lp7715
(g187
I75
g188
S'self.functions()'
p7716
tp7717
a(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p7718
tp7719
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p7720
tp7721
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7722
tp7723
asbsg154
(lp7724
g7661
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7725
(dp7726
g138
(lp7727
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p7728
tp7729
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7730
tp7731
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7732
tp7733
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7734
tp7735
asbsg59
g0
(g60
g2
Ntp7736
Rp7737
(dp7738
g64
(I00
tp7739
sg65
S'float64'
p7740
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag6643
asg55
(itheano.gof.utils
scratchpad
p7741
(dp7742
g138
(lp7743
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p7744
tp7745
a(g187
I75
g188
S'self.functions()'
p7746
tp7747
a(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p7748
tp7749
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7750
tp7751
asbsg154
(lp7752
g6622
asg156
g6115
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7753
(dp7754
g138
(lp7755
(g552
I196
g553
S'post_clip_gparam = T.switch(nonfinite, .01 * param, switchgrad)'
p7756
tp7757
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7758
tp7759
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7760
tp7761
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7762
tp7763
asbsg59
g0
(g60
g2
Ntp7764
Rp7765
(dp7766
g64
(I00
tp7767
sg65
S'float64'
p7768
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7769
(dp7770
g138
(lp7771
(g187
I75
g188
S'self.functions()'
p7772
tp7773
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p7774
tp7775
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p7776
tp7777
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7778
tp7779
asbsg154
(lp7780
g6569
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7781
(dp7782
g138
(lp7783
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p7784
tp7785
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7786
tp7787
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7788
tp7789
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7790
tp7791
asbsg59
g0
(g60
g2
Ntp7792
Rp7793
(dp7794
g64
(I00
tp7795
sg65
S'float64'
p7796
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7797
(dp7798
g138
(lp7799
(g187
I75
g188
S'self.functions()'
p7800
tp7801
a(g552
I205
g553
S'upd = self.momentum * weight_update - self.lr * gparam'
p7802
tp7803
a(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p7804
tp7805
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7806
tp7807
asbsg154
(lp7808
g6475
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7809
(dp7810
g138
(lp7811
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p7812
tp7813
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7814
tp7815
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7816
tp7817
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7818
tp7819
asbsg59
g0
(g60
g2
Ntp7820
Rp7821
(dp7822
g64
(I00
tp7823
sg65
S'float64'
p7824
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p7825
(dp7826
g138
(lp7827
(g187
I75
g188
S'self.functions()'
p7828
tp7829
a(g552
I207
g553
S'updates.append((param, param + upd))'
p7830
tp7831
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p7832
tp7833
a(g144
I401
g145
S'self.add_tag_trace(node)'
p7834
tp7835
asbsg154
(lp7836
g6468
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p7837
(dp7838
g138
(lp7839
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p7840
tp7841
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p7842
tp7843
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7844
tp7845
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7846
tp7847
asbsg59
g0
(g60
g2
Ntp7848
Rp7849
(dp7850
g64
(I00
tp7851
sg65
S'float64'
p7852
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg539
g334
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g331
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp7853
Rp7854
(dp7855
g38
Nsg538
g2798
sg539
g2847
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g2844
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp7856
Rp7857
(dp7858
g38
Nsg538
g6475
sg539
g6524
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g6521
sg567
I01
sg112
Nsbasg154
(lp7859
g0
(g597
g2
Ntp7860
Rp7861
(dp7862
g543
g4310
sg540
I00
sbag0
(g597
g2
Ntp7863
Rp7864
(dp7865
g543
g4282
sg540
I00
sbasg2242
g2198
stp7866
Rp7867
(lp7868
g0
(g88
g2
Ntp7869
Rp7870
(dp7871
g2762
I0
sg38
Nsg2763
I01
sg92
(lp7872
Nasg541
I00
sg105
I00
sg106
I00
sg59
g563
sg112
Nsbag0
(g88
g2
Ntp7873
Rp7874
(dp7875
g2762
I0
sg38
Nsg2763
I01
sg92
(lp7876
Nasg541
I00
sg105
I00
sg106
I00
sg59
g588
sg112
Nsbag0
(g88
g2
Ntp7877
Rp7878
(dp7879
g2762
I0
sg38
Nsg2763
I00
sg92
g93
sg541
I01
sg105
I00
sg106
I00
sg59
g108
sg112
Nsbag0
(g88
g2
Ntp7880
Rp7881
(dp7882
g2762
I0
sg38
Nsg2763
I00
sg92
g336
sg541
I01
sg105
I00
sg106
I00
sg59
g344
sg112
Nsbag0
(g88
g2
Ntp7883
Rp7884
(dp7885
g2762
I0
sg38
Nsg2763
I00
sg92
g2849
sg541
I01
sg105
I00
sg106
I00
sg59
g2857
sg112
Nsbag0
(g88
g2
Ntp7886
Rp7887
(dp7888
g2762
I0
sg38
Nsg2763
I00
sg92
g6526
sg541
I01
sg105
I00
sg106
I00
sg59
g6534
sg112
Nsba(lp7889
NaNag96
ag339
ag2852
ag6529
atp7890
Rp7891
sS'predictmb'
p7892
g526
(g527
((dp7893
g529
Nsg530
g531
sg532
I00
sg17
(lp7894
g0
(g534
g2
Ntp7895
Rp7896
(dp7897
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g0
(g8
g2
Ntp7898
Rp7899
(dp7900
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p7901
(dp7902
g138
(lp7903
(g187
I76
g188
S'self.functions_minibatch()'
p7904
tp7905
a(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p7906
I81
S'functions_minibatch'
p7907
S'X = T.tensor3()'
p7908
tp7909
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p7910
I840
S'tensor3'
p7911
S'return type(name)'
p7912
tp7913
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7914
tp7915
asbsg59
g0
(g60
g2
Ntp7916
Rp7917
(dp7918
g64
(I00
I00
I00
tp7919
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg567
I00
sg112
Nsbag0
(g534
g2
Ntp7920
Rp7921
(dp7922
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g0
(g8
g2
Ntp7923
Rp7924
(dp7925
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p7926
(dp7927
g138
(lp7928
(g187
I76
g188
S'self.functions_minibatch()'
p7929
tp7930
a(g7906
I83
g7907
S'y = T.vector()'
p7931
tp7932
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p7933
I744
S'vector'
p7934
S'return type(name)'
p7935
tp7936
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p7937
tp7938
asbsg59
g0
(g60
g2
Ntp7939
Rp7940
(dp7941
g64
(I00
tp7942
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg567
I00
sg112
Nsbag0
(g534
g2
Ntp7943
Rp7944
(dp7945
g38
Nsg538
Nsg539
g90
sg540
I01
sg105
I00
sg541
I01
sg542
I00
sg543
g85
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp7946
Rp7947
(dp7948
g38
Nsg538
Nsg539
g334
sg540
I01
sg105
I00
sg541
I01
sg542
I00
sg543
g331
sg567
I01
sg112
Nsbasg154
(lp7949
g0
(g597
g2
Ntp7950
Rp7951
(dp7952
g543
g0
(g8
g2
Ntp7953
Rp7954
(dp7955
g12
g0
(g13
g2
Ntp7956
Rp7957
(dp7958
g17
(lp7959
g0
(g8
g2
Ntp7960
Rp7961
(dp7962
g12
g0
(g13
g2
Ntp7963
Rp7964
(dp7965
g17
(lp7966
g0
(g8
g2
Ntp7967
Rp7968
(dp7969
g12
g0
(g13
g2
Ntp7970
Rp7971
(dp7972
g17
(lp7973
g0
(g8
g2
Ntp7974
Rp7975
(dp7976
g12
g0
(g13
g2
Ntp7977
Rp7978
(dp7979
g17
(lp7980
g0
(g8
g2
Ntp7981
Rp7982
(dp7983
g12
g0
(g13
g2
Ntp7984
Rp7985
(dp7986
g17
(lp7987
g0
(g8
g2
Ntp7988
Rp7989
(dp7990
g12
g0
(g13
g2
Ntp7991
Rp7992
(dp7993
g17
(lp7994
g0
(g8
g2
Ntp7995
Rp7996
(dp7997
g12
g0
(g13
g2
Ntp7998
Rp7999
(dp8000
g17
(lp8001
g0
(g8
g2
Ntp8002
Rp8003
(dp8004
g12
g0
(g13
g2
Ntp8005
Rp8006
(dp8007
g17
(lp8008
g0
(g8
g2
Ntp8009
Rp8010
(dp8011
g12
g0
(g13
g2
Ntp8012
Rp8013
(dp8014
g17
(lp8015
g7899
ag0
(g8
g2
Ntp8016
Rp8017
(dp8018
g12
g0
(g13
g2
Ntp8019
Rp8020
(dp8021
g17
(lp8022
g0
(g8
g2
Ntp8023
Rp8024
(dp8025
g12
g0
(g13
g2
Ntp8026
Rp8027
(dp8028
g17
(lp8029
g0
(g8
g2
Ntp8030
Rp8031
(dp8032
g12
g0
(g13
g2
Ntp8033
Rp8034
(dp8035
g17
(lp8036
g469
ag0
(g8
g2
Ntp8037
Rp8038
(dp8039
g12
g0
(g13
g2
Ntp8040
Rp8041
(dp8042
g17
(lp8043
g0
(g8
g2
Ntp8044
Rp8045
(dp8046
g12
g0
(g13
g2
Ntp8047
Rp8048
(dp8049
g17
(lp8050
g7899
asg55
(itheano.gof.utils
scratchpad
p8051
(dp8052
g138
(lp8053
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8054
tp8055
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8056
tp8057
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8058
tp8059
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8060
tp8061
asbsg154
(lp8062
g8045
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8063
(dp8064
g138
(lp8065
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8066
tp8067
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8068
tp8069
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8070
tp8071
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8072
tp8073
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8074
(dp8075
g138
(lp8076
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8077
tp8078
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8079
tp8080
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8081
tp8082
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8083
tp8084
asbsg154
(lp8085
g8038
asg156
g0
(g762
g2
Ntp8086
Rp8087
(dp8088
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8089
tp8090
Rp8091
tp8092
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8093
(dp8094
bsg59
g0
(g60
g2
Ntp8095
Rp8096
(dp8097
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8098
(dp8099
g138
(lp8100
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8101
tp8102
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8103
tp8104
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8105
tp8106
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8107
tp8108
asbsg154
(lp8109
g8031
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8110
(dp8111
g138
(lp8112
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8113
tp8114
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8115
tp8116
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8117
tp8118
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8119
tp8120
asbsg59
g0
(g60
g2
Ntp8121
Rp8122
(dp8123
g64
(tsg65
S'int64'
p8124
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8125
Rp8126
(dp8127
g12
g0
(g13
g2
Ntp8128
Rp8129
(dp8130
g17
(lp8131
g0
(g8
g2
Ntp8132
Rp8133
(dp8134
g12
g0
(g13
g2
Ntp8135
Rp8136
(dp8137
g17
(lp8138
g7899
asg55
(itheano.gof.utils
scratchpad
p8139
(dp8140
g138
(lp8141
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8142
tp8143
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8144
tp8145
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8146
tp8147
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8148
tp8149
asbsg154
(lp8150
g8133
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8151
(dp8152
g138
(lp8153
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8154
tp8155
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8156
tp8157
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8158
tp8159
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8160
tp8161
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8162
(dp8163
g138
(lp8164
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8165
tp8166
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8167
tp8168
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8169
tp8170
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8171
tp8172
asbsg154
(lp8173
g8126
asg156
g0
(g762
g2
Ntp8174
Rp8175
(dp8176
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8177
tp8178
Rp8179
tp8180
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8181
(dp8182
bsg59
g0
(g60
g2
Ntp8183
Rp8184
(dp8185
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8186
(dp8187
g138
(lp8188
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8189
tp8190
a(g711
I4853
g712
S'a_shape_0 *= a.shape[s0]'
p8191
tp8192
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p8193
tp8194
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8195
tp8196
asbsg154
(lp8197
g8024
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8198
(dp8199
g138
(lp8200
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p8201
tp8202
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8203
tp8204
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8205
tp8206
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8207
tp8208
asbsg59
g0
(g60
g2
Ntp8209
Rp8210
(dp8211
g64
(tsg65
S'int64'
p8212
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8213
Rp8214
(dp8215
g12
g0
(g13
g2
Ntp8216
Rp8217
(dp8218
g17
(lp8219
g469
ag0
(g8
g2
Ntp8220
Rp8221
(dp8222
g12
g0
(g13
g2
Ntp8223
Rp8224
(dp8225
g17
(lp8226
g0
(g8
g2
Ntp8227
Rp8228
(dp8229
g12
g0
(g13
g2
Ntp8230
Rp8231
(dp8232
g17
(lp8233
g7899
asg55
(itheano.gof.utils
scratchpad
p8234
(dp8235
g138
(lp8236
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8237
tp8238
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p8239
tp8240
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8241
tp8242
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8243
tp8244
asbsg154
(lp8245
g8228
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8246
(dp8247
g138
(lp8248
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8249
tp8250
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8251
tp8252
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8253
tp8254
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8255
tp8256
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8257
(dp8258
g138
(lp8259
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8260
tp8261
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p8262
tp8263
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8264
tp8265
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8266
tp8267
asbsg154
(lp8268
g8221
asg156
g0
(g762
g2
Ntp8269
Rp8270
(dp8271
g766
(g767
(g745
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p8272
tp8273
Rp8274
tp8275
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8276
(dp8277
bsg59
g0
(g60
g2
Ntp8278
Rp8279
(dp8280
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8281
(dp8282
g138
(lp8283
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8284
tp8285
a(g711
I4857
g712
S'a_shape_1 *= a.shape[s1]'
p8286
tp8287
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8288
tp8289
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8290
tp8291
asbsg154
(lp8292
g8214
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8293
(dp8294
g138
(lp8295
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8296
tp8297
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8298
tp8299
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8300
tp8301
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8302
tp8303
asbsg59
g0
(g60
g2
Ntp8304
Rp8305
(dp8306
g64
(tsg65
S'int64'
p8307
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8308
(dp8309
g138
(lp8310
(g905
I3790
g149
S'shp = as_tensor_variable(shp, ndim=1)'
p8311
tp8312
a(g908
I174
g909
S'return stack(*x)'
p8313
tp8314
a(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p8315
tp8316
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8317
tp8318
asbsg154
(lp8319
g8017
asg156
g0
(g919
g2
Ntp8320
Rp8321
(dp8322
g65
S'int64'
p8323
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8324
(dp8325
g138
(lp8326
(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p8327
tp8328
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8329
tp8330
a(g931
I565
g149
S'return T.Apply(self, inputs, [otype()])'
p8331
tp8332
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8333
tp8334
asbsg59
g0
(g60
g2
Ntp8335
Rp8336
(dp8337
g64
(I00
tp8338
sg65
g8212
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8339
(dp8340
g138
(lp8341
(g711
I4861
g712
S'a_reshaped = a.reshape((a_shape_0, a_shape_1), ndim=2)'
p8342
tp8343
a(g945
I297
g946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p8344
tp8345
a(g949
I3958
g946
S'rval = op(x, newshape)'
p8346
tp8347
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8348
tp8349
asbsg154
(lp8350
g8010
asg156
g0
(g955
g2
Ntp8351
Rp8352
(dp8353
g959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8354
(dp8355
bsg59
g0
(g60
g2
Ntp8356
Rp8357
(dp8358
g64
(I00
I00
tp8359
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8360
Rp8361
(dp8362
g12
g0
(g13
g2
Ntp8363
Rp8364
(dp8365
g17
(lp8366
g85
ag0
(g8
g2
Ntp8367
Rp8368
(dp8369
g12
g0
(g13
g2
Ntp8370
Rp8371
(dp8372
g17
(lp8373
g0
(g8
g2
Ntp8374
Rp8375
(dp8376
g12
g0
(g13
g2
Ntp8377
Rp8378
(dp8379
g17
(lp8380
g469
ag0
(g8
g2
Ntp8381
Rp8382
(dp8383
g12
g0
(g13
g2
Ntp8384
Rp8385
(dp8386
g17
(lp8387
g0
(g8
g2
Ntp8388
Rp8389
(dp8390
g12
g0
(g13
g2
Ntp8391
Rp8392
(dp8393
g17
(lp8394
g85
asg55
(itheano.gof.utils
scratchpad
p8395
(dp8396
g138
(lp8397
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8398
tp8399
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p8400
tp8401
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8402
tp8403
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8404
tp8405
asbsg154
(lp8406
g8389
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8407
(dp8408
g138
(lp8409
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8410
tp8411
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8412
tp8413
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8414
tp8415
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8416
tp8417
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8418
(dp8419
g138
(lp8420
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8421
tp8422
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p8423
tp8424
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8425
tp8426
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8427
tp8428
asbsg154
(lp8429
g8382
asg156
g0
(g762
g2
Ntp8430
Rp8431
(dp8432
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8433
tp8434
Rp8435
tp8436
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8437
(dp8438
bsg59
g0
(g60
g2
Ntp8439
Rp8440
(dp8441
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8442
(dp8443
g138
(lp8444
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8445
tp8446
a(g711
I4855
g712
S'b_shape_0 *= b.shape[s0]'
p8447
tp8448
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8449
tp8450
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8451
tp8452
asbsg154
(lp8453
g8375
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8454
(dp8455
g138
(lp8456
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8457
tp8458
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8459
tp8460
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8461
tp8462
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8463
tp8464
asbsg59
g0
(g60
g2
Ntp8465
Rp8466
(dp8467
g64
(tsg65
S'int64'
p8468
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8469
Rp8470
(dp8471
g12
g0
(g13
g2
Ntp8472
Rp8473
(dp8474
g17
(lp8475
g0
(g8
g2
Ntp8476
Rp8477
(dp8478
g12
g0
(g13
g2
Ntp8479
Rp8480
(dp8481
g17
(lp8482
g469
ag0
(g8
g2
Ntp8483
Rp8484
(dp8485
g12
g0
(g13
g2
Ntp8486
Rp8487
(dp8488
g17
(lp8489
g0
(g8
g2
Ntp8490
Rp8491
(dp8492
g12
g0
(g13
g2
Ntp8493
Rp8494
(dp8495
g17
(lp8496
g85
asg55
(itheano.gof.utils
scratchpad
p8497
(dp8498
g138
(lp8499
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8500
tp8501
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8502
tp8503
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8504
tp8505
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8506
tp8507
asbsg154
(lp8508
g8491
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8509
(dp8510
g138
(lp8511
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8512
tp8513
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8514
tp8515
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8516
tp8517
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8518
tp8519
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8520
(dp8521
g138
(lp8522
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8523
tp8524
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8525
tp8526
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8527
tp8528
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8529
tp8530
asbsg154
(lp8531
g8484
asg156
g0
(g762
g2
Ntp8532
Rp8533
(dp8534
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8535
tp8536
Rp8537
tp8538
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8539
(dp8540
bsg59
g0
(g60
g2
Ntp8541
Rp8542
(dp8543
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8544
(dp8545
g138
(lp8546
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8547
tp8548
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8549
tp8550
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8551
tp8552
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8553
tp8554
asbsg154
(lp8555
g8477
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8556
(dp8557
g138
(lp8558
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p8559
tp8560
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8561
tp8562
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8563
tp8564
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8565
tp8566
asbsg59
g0
(g60
g2
Ntp8567
Rp8568
(dp8569
g64
(tsg65
S'int64'
p8570
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8571
Rp8572
(dp8573
g12
g0
(g13
g2
Ntp8574
Rp8575
(dp8576
g17
(lp8577
g0
(g8
g2
Ntp8578
Rp8579
(dp8580
g12
g0
(g13
g2
Ntp8581
Rp8582
(dp8583
g17
(lp8584
g85
asg55
(itheano.gof.utils
scratchpad
p8585
(dp8586
g138
(lp8587
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8588
tp8589
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8590
tp8591
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8592
tp8593
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8594
tp8595
asbsg154
(lp8596
g8579
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8597
(dp8598
g138
(lp8599
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8600
tp8601
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8602
tp8603
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8604
tp8605
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8606
tp8607
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8608
(dp8609
g138
(lp8610
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8611
tp8612
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8613
tp8614
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8615
tp8616
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8617
tp8618
asbsg154
(lp8619
g8572
asg156
g0
(g762
g2
Ntp8620
Rp8621
(dp8622
g766
(g767
(g745
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p8623
tp8624
Rp8625
tp8626
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8627
(dp8628
bsg59
g0
(g60
g2
Ntp8629
Rp8630
(dp8631
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8632
(dp8633
g138
(lp8634
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8635
tp8636
a(g711
I4859
g712
S'b_shape_1 *= b.shape[s1]'
p8637
tp8638
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p8639
tp8640
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8641
tp8642
asbsg154
(lp8643
g8470
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8644
(dp8645
g138
(lp8646
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p8647
tp8648
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8649
tp8650
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8651
tp8652
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8653
tp8654
asbsg59
g0
(g60
g2
Ntp8655
Rp8656
(dp8657
g64
(tsg65
S'int64'
p8658
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8659
(dp8660
g138
(lp8661
(g905
I3790
g149
S'shp = as_tensor_variable(shp, ndim=1)'
p8662
tp8663
a(g908
I174
g909
S'return stack(*x)'
p8664
tp8665
a(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p8666
tp8667
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8668
tp8669
asbsg154
(lp8670
g8368
asg156
g0
(g919
g2
Ntp8671
Rp8672
(dp8673
g65
S'int64'
p8674
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8675
(dp8676
g138
(lp8677
(g912
I3681
g913
S'return theano.tensor.opt.MakeVector(dtype)(*tensors)'
p8678
tp8679
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8680
tp8681
a(g931
I565
g149
S'return T.Apply(self, inputs, [otype()])'
p8682
tp8683
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8684
tp8685
asbsg59
g0
(g60
g2
Ntp8686
Rp8687
(dp8688
g64
(I00
tp8689
sg65
g8468
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8690
(dp8691
g138
(lp8692
(g711
I4862
g712
S'b_reshaped = b.reshape((b_shape_0, b_shape_1), ndim=2)'
p8693
tp8694
a(g945
I297
g946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p8695
tp8696
a(g949
I3958
g946
S'rval = op(x, newshape)'
p8697
tp8698
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8699
tp8700
asbsg154
(lp8701
g8361
asg156
g0
(g955
g2
Ntp8702
Rp8703
(dp8704
g959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8705
(dp8706
bsg59
g0
(g60
g2
Ntp8707
Rp8708
(dp8709
g64
(I00
I00
tp8710
sg65
g111
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8711
(dp8712
g138
(lp8713
(g187
I76
g188
S'self.functions_minibatch()'
p8714
tp8715
a(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8716
tp8717
a(g711
I4864
g712
S'return _dot(a_reshaped, b_reshaped).reshape(outshape, outndim)'
p8718
tp8719
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8720
tp8721
asbsg154
(lp8722
g8003
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8723
(dp8724
bsg59
g0
(g60
g2
Ntp8725
Rp8726
(dp8727
g64
(I00
I00
tp8728
sg65
S'float64'
p8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8730
Rp8731
(dp8732
g12
g0
(g13
g2
Ntp8733
Rp8734
(dp8735
g17
(lp8736
g35
ag0
(g8
g2
Ntp8737
Rp8738
(dp8739
g12
g0
(g13
g2
Ntp8740
Rp8741
(dp8742
g17
(lp8743
g0
(g8
g2
Ntp8744
Rp8745
(dp8746
g12
g0
(g13
g2
Ntp8747
Rp8748
(dp8749
g17
(lp8750
g7899
asg55
(itheano.gof.utils
scratchpad
p8751
(dp8752
g138
(lp8753
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8754
tp8755
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p8756
tp8757
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8758
tp8759
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8760
tp8761
asbsg154
(lp8762
g8745
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8763
(dp8764
g138
(lp8765
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8766
tp8767
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8768
tp8769
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8770
tp8771
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8772
tp8773
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8774
(dp8775
g138
(lp8776
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8777
tp8778
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p8779
tp8780
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8781
tp8782
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8783
tp8784
asbsg154
(lp8785
g8738
asg156
g0
(g762
g2
Ntp8786
Rp8787
(dp8788
g766
(g1399
(Ng767
(g745
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p8789
tp8790
Rp8791
Ntp8792
Rp8793
tp8794
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8795
(dp8796
bsg59
g0
(g60
g2
Ntp8797
Rp8798
(dp8799
g64
(I00
tp8800
sg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8801
Rp8802
(dp8803
g12
g0
(g13
g2
Ntp8804
Rp8805
(dp8806
g17
(lp8807
g0
(g8
g2
Ntp8808
Rp8809
(dp8810
g12
g0
(g13
g2
Ntp8811
Rp8812
(dp8813
g17
(lp8814
g85
asg55
(itheano.gof.utils
scratchpad
p8815
(dp8816
g138
(lp8817
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8818
tp8819
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p8820
tp8821
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8822
tp8823
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8824
tp8825
asbsg154
(lp8826
g8809
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8827
(dp8828
g138
(lp8829
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8830
tp8831
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8832
tp8833
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8834
tp8835
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8836
tp8837
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8838
(dp8839
g138
(lp8840
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8841
tp8842
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p8843
tp8844
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8845
tp8846
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8847
tp8848
asbsg154
(lp8849
g8802
asg156
g0
(g762
g2
Ntp8850
Rp8851
(dp8852
g766
(g1399
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8853
tp8854
Rp8855
NNtp8856
Rp8857
tp8858
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8859
(dp8860
bsg59
g0
(g60
g2
Ntp8861
Rp8862
(dp8863
g64
(I00
tp8864
sg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8865
(dp8866
g138
(lp8867
(g7906
I90
g7907
S'transition_tensor = T.tensordot(X, self.WT, 1)'
p8868
tp8869
a(g711
I4848
g712
S'outshape = concatenate([a.shape[:a.ndim - axes], b.shape[axes:]])'
p8870
tp8871
a(g1483
I3705
g1484
S'return join(axis, *tensor_list)'
p8872
tp8873
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8874
tp8875
asbsg154
(lp8876
g8731
asg156
g1492
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8877
(dp8878
bsg59
g0
(g60
g2
Ntp8879
Rp8880
(dp8881
g64
(I00
tp8882
sg65
S'int64'
p8883
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8884
(dp8885
g138
(lp8886
(g711
I4864
g712
S'return _dot(a_reshaped, b_reshaped).reshape(outshape, outndim)'
p8887
tp8888
a(g945
I297
g946
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
p8889
tp8890
a(g949
I3958
g946
S'rval = op(x, newshape)'
p8891
tp8892
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8893
tp8894
asbsg154
(lp8895
g7996
asg156
g0
(g955
g2
Ntp8896
Rp8897
(dp8898
g959
I4
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8899
(dp8900
bsg59
g0
(g60
g2
Ntp8901
Rp8902
(dp8903
g64
(I00
I00
I00
I00
tp8904
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8905
(dp8906
g138
(lp8907
(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p8908
tp8909
a(g1527
I505
g1528
S"nw_seq = seq['input'][offset + k - mintap:]"
p8910
tp8911
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8912
tp8913
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8914
tp8915
asbsg154
(lp8916
g7989
asg156
g0
(g762
g2
Ntp8917
Rp8918
(dp8919
g766
(g1399
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8920
tp8921
Rp8922
NNtp8923
Rp8924
tp8925
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8926
(dp8927
bsg59
g0
(g60
g2
Ntp8928
Rp8929
(dp8930
g64
(I00
I00
I00
I00
tp8931
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8932
(dp8933
g138
(lp8934
(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p8935
tp8936
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p8937
tp8938
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8939
tp8940
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8941
tp8942
asbsg154
(lp8943
g7982
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8944
(dp8945
g138
(lp8946
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8947
tp8948
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p8949
tp8950
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p8951
tp8952
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p8953
tp8954
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p8955
(dp8956
g138
(lp8957
(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p8958
tp8959
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p8960
tp8961
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p8962
tp8963
a(g144
I401
g145
S'self.add_tag_trace(node)'
p8964
tp8965
asbsg154
(lp8966
g7975
asg156
g0
(g762
g2
Ntp8967
Rp8968
(dp8969
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8970
tp8971
Rp8972
tp8973
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p8974
(dp8975
bsg59
g0
(g60
g2
Ntp8976
Rp8977
(dp8978
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp8979
Rp8980
(dp8981
g12
g0
(g13
g2
Ntp8982
Rp8983
(dp8984
g17
(lp8985
g7989
ag0
(g1605
g2
Ntp8986
Rp8987
(dp8988
g12
g0
(g13
g2
Ntp8989
Rp8990
(dp8991
g17
(lp8992
g7975
asg55
(itheano.gof.utils
scratchpad
p8993
(dp8994
g138
(lp8995
(g1616
I384
g149
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p8996
tp8997
a(g1619
I384
g1620
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p8998
tp8999
a(g1623
I374
g1624
S'return theano.tensor.scalar_from_tensor(a)'
p9000
tp9001
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9002
tp9003
asbsg154
(lp9004
g8987
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9005
(dp9006
bsg59
g0
(g1636
g2
Ntp9007
Rp9008
(dp9009
g65
g742
sbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9010
(dp9011
g138
(lp9012
(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p9013
tp9014
a(g1527
I546
g1528
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p9015
tp9016
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9017
tp9018
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9019
tp9020
asbsg154
(lp9021
g8980
asg156
g0
(g762
g2
Ntp9022
Rp9023
(dp9024
g766
(g1399
(Ng0
(g1636
g2
Ntp9025
Rp9026
(dp9027
g65
g742
sbNtp9028
Rp9029
tp9030
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9031
(dp9032
bsg59
g0
(g60
g2
Ntp9033
Rp9034
(dp9035
g64
(I00
I00
I00
I00
tp9036
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag7975
asg55
(itheano.gof.utils
scratchpad
p9037
(dp9038
g138
(lp9039
(g187
I76
g188
S'self.functions_minibatch()'
p9040
tp9041
a(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p9042
tp9043
a(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p9044
tp9045
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9046
tp9047
asbsg154
(lp9048
g7968
asg156
g0
(g2057
g2
Ntp9049
Rp9050
(dp9051
g529
I00
sg17
(lp9052
g0
(g8
g2
Ntp9053
Rp9054
(dp9055
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p9056
(dp9057
g138
(lp9058
(g187
I76
g188
S'self.functions_minibatch()'
p9059
tp9060
a(g7906
I112
g7907
S'F, _ = theano.scan(one_sample, sequences=transition_tensor)'
p9061
tp9062
a(g1527
I465
g1528
S'nw_slice = _seq_val_slice.type()'
p9063
tp9064
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9065
tp9066
asbsg59
g0
(g60
g2
Ntp9067
Rp9068
(dp9069
g64
(I00
I00
I00
tp9070
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg2101
(lp9071
sg2104
I0
sg2105
I-6661740954964881640
sg154
(lp9072
g0
(g8
g2
Ntp9073
Rp9074
(dp9075
g12
g0
(g13
g2
Ntp9076
Rp9077
(dp9078
g17
(lp9079
g0
(g8
g2
Ntp9080
Rp9081
(dp9082
g12
g0
(g13
g2
Ntp9083
Rp9084
(dp9085
g17
(lp9086
g0
(g8
g2
Ntp9087
Rp9088
(dp9089
g12
g0
(g13
g2
Ntp9090
Rp9091
(dp9092
g17
(lp9093
g0
(g8
g2
Ntp9094
Rp9095
(dp9096
g12
g0
(g13
g2
Ntp9097
Rp9098
(dp9099
g17
(lp9100
g0
(g8
g2
Ntp9101
Rp9102
(dp9103
g12
g0
(g13
g2
Ntp9104
Rp9105
(dp9106
g17
(lp9107
g0
(g8
g2
Ntp9108
Rp9109
(dp9110
g12
g0
(g13
g2
Ntp9111
Rp9112
(dp9113
g17
(lp9114
g9054
asg55
(itheano.gof.utils
scratchpad
p9115
(dp9116
g138
(lp9117
(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p9118
I108
S'one_sample'
p9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9120
tp9121
a(g1527
I505
g1528
S"nw_seq = seq['input'][offset + k - mintap:]"
p9122
tp9123
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9124
tp9125
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9126
tp9127
asbsg154
(lp9128
g9109
asg156
g0
(g762
g2
Ntp9129
Rp9130
(dp9131
g766
(g1399
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9132
tp9133
Rp9134
NNtp9135
Rp9136
tp9137
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9138
(dp9139
bsg59
g0
(g60
g2
Ntp9140
Rp9141
(dp9142
g64
(I00
I00
I00
tp9143
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9144
(dp9145
g138
(lp9146
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9147
tp9148
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p9149
tp9150
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9151
tp9152
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9153
tp9154
asbsg154
(lp9155
g9102
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9156
(dp9157
g138
(lp9158
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9159
tp9160
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9161
tp9162
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p9163
tp9164
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9165
tp9166
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9167
(dp9168
g138
(lp9169
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9170
tp9171
a(g1527
I518
g1528
S'lengths_vec.append(seq.shape[0])'
p9172
tp9173
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9174
tp9175
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9176
tp9177
asbsg154
(lp9178
g9095
asg156
g0
(g762
g2
Ntp9179
Rp9180
(dp9181
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9182
tp9183
Rp9184
tp9185
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9186
(dp9187
bsg59
g0
(g60
g2
Ntp9188
Rp9189
(dp9190
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp9191
Rp9192
(dp9193
g12
g0
(g13
g2
Ntp9194
Rp9195
(dp9196
g17
(lp9197
g9109
ag0
(g1605
g2
Ntp9198
Rp9199
(dp9200
g12
g0
(g13
g2
Ntp9201
Rp9202
(dp9203
g17
(lp9204
g9095
asg55
(itheano.gof.utils
scratchpad
p9205
(dp9206
g138
(lp9207
(g1616
I384
g149
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p9208
tp9209
a(g1619
I384
g1620
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p9210
tp9211
a(g1623
I374
g1624
S'return theano.tensor.scalar_from_tensor(a)'
p9212
tp9213
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9214
tp9215
asbsg154
(lp9216
g9199
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9217
(dp9218
bsg59
g0
(g1636
g2
Ntp9219
Rp9220
(dp9221
g65
g742
sbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9222
(dp9223
g138
(lp9224
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9225
tp9226
a(g1527
I546
g1528
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p9227
tp9228
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9229
tp9230
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9231
tp9232
asbsg154
(lp9233
g9192
asg156
g0
(g762
g2
Ntp9234
Rp9235
(dp9236
g766
(g1399
(Ng0
(g1636
g2
Ntp9237
Rp9238
(dp9239
g65
g742
sbNtp9240
Rp9241
tp9242
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9243
(dp9244
bsg59
g0
(g60
g2
Ntp9245
Rp9246
(dp9247
g64
(I00
I00
I00
tp9248
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp9249
Rp9250
(dp9251
g12
g0
(g13
g2
Ntp9252
Rp9253
(dp9254
g17
(lp9255
g0
(g8
g2
Ntp9256
Rp9257
(dp9258
g12
g0
(g13
g2
Ntp9259
Rp9260
(dp9261
g17
(lp9262
g1682
ag0
(g8
g2
Ntp9263
Rp9264
(dp9265
g12
g0
(g13
g2
Ntp9266
Rp9267
(dp9268
g17
(lp9269
g9095
ag0
(g8
g2
Ntp9270
Rp9271
(dp9272
g12
g0
(g13
g2
Ntp9273
Rp9274
(dp9275
g17
(lp9276
g0
(g8
g2
Ntp9277
Rp9278
(dp9279
g12
g0
(g13
g2
Ntp9280
Rp9281
(dp9282
g17
(lp9283
g0
(g8
g2
Ntp9284
Rp9285
(dp9286
g12
g0
(g13
g2
Ntp9287
Rp9288
(dp9289
g17
(lp9290
g0
(g8
g2
Ntp9291
Rp9292
(dp9293
g12
g0
(g13
g2
Ntp9294
Rp9295
(dp9296
g17
(lp9297
g0
(g33
g2
Ntp9298
Rp9299
(dp9300
g37
Nsg55
(itheano.gof.utils
scratchpad
p9301
(dp9302
g58
Nsbsg59
g0
(g60
g2
Ntp9303
Rp9304
(dp9305
g64
(I00
tp9306
sg65
S'float64'
p9307
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp9308
g44
tp9309
Rp9310
(I1
(I15
tp9311
g100
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
p9312
tp9313
bsbasg55
(itheano.gof.utils
scratchpad
p9314
(dp9315
g138
(lp9316
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9317
tp9318
a(g1527
I619
g1528
S'tensor.shape_padleft(actual_arg), 0),'
p9319
tp9320
a(g1753
I3636
g1754
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p9321
tp9322
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9323
tp9324
asbsg154
(lp9325
g9292
asg156
g0
(g157
g2
Ntp9326
Rp9327
(dp9328
g161
(lp9329
sg163
(lp9330
I0
asg165
(lp9331
I0
asg167
g9306
sg168
I00
sg169
(g170
I0
tp9332
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9333
(dp9334
bsg59
g0
(g60
g2
Ntp9335
Rp9336
(dp9337
g64
(I01
I00
tp9338
sg65
g9307
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9339
(dp9340
g138
(lp9341
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9342
tp9343
a(g1527
I619
g1528
S'tensor.shape_padleft(actual_arg), 0),'
p9344
tp9345
a(g1780
I3339
g1781
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p9346
tp9347
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9348
tp9349
asbsg154
(lp9350
g9285
asg156
g0
(g1787
g2
Ntp9351
Rp9352
(dp9353
g172
g173
sg262
(dp9354
I0
I00
ssbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9355
(dp9356
g138
(lp9357
(g1780
I3339
g1781
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p9358
tp9359
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9360
tp9361
a(g1799
I3284
g149
S'return Apply(self, [x], [t()])'
p9362
tp9363
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9364
tp9365
asbsg59
g0
(g60
g2
Ntp9366
Rp9367
(dp9368
g64
(I00
I00
tp9369
sg65
g9307
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9370
(dp9371
g138
(lp9372
(g1527
I620
g1528
S'actual_n_steps'
p9373
tp9374
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p9375
tp9376
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9377
tp9378
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9379
tp9380
asbsg154
(lp9381
g9278
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9382
(dp9383
g138
(lp9384
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9385
tp9386
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9387
tp9388
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p9389
tp9390
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9391
tp9392
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9393
(dp9394
g138
(lp9395
(g1527
I620
g1528
S'actual_n_steps'
p9396
tp9397
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p9398
tp9399
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9400
tp9401
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9402
tp9403
asbsg154
(lp9404
g9271
asg156
g0
(g762
g2
Ntp9405
Rp9406
(dp9407
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9408
tp9409
Rp9410
tp9411
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9412
(dp9413
bsg59
g0
(g60
g2
Ntp9414
Rp9415
(dp9416
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9417
(dp9418
g138
(lp9419
(g1527
I620
g1528
S'actual_n_steps'
p9420
tp9421
a(g1813
I364
g1814
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p9422
tp9423
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p9424
tp9425
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9426
tp9427
asbsg154
(lp9428
g9264
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9429
(dp9430
g138
(lp9431
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p9432
tp9433
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9434
tp9435
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9436
tp9437
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9438
tp9439
asbsg59
g0
(g60
g2
Ntp9440
Rp9441
(dp9442
g64
(tsg65
S'int64'
p9443
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp9444
Rp9445
(dp9446
g12
g0
(g13
g2
Ntp9447
Rp9448
(dp9449
g17
(lp9450
g0
(g8
g2
Ntp9451
Rp9452
(dp9453
g12
g0
(g13
g2
Ntp9454
Rp9455
(dp9456
g17
(lp9457
g9285
asg55
(itheano.gof.utils
scratchpad
p9458
(dp9459
g138
(lp9460
(g1527
I620
g1528
S'actual_n_steps'
p9461
tp9462
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p9463
tp9464
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9465
tp9466
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9467
tp9468
asbsg154
(lp9469
g9452
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9470
(dp9471
g138
(lp9472
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9473
tp9474
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9475
tp9476
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p9477
tp9478
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9479
tp9480
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9481
(dp9482
g138
(lp9483
(g1527
I620
g1528
S'actual_n_steps'
p9484
tp9485
a(g1813
I363
g1814
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p9486
tp9487
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9488
tp9489
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9490
tp9491
asbsg154
(lp9492
g9445
asg156
g0
(g762
g2
Ntp9493
Rp9494
(dp9495
g766
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p9496
tp9497
Rp9498
tp9499
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9500
(dp9501
bsg59
g0
(g60
g2
Ntp9502
Rp9503
(dp9504
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9505
(dp9506
g138
(lp9507
(g1813
I366
g1814
S'dtype=tensor_var.dtype)'
p9508
tp9509
a(g1950
I2090
g1951
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p9510
tp9511
a(g1954
I2608
g145
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p9512
tp9513
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9514
tp9515
asbsg154
(lp9516
g9257
asg156
g1962
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9517
(dp9518
g138
(lp9519
(g1954
I2608
g145
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p9520
tp9521
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9522
tp9523
a(g1971
I2494
g149
S'return gof.Apply(self, ([v] + sh), [otype()])'
p9524
tp9525
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9526
tp9527
asbsg59
g0
(g60
g2
Ntp9528
Rp9529
(dp9530
g64
(I00
I00
tp9531
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag9285
ag0
(g1605
g2
Ntp9532
Rp9533
(dp9534
g12
g0
(g13
g2
Ntp9535
Rp9536
(dp9537
g17
(lp9538
g9271
asg55
(itheano.gof.utils
scratchpad
p9539
(dp9540
g138
(lp9541
(g1616
I384
g149
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p9542
tp9543
a(g1619
I384
g1620
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p9544
tp9545
a(g1623
I374
g1624
S'return theano.tensor.scalar_from_tensor(a)'
p9546
tp9547
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9548
tp9549
asbsg154
(lp9550
g9533
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9551
(dp9552
bsg59
g0
(g1636
g2
Ntp9553
Rp9554
(dp9555
g65
g742
sbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9556
(dp9557
g138
(lp9558
(g1813
I367
g1814
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p9559
tp9560
a(g2009
I904
g2010
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p9561
tp9562
a(g2013
I957
g2014
S'return the_op(real_x, y, *real_idxargs)'
p9563
tp9564
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9565
tp9566
asbsg154
(lp9567
g9250
asg156
g0
(g2020
g2
Ntp9568
Rp9569
(dp9570
g766
(lp9571
g1399
(Ng0
(g1636
g2
Ntp9572
Rp9573
(dp9574
g65
g742
sbNtp9575
Rp9576
asg2030
(lp9577
sg172
g173
sg2032
I01
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9578
(dp9579
g138
(lp9580
(g2013
I957
g2014
S'return the_op(real_x, y, *real_idxargs)'
p9581
tp9582
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9583
tp9584
a(g2040
I1109
g149
S'[x.type()])'
p9585
tp9586
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9587
tp9588
asbsg59
g9529
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9589
(dp9590
g138
(lp9591
(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p9592
tp9593
a(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9594
tp9595
a(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p9596
tp9597
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9598
tp9599
asbsg154
(lp9600
g9088
asg156
g0
(g2057
g2
Ntp9601
Rp9602
(dp9603
g529
I00
sg17
(lp9604
g0
(g8
g2
Ntp9605
Rp9606
(dp9607
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p9608
(dp9609
g138
(lp9610
(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p9611
tp9612
a(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9613
tp9614
a(g1527
I465
g1528
S'nw_slice = _seq_val_slice.type()'
p9615
tp9616
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9617
tp9618
asbsg59
g0
(g60
g2
Ntp9619
Rp9620
(dp9621
g64
(I00
I00
tp9622
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp9623
Rp9624
(dp9625
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p9626
(dp9627
g138
(lp9628
(g9118
I108
g9119
S'S, _ = theano.scan(recurrence, sequences=ex, outputs_info=state0)'
p9629
tp9630
a(g1527
I592
g1528
S"arg = safe_new(init_out['initial'])"
p9631
tp9632
a(g2090
I75
g2091
S'nw_x = x.type()'
p9633
tp9634
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9635
tp9636
asbsg59
g0
(g60
g2
Ntp9637
Rp9638
(dp9639
g64
(I00
tp9640
sg65
S'float64'
p9641
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg2101
(lp9642
(lp9643
I-1
aasg2104
I0
sg2105
I8870973979083989078
sg154
(lp9644
g0
(g8
g2
Ntp9645
Rp9646
(dp9647
g12
g0
(g13
g2
Ntp9648
Rp9649
(dp9650
g17
(lp9651
g9624
ag0
(g8
g2
Ntp9652
Rp9653
(dp9654
g12
g0
(g13
g2
Ntp9655
Rp9656
(dp9657
g17
(lp9658
g9606
ag0
(g8
g2
Ntp9659
Rp9660
(dp9661
g12
g0
(g13
g2
Ntp9662
Rp9663
(dp9664
g17
(lp9665
g0
(g8
g2
Ntp9666
Rp9667
(dp9668
g12
g0
(g13
g2
Ntp9669
Rp9670
(dp9671
g17
(lp9672
g9606
asg55
(itheano.gof.utils
scratchpad
p9673
(dp9674
g138
(lp9675
(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p9676
tp9677
a(S'/Users/ankitkumar/Documents/projects/dfa/models.py'
p9678
I104
g2129
S'pdist = T_t / T.sum(T_t,axis=1,keepdims=True)'
p9679
tp9680
a(g246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p9681
tp9682
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9683
tp9684
asbsg154
(lp9685
g9667
asg156
g0
(g252
g2
Ntp9686
Rp9687
(dp9688
g256
g8729
sg65
g8729
sg172
g173
sg202
g259
sg262
(I1
tp9689
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9690
(dp9691
g138
(lp9692
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9693
tp9694
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p9695
tp9696
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p9697
tp9698
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9699
tp9700
asbsg59
g0
(g60
g2
Ntp9701
Rp9702
(dp9703
g64
(I00
tp9704
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9705
(dp9706
g138
(lp9707
(g9678
I104
g2129
S'pdist = T_t / T.sum(T_t,axis=1,keepdims=True)'
p9708
tp9709
a(g246
I2673
g243
S'out = makeKeepDims(input, out, axis)'
p9710
tp9711
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p9712
I1543
S'makeKeepDims'
p9713
S'return DimShuffle(y.type.broadcastable, new_dims)(y)'
p9714
tp9715
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9716
tp9717
asbsg154
(lp9718
g9660
asg156
g0
(g157
g2
Ntp9719
Rp9720
(dp9721
g161
(lp9722
sg163
(lp9723
I0
asg165
(lp9724
I1
asg167
g9704
sg168
I00
sg169
(I0
g170
tp9725
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9726
(dp9727
bsg59
g0
(g60
g2
Ntp9728
Rp9729
(dp9730
g64
(I00
I01
tp9731
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9732
(dp9733
g138
(lp9734
(g9678
I104
g2129
S'pdist = T_t / T.sum(T_t,axis=1,keepdims=True)'
p9735
tp9736
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p9737
I152
S'__div__'
p9738
S'return theano.tensor.basic.div_proxy(self, other)'
p9739
tp9740
a(g6018
I2948
g6019
S'return f(x, y)'
p9741
tp9742
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9743
tp9744
asbsg154
(lp9745
g9653
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9746
(dp9747
g138
(lp9748
(g6018
I2948
g6019
S'return f(x, y)'
p9749
tp9750
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9751
tp9752
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9753
tp9754
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9755
tp9756
asbsg59
g0
(g60
g2
Ntp9757
Rp9758
(dp9759
g64
(I00
I00
tp9760
sg65
S'float64'
p9761
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9762
(dp9763
g138
(lp9764
(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p9765
tp9766
a(g9678
I105
g2129
S's_t = T.dot(s_tm1,pdist) # TODO: prob dist'
p9767
tp9768
a(g2162
I4732
g2155
S'return _dot(a, b)'
p9769
tp9770
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9771
tp9772
asbsg154
(lp9773
g9646
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9774
(dp9775
bsg59
g0
(g60
g2
Ntp9776
Rp9777
(dp9778
g64
(I00
tp9779
sg65
S'float64'
p9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg2175
I2
sg2176
(lp9781
I00
asg211
g2178
((lp9782
tp9783
Rp9784
sg2182
I0
sg2183
I1
sg2184
(lp9785
g767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p9786
tp9787
Rp9788
asg2189
I1
sg2190
I3
sg172
I00
sg2191
I00
sS'fn'
p9789
g526
(g527
((dp9790
g529
Nsg530
g531
sg532
I00
sg17
(lp9791
g0
(g534
g2
Ntp9792
Rp9793
(dp9794
g38
Nsg538
Nsg539
Nsg540
I01
sg105
I00
sg541
I00
sg542
I00
sg543
g9606
sg567
I00
sg112
Nsbag0
(g534
g2
Ntp9795
Rp9796
(dp9797
g38
Nsg538
Nsg539
Nsg540
I01
sg105
I00
sg541
I00
sg542
I00
sg543
g9624
sg567
I00
sg112
Nsbasg154
(lp9798
g0
(g597
g2
Ntp9799
Rp9800
(dp9801
g543
g0
(g8
g2
Ntp9802
Rp9803
(dp9804
g12
g0
(g13
g2
Ntp9805
Rp9806
(dp9807
g17
(lp9808
g9624
ag0
(g8
g2
Ntp9809
Rp9810
(dp9811
g12
g0
(g13
g2
Ntp9812
Rp9813
(dp9814
g17
(lp9815
g9606
ag0
(g8
g2
Ntp9816
Rp9817
(dp9818
g12
g0
(g13
g2
Ntp9819
Rp9820
(dp9821
g17
(lp9822
g0
(g8
g2
Ntp9823
Rp9824
(dp9825
g12
g0
(g13
g2
Ntp9826
Rp9827
(dp9828
g17
(lp9829
g9606
asg55
(itheano.gof.utils
scratchpad
p9830
(dp9831
g138
g9675
sbsg154
(lp9832
g9824
asg156
g9687
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9833
(dp9834
g138
g9692
sbsg59
g9702
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9835
(dp9836
g138
g9707
sbsg154
(lp9837
g9817
asg156
g9720
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9838
(dp9839
bsg59
g9729
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9840
(dp9841
g138
g9734
sbsg154
(lp9842
g9810
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9843
(dp9844
g138
g9748
sbsg59
g9758
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9845
(dp9846
g138
g9764
sbsg154
(lp9847
g9803
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9848
(dp9849
bsg59
g9777
sg38
Nsbsg540
I00
sbasg2242
g2198
stp9850
Rp9851
(lp9852
g0
(g88
g2
Ntp9853
Rp9854
(dp9855
g2762
I0
sg38
Nsg2763
I01
sg92
(lp9856
Nasg541
I00
sg105
I00
sg106
I00
sg59
g9620
sg112
Nsbag0
(g88
g2
Ntp9857
Rp9858
(dp9859
g2762
I0
sg38
Nsg2763
I01
sg92
(lp9860
Nasg541
I00
sg105
I00
sg106
I00
sg59
g9638
sg112
Nsba(lp9861
NaNatp9862
Rp9863
sg2192
I-1
sg2193
I1
sg38
g2194
sg2195
g2198
sg2223
g2178
((lp9864
(lp9865
g2101
ag9642
aa(lp9866
g2193
aI1
aa(lp9867
g2104
aI0
aa(lp9868
g2229
aI0
aa(lp9869
g2231
a(lp9870
aa(lp9871
g2234
aI0
aa(lp9872
g2189
aI1
aa(lp9873
g2237
aI0
aa(lp9874
g2182
aI0
aa(lp9875
g2192
aI-1
aa(lp9876
g38
ag2194
aa(lp9877
g2242
aNaa(lp9878
g211
ag9784
aa(lp9879
g2245
aI00
aa(lp9880
g2191
aI00
aa(lp9881
g529
aI00
aatp9882
Rp9883
sg2250
((t(g2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p9884
S'md5:f52f5718bd2358862745753c2c77eac4'
p9885
(g9687
((g9620
((I-1
I0
tp9886
I00
tp9887
tp9888
tp9889
(I1
(I00
tp9890
tp9891
tp9892
(g9720
((g9702
((I0
I0
tp9893
I00
tp9894
tp9895
tp9896
(I1
(I00
tp9897
tp9898
tp9899
(g6026
((g9620
(g9886
I00
tp9900
tp9901
(g9729
((I1
I0
tp9902
I00
tp9903
tp9904
tp9905
(I1
(I00
tp9906
tp9907
tp9908
(g1331
((g9638
((I-1
I1
tp9909
I00
tp9910
tp9911
(g9758
((I2
I0
tp9912
I00
tp9913
tp9914
tp9915
(I1
(I00
tp9916
tp9917
tp9918
tp9919
tp9920
sg2234
I0
sg2273
(lp9921
I00
asg2275
I0
sg2237
I0
sg2242
Nsg2276
(lp9922
g0
(g60
g2
Ntp9923
Rp9924
(dp9925
g64
(I00
I00
tp9926
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbasg2245
I00
sg2229
I0
sg2282
I3
sg2231
g9870
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9927
(dp9928
g138
(lp9929
(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p9930
tp9931
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p9932
tp9933
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p9934
tp9935
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p9936
tp9937
asbsg59
g9924
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9938
(dp9939
g138
(lp9940
(g1527
I1044
g1528
S'offsets)'
p9941
tp9942
a(g2300
I1029
g2301
S'out_ls.append(out[offsets[idx]:])'
p9943
tp9944
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9945
tp9946
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9947
tp9948
asbsg154
(lp9949
g9081
asg156
g0
(g762
g2
Ntp9950
Rp9951
(dp9952
g766
(g1399
(g767
(g745
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p9953
tp9954
Rp9955
NNtp9956
Rp9957
tp9958
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9959
(dp9960
bsg59
g0
(g60
g2
Ntp9961
Rp9962
(dp9963
g64
(I00
I00
tp9964
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p9965
(dp9966
g138
(lp9967
(g1527
I732
g1528
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p9968
tp9969
a(g9118
I109
g9119
S'Sfinal = S[-1]'
p9970
tp9971
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p9972
tp9973
a(g144
I401
g145
S'self.add_tag_trace(node)'
p9974
tp9975
asbsg154
(lp9976
g9074
asg156
g0
(g762
g2
Ntp9977
Rp9978
(dp9979
g766
(g767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p9980
tp9981
Rp9982
tp9983
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p9984
(dp9985
bsg59
g0
(g60
g2
Ntp9986
Rp9987
(dp9988
g64
(I00
tp9989
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg2175
I2
sg2176
(lp9990
I00
asg211
g2178
((lp9991
tp9992
Rp9993
sg2182
I1
sg2183
I0
sg2184
(lp9994
I0
asg2189
I0
sg2190
I2
sg2191
I00
sg2192
I-1
sg2193
I1
sg38
g2194
sg2195
g2198
sg2223
g2178
((lp9995
(lp9996
g2101
ag9071
aa(lp9997
g2193
aI1
aa(lp9998
g2104
aI0
aa(lp9999
g2229
aI0
aa(lp10000
g2231
a(lp10001
aa(lp10002
g2234
aI0
aa(lp10003
g2189
aI0
aa(lp10004
g2237
aI0
aa(lp10005
g2182
aI1
aa(lp10006
g2192
aI-1
aa(lp10007
g38
ag2194
aa(lp10008
g2242
aNaa(lp10009
g211
ag9993
aa(lp10010
g2245
aI00
aa(lp10011
g2191
aI00
aa(lp10012
g529
aI00
aatp10013
Rp10014
sg2250
((t(g2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p10015
S'md5:f52f5718bd2358862745753c2c77eac4'
p10016
(g9327
((g9304
((S'fbd04d8dd670512e8deec742bc5d4e68'
p10017
I0
I0
tp10018
I00
tp10019
tp10020
tp10021
(I1
(I00
tp10022
tp10023
tp10024
(g9130
((g9068
((I-1
I0
tp10025
I00
tp10026
tp10027
tp10028
(I1
(I00
tp10029
tp10030
tp10031
(g9352
((g9336
((I0
I0
tp10032
I00
tp10033
tp10034
tp10035
(I1
(I00
tp10036
tp10037
tp10038
(g724
((g9141
((I1
I0
tp10039
I00
tp10040
tp10041
tp10042
(I1
(I00
tp10043
tp10044
tp10045
(g724
((g9367
((I2
I0
tp10046
I00
tp10047
tp10048
tp10049
(I1
(I00
tp10050
tp10051
tp10052
(g724
((g9367
((I2
I0
tp10053
I00
tp10054
tp10055
tp10056
(I1
(I00
tp10057
tp10058
tp10059
(g9180
((g739
((I3
I0
tp10060
I00
tp10061
tp10062
tp10063
(I1
(I00
tp10064
tp10065
tp10066
(g9406
((g739
((I4
I0
tp10067
I00
tp10068
tp10069
tp10070
(I1
(I00
tp10071
tp10072
tp10073
(g9494
((g739
((I5
I0
tp10074
I00
tp10075
tp10076
tp10077
(I1
(I00
tp10078
tp10079
tp10080
(g1632
((g9189
((I6
I0
tp10081
I00
tp10082
tp10083
tp10084
(I1
(I00
tp10085
tp10086
tp10087
(g1632
((g9415
((I7
I0
tp10088
I00
tp10089
tp10090
tp10091
(I1
(I00
tp10092
tp10093
tp10094
(g294
((g9189
((I6
I0
tp10095
I00
tp10096
tp10097
(g9415
((I7
I0
tp10098
I00
tp10099
tp10100
tp10101
(I1
(I00
tp10102
tp10103
tp10104
(g9235
((g9141
((I1
I0
tp10105
I00
tp10106
tp10107
(g9220
((I9
I0
tp10108
I00
tp10109
tp10110
tp10111
(I1
(I00
tp10112
tp10113
tp10114
(g1962
((g1692
((S'cadb96a860b013000395892128a8c55c'
p10115
I13
I0
tp10116
I00
tp10117
tp10118
(g9441
((I11
I0
tp10119
I00
tp10120
tp10121
(g9503
((I8
I0
tp10122
I00
tp10123
tp10124
tp10125
(I1
(I00
tp10126
tp10127
tp10128
(g9569
((g9529
((I13
I0
tp10129
I00
tp10130
tp10131
(g9367
((I2
I0
tp10132
I00
tp10133
tp10134
(g9554
((I10
I0
tp10135
I00
tp10136
tp10137
tp10138
(I1
(I00
tp10139
tp10140
tp10141
(g9602
((g9189
((I6
I0
tp10142
I00
tp10143
tp10144
(g9246
((I12
I0
tp10145
I00
tp10146
tp10147
(g9529
((I14
I0
tp10148
I00
tp10149
tp10150
tp10151
(I1
(I00
tp10152
tp10153
tp10154
(g9951
((g9924
((I15
I0
tp10155
I00
tp10156
tp10157
tp10158
(I1
(I00
tp10159
tp10160
tp10161
(g9978
((g9962
((I16
I0
tp10162
I00
tp10163
tp10164
tp10165
(I1
(I00
tp10166
tp10167
tp10168
tp10169
tp10170
sg2234
I0
sg2273
(lp10171
I00
asg2275
I0
sg2237
I0
sg2242
Nsg2276
(lp10172
g0
(g60
g2
Ntp10173
Rp10174
(dp10175
g64
(I00
I00
tp10176
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbasg2245
I00
sg2229
I0
sg2282
I2
sg2231
g10001
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10177
(dp10178
g138
(lp10179
(g1527
I1007
g1528
S'scan_outs = local_op(*scan_inputs)'
p10180
tp10181
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10182
tp10183
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p10184
tp10185
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10186
tp10187
asbsg59
g10174
sg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p10188
(dp10189
g138
(lp10190
(g2154
I142
g2155
S'rval = l.__dot__(r)'
p10191
tp10192
a(g2158
I441
g2159
S'return theano.tensor.basic.dot(left, right)'
p10193
tp10194
a(g2162
I4732
g2155
S'return _dot(a, b)'
p10195
tp10196
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10197
tp10198
asbsg154
(lp10199
g7961
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10200
(dp10201
bsg59
g0
(g60
g2
Ntp10202
Rp10203
(dp10204
g64
(I00
tp10205
sg65
S'float64'
p10206
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10207
(dp10208
g138
(lp10209
(g183
I6
g184
S'dfa= theanoDFA(15,len(total),init=2)'
p10210
tp10211
a(g187
I76
g188
S'self.functions_minibatch()'
p10212
tp10213
a(g7906
I117
g7907
S'O = T.nnet.sigmoid(theano.dot(F, self.state_definition))'
p10214
tp10215
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10216
tp10217
asbsg154
(lp10218
g7954
asg156
g2380
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10219
(dp10220
g138
(lp10221
(g7906
I117
g7907
S'O = T.nnet.sigmoid(theano.dot(F, self.state_definition))'
p10222
tp10223
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10224
tp10225
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10226
tp10227
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10228
tp10229
asbsg59
g0
(g60
g2
Ntp10230
Rp10231
(dp10232
g64
(I00
tp10233
sg65
S'float64'
p10234
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg540
I00
sbag0
(g597
g2
Ntp10235
Rp10236
(dp10237
g543
g7968
sg540
I00
sbag0
(g597
g2
Ntp10238
Rp10239
(dp10240
g543
g0
(g8
g2
Ntp10241
Rp10242
(dp10243
g12
g0
(g13
g2
Ntp10244
Rp10245
(dp10246
g17
(lp10247
g0
(g8
g2
Ntp10248
Rp10249
(dp10250
g12
g0
(g13
g2
Ntp10251
Rp10252
(dp10253
g17
(lp10254
g0
(g8
g2
Ntp10255
Rp10256
(dp10257
g12
g0
(g13
g2
Ntp10258
Rp10259
(dp10260
g17
(lp10261
g0
(g8
g2
Ntp10262
Rp10263
(dp10264
g12
g0
(g13
g2
Ntp10265
Rp10266
(dp10267
g17
(lp10268
g0
(g8
g2
Ntp10269
Rp10270
(dp10271
g12
g0
(g13
g2
Ntp10272
Rp10273
(dp10274
g17
(lp10275
g0
(g8
g2
Ntp10276
Rp10277
(dp10278
g12
g0
(g13
g2
Ntp10279
Rp10280
(dp10281
g17
(lp10282
g7924
ag0
(g8
g2
Ntp10283
Rp10284
(dp10285
g12
g0
(g13
g2
Ntp10286
Rp10287
(dp10288
g17
(lp10289
g7954
asg55
(itheano.gof.utils
scratchpad
p10290
(dp10291
g138
(lp10292
(g187
I76
g188
S'self.functions_minibatch()'
p10293
tp10294
a(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10295
tp10296
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10297
tp10298
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10299
tp10300
asbsg154
(lp10301
g10284
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10302
(dp10303
g138
(lp10304
(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10305
tp10306
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10307
tp10308
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10309
tp10310
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10311
tp10312
asbsg59
g0
(g60
g2
Ntp10313
Rp10314
(dp10315
g64
(I00
tp10316
sg65
S'float64'
p10317
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10318
(dp10319
g138
(lp10320
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10321
tp10322
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10323
tp10324
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p10325
tp10326
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10327
tp10328
asbsg154
(lp10329
g10277
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10330
(dp10331
g138
(lp10332
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p10333
tp10334
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10335
tp10336
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10337
tp10338
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10339
tp10340
asbsg59
g0
(g60
g2
Ntp10341
Rp10342
(dp10343
g64
(I00
tp10344
sg65
S'float64'
p10345
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp10346
Rp10347
(dp10348
g12
g0
(g13
g2
Ntp10349
Rp10350
(dp10351
g17
(lp10352
g0
(g8
g2
Ntp10353
Rp10354
(dp10355
g12
g0
(g13
g2
Ntp10356
Rp10357
(dp10358
g17
(lp10359
g0
(g8
g2
Ntp10360
Rp10361
(dp10362
g12
g0
(g13
g2
Ntp10363
Rp10364
(dp10365
g17
(lp10366
g2530
asg55
(itheano.gof.utils
scratchpad
p10367
(dp10368
g138
(lp10369
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10370
tp10371
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10372
tp10373
a(g148
I533
g149
S'inplace=False)(input))'
p10374
tp10375
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10376
tp10377
asbsg154
(lp10378
g10361
asg156
g0
(g157
g2
Ntp10379
Rp10380
(dp10381
g161
(lp10382
sg163
(lp10383
sg165
(lp10384
I0
asg167
(tsg168
I00
sg169
(g170
tp10385
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10386
(dp10387
bsg59
g0
(g60
g2
Ntp10388
Rp10389
(dp10390
g64
(I01
tp10391
sg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag7924
asg55
(itheano.gof.utils
scratchpad
p10392
(dp10393
g138
(lp10394
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10395
tp10396
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10397
tp10398
a(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10399
tp10400
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10401
tp10402
asbsg154
(lp10403
g10354
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10404
(dp10405
g138
(lp10406
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10407
tp10408
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10409
tp10410
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10411
tp10412
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10413
tp10414
asbsg59
g0
(g60
g2
Ntp10415
Rp10416
(dp10417
g64
(I00
tp10418
sg65
S'float64'
p10419
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp10420
Rp10421
(dp10422
g12
g0
(g13
g2
Ntp10423
Rp10424
(dp10425
g17
(lp10426
g0
(g8
g2
Ntp10427
Rp10428
(dp10429
g12
g0
(g13
g2
Ntp10430
Rp10431
(dp10432
g17
(lp10433
g0
(g8
g2
Ntp10434
Rp10435
(dp10436
g12
g0
(g13
g2
Ntp10437
Rp10438
(dp10439
g17
(lp10440
g2530
asg55
(itheano.gof.utils
scratchpad
p10441
(dp10442
g138
(lp10443
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10444
tp10445
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10446
tp10447
a(g148
I533
g149
S'inplace=False)(input))'
p10448
tp10449
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10450
tp10451
asbsg154
(lp10452
g10435
asg156
g0
(g157
g2
Ntp10453
Rp10454
(dp10455
g161
(lp10456
sg163
(lp10457
sg165
(lp10458
I0
asg167
(tsg168
I00
sg169
(g170
tp10459
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10460
(dp10461
bsg59
g0
(g60
g2
Ntp10462
Rp10463
(dp10464
g64
(I01
tp10465
sg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag7954
asg55
(itheano.gof.utils
scratchpad
p10466
(dp10467
g138
(lp10468
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10469
tp10470
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10471
tp10472
a(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10473
tp10474
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10475
tp10476
asbsg154
(lp10477
g10428
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10478
(dp10479
g138
(lp10480
(g2555
I216
g2556
S'return theano.tensor.basic.sub(other, self)'
p10481
tp10482
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10483
tp10484
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10485
tp10486
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10487
tp10488
asbsg59
g0
(g60
g2
Ntp10489
Rp10490
(dp10491
g64
(I00
tp10492
sg65
S'float64'
p10493
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10494
(dp10495
g138
(lp10496
(g187
I76
g188
S'self.functions_minibatch()'
p10497
tp10498
a(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10499
tp10500
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10501
tp10502
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10503
tp10504
asbsg154
(lp10505
g10421
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10506
(dp10507
g138
(lp10508
(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10509
tp10510
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10511
tp10512
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10513
tp10514
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10515
tp10516
asbsg59
g0
(g60
g2
Ntp10517
Rp10518
(dp10519
g64
(I00
tp10520
sg65
S'float64'
p10521
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10522
(dp10523
g138
(lp10524
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10525
tp10526
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10527
tp10528
a(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p10529
tp10530
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10531
tp10532
asbsg154
(lp10533
g10347
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10534
(dp10535
g138
(lp10536
(g489
I144
g490
S'return theano.tensor.mul(self, other)'
p10537
tp10538
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10539
tp10540
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10541
tp10542
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10543
tp10544
asbsg59
g0
(g60
g2
Ntp10545
Rp10546
(dp10547
g64
(I00
tp10548
sg65
S'float64'
p10549
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10550
(dp10551
g138
(lp10552
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10553
tp10554
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10555
tp10556
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p10557
tp10558
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10559
tp10560
asbsg154
(lp10561
g10270
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10562
(dp10563
g138
(lp10564
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p10565
tp10566
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10567
tp10568
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10569
tp10570
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10571
tp10572
asbsg59
g0
(g60
g2
Ntp10573
Rp10574
(dp10575
g64
(I00
tp10576
sg65
S'float64'
p10577
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10578
(dp10579
g138
(lp10580
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10581
tp10582
a(g2453
I1708
g2454
S'return -(target * tensor.log(output) + (1.0 - target) * tensor.log(1.0 - output))'
p10583
tp10584
a(g2720
I27
g2721
S'return theano.tensor.basic.neg(self)'
p10585
tp10586
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10587
tp10588
asbsg154
(lp10589
g10263
asg156
g2728
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10590
(dp10591
g138
(lp10592
(g2720
I27
g2721
S'return theano.tensor.basic.neg(self)'
p10593
tp10594
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10595
tp10596
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10597
tp10598
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10599
tp10600
asbsg59
g0
(g60
g2
Ntp10601
Rp10602
(dp10603
g64
(I00
tp10604
sg65
g10577
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10605
(dp10606
g138
(lp10607
(S'/usr/local/lib/python2.7/site-packages/theano/tensor/var.py'
p10608
I474
S'mean'
p10609
S'acc_dtype=acc_dtype)'
p10610
tp10611
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p10612
I2802
g10609
S'acc_dtype=acc_dtype)'
p10613
tp10614
a(g246
I2670
g243
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p10615
tp10616
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10617
tp10618
asbsg154
(lp10619
g10256
asg156
g0
(g252
g2
Ntp10620
Rp10621
(dp10622
g256
g10577
sg65
g10577
sg172
g173
sg202
g259
sg262
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10623
(dp10624
g138
(lp10625
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10626
tp10627
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p10628
tp10629
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p10630
tp10631
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10632
tp10633
asbsg59
g0
(g60
g2
Ntp10634
Rp10635
(dp10636
g64
(tsg65
g10577
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp10637
Rp10638
(dp10639
g12
g0
(g13
g2
Ntp10640
Rp10641
(dp10642
g17
(lp10643
g0
(g8
g2
Ntp10644
Rp10645
(dp10646
g12
g0
(g13
g2
Ntp10647
Rp10648
(dp10649
g17
(lp10650
g0
(g8
g2
Ntp10651
Rp10652
(dp10653
g12
g0
(g13
g2
Ntp10654
Rp10655
(dp10656
g17
(lp10657
g10263
asg55
(itheano.gof.utils
scratchpad
p10658
(dp10659
g138
(lp10660
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10661
tp10662
a(g10608
I474
g10609
S'acc_dtype=acc_dtype)'
p10663
tp10664
a(g10612
I2803
g10609
S'shp = shape(input)'
p10665
tp10666
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10667
tp10668
asbsg154
(lp10669
g10652
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10670
(dp10671
g138
(lp10672
(g10612
I2803
g10609
S'shp = shape(input)'
p10673
tp10674
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10675
tp10676
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p10677
tp10678
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10679
tp10680
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10681
(dp10682
g138
(lp10683
(g10608
I474
g10609
S'acc_dtype=acc_dtype)'
p10684
tp10685
a(g10612
I2811
g10609
S"shp = cast(shp, 'float64')"
p10686
tp10687
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/basic.py'
p10688
I1110
S'cast'
p10689
S'return _cast_mapping[dtype](x)'
p10690
tp10691
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10692
tp10693
asbsg154
(lp10694
g10645
asg156
g0
(g196
g2
Ntp10695
Rp10696
(dp10697
g200
S'tensor.basic'
p10698
sg38
Nsg202
g0
(ctheano.scalar.basic
Cast
p10699
g2
Ntp10700
Rp10701
(dp10702
g207
g0
(ctheano.scalar.basic
specific_out
p10703
g2
Ntp10704
Rp10705
(dp10706
S'spec'
p10707
(g0
(g1636
g2
Ntp10708
Rp10709
(dp10710
g65
g566
sbtp10711
sbsg172
g173
sS'o_type'
p10712
g10709
sg38
S'convert_to_float64'
p10713
sS'ctor'
p10714
cnumpy
float64
p10715
sbsg211
(dp10716
sg213
Nsg216
(dp10717
sS'__oplist_tags'
p10718
(lp10719
S'casting'
p10720
asg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10721
(dp10722
g138
(lp10723
(g10688
I1110
g10689
S'return _cast_mapping[dtype](x)'
p10724
tp10725
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10726
tp10727
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10728
tp10729
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10730
tp10731
asbsg59
g0
(g60
g2
Ntp10732
Rp10733
(dp10734
g64
(I00
tp10735
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10736
(dp10737
g138
(lp10738
(g10608
I474
g10609
S'acc_dtype=acc_dtype)'
p10739
tp10740
a(g10612
I2824
g10609
S's = true_div(s, shp[i])'
p10741
tp10742
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p10743
tp10744
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10745
tp10746
asbsg154
(lp10747
g10638
asg156
g0
(g762
g2
Ntp10748
Rp10749
(dp10750
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p10751
tp10752
Rp10753
tp10754
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10755
(dp10756
bsg59
g0
(g60
g2
Ntp10757
Rp10758
(dp10759
g64
(tsg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10760
(dp10761
g138
(lp10762
(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10763
tp10764
a(g10608
I474
g10609
S'acc_dtype=acc_dtype)'
p10765
tp10766
a(g10612
I2824
g10609
S's = true_div(s, shp[i])'
p10767
tp10768
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10769
tp10770
asbsg154
(lp10771
g10249
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10772
(dp10773
g138
(lp10774
(g10612
I2824
g10609
S's = true_div(s, shp[i])'
p10775
tp10776
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10777
tp10778
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10779
tp10780
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10781
tp10782
asbsg59
g0
(g60
g2
Ntp10783
Rp10784
(dp10785
g64
(tsg65
S'float64'
p10786
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp10787
Rp10788
(dp10789
g12
g0
(g13
g2
Ntp10790
Rp10791
(dp10792
g17
(lp10793
g0
(g8
g2
Ntp10794
Rp10795
(dp10796
g12
g0
(g13
g2
Ntp10797
Rp10798
(dp10799
g17
(lp10800
g0
(g8
g2
Ntp10801
Rp10802
(dp10803
g12
g0
(g13
g2
Ntp10804
Rp10805
(dp10806
g17
(lp10807
g35
ag0
(g8
g2
Ntp10808
Rp10809
(dp10810
g12
g0
(g13
g2
Ntp10811
Rp10812
(dp10813
g17
(lp10814
g0
(g8
g2
Ntp10815
Rp10816
(dp10817
g12
g0
(g13
g2
Ntp10818
Rp10819
(dp10820
g17
(lp10821
g85
ag0
(g8
g2
Ntp10822
Rp10823
(dp10824
g12
g0
(g13
g2
Ntp10825
Rp10826
(dp10827
g17
(lp10828
g123
asg55
(itheano.gof.utils
scratchpad
p10829
(dp10830
g138
g139
sbsg154
(lp10831
g10823
asg156
g159
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10832
(dp10833
bsg59
g177
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10834
(dp10835
g138
g182
sbsg154
(lp10836
g10816
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10837
(dp10838
g138
g222
sbsg59
g233
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10839
(dp10840
g138
g239
sbsg154
(lp10841
g10809
asg156
g254
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10842
(dp10843
g138
g265
sbsg59
g277
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10844
(dp10845
g138
g281
sbsg154
(lp10846
g10802
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10847
(dp10848
g138
g303
sbsg59
g313
sg38
Nsbag0
(g8
g2
Ntp10849
Rp10850
(dp10851
g12
g0
(g13
g2
Ntp10852
Rp10853
(dp10854
g17
(lp10855
g0
(g8
g2
Ntp10856
Rp10857
(dp10858
g12
g0
(g13
g2
Ntp10859
Rp10860
(dp10861
g17
(lp10862
g331
ag0
(g8
g2
Ntp10863
Rp10864
(dp10865
g12
g0
(g13
g2
Ntp10866
Rp10867
(dp10868
g17
(lp10869
g123
asg55
(itheano.gof.utils
scratchpad
p10870
(dp10871
g138
g359
sbsg154
(lp10872
g10864
asg156
g370
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10873
(dp10874
bsg59
g379
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10875
(dp10876
g138
g384
sbsg154
(lp10877
g10857
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10878
(dp10879
g138
g396
sbsg59
g406
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10880
(dp10881
g138
g412
sbsg154
(lp10882
g10850
asg156
g423
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10883
(dp10884
g138
g427
sbsg59
g437
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10885
(dp10886
g138
g441
sbsg154
(lp10887
g10795
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10888
(dp10889
g138
g455
sbsg59
g465
sg38
Nsbag469
asg55
(itheano.gof.utils
scratchpad
p10890
(dp10891
g138
g484
sbsg154
(lp10892
g10788
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10893
(dp10894
g138
g512
sbsg59
g522
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p10895
(dp10896
g138
(lp10897
(g187
I76
g188
S'self.functions_minibatch()'
p10898
tp10899
a(g7906
I121
g7907
S'cost = T.nnet.binary_crossentropy(O, y).mean() + self.L2_sqr'
p10900
tp10901
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p10902
tp10903
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10904
tp10905
asbsg154
(lp10906
g10242
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p10907
(dp10908
g138
(lp10909
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p10910
tp10911
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10912
tp10913
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10914
tp10915
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p10916
tp10917
asbsg59
g0
(g60
g2
Ntp10918
Rp10919
(dp10920
g64
(tsg65
S'float64'
p10921
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg540
I00
sbasg2242
g2198
stp10922
Rp10923
(lp10924
g0
(g88
g2
Ntp10925
Rp10926
(dp10927
g2762
I0
sg38
Nsg2763
I01
sg92
(lp10928
Nasg541
I00
sg105
I00
sg106
I00
sg59
g7917
sg112
Nsbag0
(g88
g2
Ntp10929
Rp10930
(dp10931
g2762
I0
sg38
Nsg2763
I01
sg92
(lp10932
Nasg541
I00
sg105
I00
sg106
I00
sg59
g7940
sg112
Nsbag0
(g88
g2
Ntp10933
Rp10934
(dp10935
g2762
I0
sg38
Nsg2763
I00
sg92
g93
sg541
I01
sg105
I00
sg106
I00
sg59
g108
sg112
Nsbag0
(g88
g2
Ntp10936
Rp10937
(dp10938
g2762
I0
sg38
Nsg2763
I00
sg92
g336
sg541
I01
sg105
I00
sg106
I00
sg59
g344
sg112
Nsba(lp10939
NaNag96
ag339
atp10940
Rp10941
sS'trainmb'
p10942
g526
(g527
((dp10943
g529
Nsg530
g531
sg532
I00
sg17
(lp10944
g0
(g534
g2
Ntp10945
Rp10946
(dp10947
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g7899
sg567
I00
sg112
Nsbag0
(g534
g2
Ntp10948
Rp10949
(dp10950
g38
Nsg538
Nsg539
Nsg540
Nsg105
I00
sg541
I00
sg542
I00
sg543
g7924
sg567
I00
sg112
Nsbag0
(g534
g2
Ntp10951
Rp10952
(dp10953
g38
Nsg538
g0
(g8
g2
Ntp10954
Rp10955
(dp10956
g12
g0
(g13
g2
Ntp10957
Rp10958
(dp10959
g17
(lp10960
g85
ag0
(g8
g2
Ntp10961
Rp10962
(dp10963
g12
g0
(g13
g2
Ntp10964
Rp10965
(dp10966
g17
(lp10967
g0
(g8
g2
Ntp10968
Rp10969
(dp10970
g12
g0
(g13
g2
Ntp10971
Rp10972
(dp10973
g17
(lp10974
g0
(g8
g2
Ntp10975
Rp10976
(dp10977
g12
g0
(g13
g2
Ntp10978
Rp10979
(dp10980
g17
(lp10981
g35
asg55
(itheano.gof.utils
scratchpad
p10982
(dp10983
g138
(lp10984
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p10985
tp10986
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p10987
tp10988
a(g148
I533
g149
S'inplace=False)(input))'
p10989
tp10990
a(g144
I401
g145
S'self.add_tag_trace(node)'
p10991
tp10992
asbsg154
(lp10993
g10976
asg156
g0
(g157
g2
Ntp10994
Rp10995
(dp10996
g161
(lp10997
sg163
(lp10998
sg165
(lp10999
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp11000
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11001
(dp11002
bsg59
g0
(g60
g2
Ntp11003
Rp11004
(dp11005
g64
(I01
I01
I01
tp11006
sg65
g66
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag2844
asg55
(itheano.gof.utils
scratchpad
p11007
(dp11008
g138
(lp11009
(g187
I76
g188
S'self.functions_minibatch()'
p11010
tp11011
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p11012
tp11013
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p11014
tp11015
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11016
tp11017
asbsg154
(lp11018
g10969
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11019
(dp11020
g138
(lp11021
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p11022
tp11023
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11024
tp11025
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11026
tp11027
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p11028
tp11029
asbsg59
g0
(g60
g2
Ntp11030
Rp11031
(dp11032
g64
(I00
I00
I00
tp11033
sg65
S'float64'
p11034
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11035
Rp11036
(dp11037
g12
g0
(g13
g2
Ntp11038
Rp11039
(dp11040
g17
(lp11041
g0
(g8
g2
Ntp11042
Rp11043
(dp11044
g12
g0
(g13
g2
Ntp11045
Rp11046
(dp11047
g17
(lp11048
g0
(g33
g2
Ntp11049
Rp11050
(dp11051
g37
Nsg55
(itheano.gof.utils
scratchpad
p11052
(dp11053
g58
Nsbsg59
g0
(g60
g2
Ntp11054
Rp11055
(dp11056
g64
(tsg65
S'float64'
p11057
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp11058
g44
tp11059
Rp11060
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p11061
tp11062
bsbasg55
(itheano.gof.utils
scratchpad
p11063
(dp11064
g138
(lp11065
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p11066
tp11067
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11068
tp11069
a(g148
I533
g149
S'inplace=False)(input))'
p11070
tp11071
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11072
tp11073
asbsg154
(lp11074
g11043
asg156
g0
(g157
g2
Ntp11075
Rp11076
(dp11077
g161
(lp11078
sg163
(lp11079
sg165
(lp11080
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp11081
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11082
(dp11083
bsg59
g0
(g60
g2
Ntp11084
Rp11085
(dp11086
g64
(I01
I01
I01
tp11087
sg65
g11057
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11088
Rp11089
(dp11090
g12
g0
(g13
g2
Ntp11091
Rp11092
(dp11093
g17
(lp11094
g0
(g8
g2
Ntp11095
Rp11096
(dp11097
g12
g0
(g13
g2
Ntp11098
Rp11099
(dp11100
g17
(lp11101
g0
(g8
g2
Ntp11102
Rp11103
(dp11104
g12
g0
(g13
g2
Ntp11105
Rp11106
(dp11107
g17
(lp11108
g0
(g8
g2
Ntp11109
Rp11110
(dp11111
g12
g0
(g13
g2
Ntp11112
Rp11113
(dp11114
g17
(lp11115
g0
(g8
g2
Ntp11116
Rp11117
(dp11118
g12
g0
(g13
g2
Ntp11119
Rp11120
(dp11121
g17
(lp11122
g7899
ag0
(g8
g2
Ntp11123
Rp11124
(dp11125
g12
g0
(g13
g2
Ntp11126
Rp11127
(dp11128
g17
(lp11129
g0
(g8
g2
Ntp11130
Rp11131
(dp11132
g12
g0
(g13
g2
Ntp11133
Rp11134
(dp11135
g17
(lp11136
g0
(g8
g2
Ntp11137
Rp11138
(dp11139
g12
g0
(g13
g2
Ntp11140
Rp11141
(dp11142
g17
(lp11143
g469
ag0
(g8
g2
Ntp11144
Rp11145
(dp11146
g12
g0
(g13
g2
Ntp11147
Rp11148
(dp11149
g17
(lp11150
g0
(g8
g2
Ntp11151
Rp11152
(dp11153
g12
g0
(g13
g2
Ntp11154
Rp11155
(dp11156
g17
(lp11157
g7899
asg55
(itheano.gof.utils
scratchpad
p11158
(dp11159
g138
g8053
sbsg154
(lp11160
g11152
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11161
(dp11162
g138
g8065
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11163
(dp11164
g138
g8076
sbsg154
(lp11165
g11145
asg156
g8087
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11166
(dp11167
bsg59
g8096
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11168
(dp11169
g138
g8100
sbsg154
(lp11170
g11138
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11171
(dp11172
g138
g8112
sbsg59
g8122
sg38
Nsbag0
(g8
g2
Ntp11173
Rp11174
(dp11175
g12
g0
(g13
g2
Ntp11176
Rp11177
(dp11178
g17
(lp11179
g0
(g8
g2
Ntp11180
Rp11181
(dp11182
g12
g0
(g13
g2
Ntp11183
Rp11184
(dp11185
g17
(lp11186
g7899
asg55
(itheano.gof.utils
scratchpad
p11187
(dp11188
g138
g8141
sbsg154
(lp11189
g11181
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11190
(dp11191
g138
g8153
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11192
(dp11193
g138
g8164
sbsg154
(lp11194
g11174
asg156
g8175
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11195
(dp11196
bsg59
g8184
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11197
(dp11198
g138
g8188
sbsg154
(lp11199
g11131
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11200
(dp11201
g138
g8200
sbsg59
g8210
sg38
Nsbag0
(g8
g2
Ntp11202
Rp11203
(dp11204
g12
g0
(g13
g2
Ntp11205
Rp11206
(dp11207
g17
(lp11208
g469
ag0
(g8
g2
Ntp11209
Rp11210
(dp11211
g12
g0
(g13
g2
Ntp11212
Rp11213
(dp11214
g17
(lp11215
g0
(g8
g2
Ntp11216
Rp11217
(dp11218
g12
g0
(g13
g2
Ntp11219
Rp11220
(dp11221
g17
(lp11222
g7899
asg55
(itheano.gof.utils
scratchpad
p11223
(dp11224
g138
g8236
sbsg154
(lp11225
g11217
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11226
(dp11227
g138
g8248
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11228
(dp11229
g138
g8259
sbsg154
(lp11230
g11210
asg156
g8270
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11231
(dp11232
bsg59
g8279
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11233
(dp11234
g138
g8283
sbsg154
(lp11235
g11203
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11236
(dp11237
g138
g8295
sbsg59
g8305
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11238
(dp11239
g138
g8310
sbsg154
(lp11240
g11124
asg156
g8321
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11241
(dp11242
g138
g8326
sbsg59
g8336
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11243
(dp11244
g138
g8341
sbsg154
(lp11245
g11117
asg156
g8352
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11246
(dp11247
bsg59
g8357
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11248
(dp11249
g138
(lp11250
(g3127
I4578
g3128
S'ygrad = dot(x.T, gz)'
p11251
tp11252
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p11253
tp11254
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p11255
tp11256
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11257
tp11258
asbsg154
(lp11259
g11110
asg156
g0
(g157
g2
Ntp11260
Rp11261
(dp11262
g161
(lp11263
sg163
(lp11264
I1
aI0
asg165
(lp11265
sg167
g8359
sg168
I00
sg169
(I1
I0
tp11266
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11267
(dp11268
bsg59
g0
(g60
g2
Ntp11269
Rp11270
(dp11271
g64
(I00
I00
tp11272
sg65
g566
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11273
Rp11274
(dp11275
g12
g0
(g13
g2
Ntp11276
Rp11277
(dp11278
g17
(lp11279
g0
(g8
g2
Ntp11280
Rp11281
(dp11282
g12
g0
(g13
g2
Ntp11283
Rp11284
(dp11285
g17
(lp11286
g0
(g8
g2
Ntp11287
Rp11288
(dp11289
g12
g0
(g13
g2
Ntp11290
Rp11291
(dp11292
g17
(lp11293
g0
(g8
g2
Ntp11294
Rp11295
(dp11296
g12
g0
(g13
g2
Ntp11297
Rp11298
(dp11299
g17
(lp11300
g0
(g8
g2
Ntp11301
Rp11302
(dp11303
g12
g0
(g13
g2
Ntp11304
Rp11305
(dp11306
g17
(lp11307
g11117
ag0
(g8
g2
Ntp11308
Rp11309
(dp11310
g12
g0
(g13
g2
Ntp11311
Rp11312
(dp11313
g17
(lp11314
g85
ag0
(g8
g2
Ntp11315
Rp11316
(dp11317
g12
g0
(g13
g2
Ntp11318
Rp11319
(dp11320
g17
(lp11321
g0
(g8
g2
Ntp11322
Rp11323
(dp11324
g12
g0
(g13
g2
Ntp11325
Rp11326
(dp11327
g17
(lp11328
g469
ag0
(g8
g2
Ntp11329
Rp11330
(dp11331
g12
g0
(g13
g2
Ntp11332
Rp11333
(dp11334
g17
(lp11335
g0
(g8
g2
Ntp11336
Rp11337
(dp11338
g12
g0
(g13
g2
Ntp11339
Rp11340
(dp11341
g17
(lp11342
g85
asg55
(itheano.gof.utils
scratchpad
p11343
(dp11344
g138
g8397
sbsg154
(lp11345
g11337
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11346
(dp11347
g138
g8409
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11348
(dp11349
g138
g8420
sbsg154
(lp11350
g11330
asg156
g8431
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11351
(dp11352
bsg59
g8440
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11353
(dp11354
g138
g8444
sbsg154
(lp11355
g11323
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11356
(dp11357
g138
g8456
sbsg59
g8466
sg38
Nsbag0
(g8
g2
Ntp11358
Rp11359
(dp11360
g12
g0
(g13
g2
Ntp11361
Rp11362
(dp11363
g17
(lp11364
g0
(g8
g2
Ntp11365
Rp11366
(dp11367
g12
g0
(g13
g2
Ntp11368
Rp11369
(dp11370
g17
(lp11371
g469
ag0
(g8
g2
Ntp11372
Rp11373
(dp11374
g12
g0
(g13
g2
Ntp11375
Rp11376
(dp11377
g17
(lp11378
g0
(g8
g2
Ntp11379
Rp11380
(dp11381
g12
g0
(g13
g2
Ntp11382
Rp11383
(dp11384
g17
(lp11385
g85
asg55
(itheano.gof.utils
scratchpad
p11386
(dp11387
g138
g8499
sbsg154
(lp11388
g11380
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11389
(dp11390
g138
g8511
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11391
(dp11392
g138
g8522
sbsg154
(lp11393
g11373
asg156
g8533
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11394
(dp11395
bsg59
g8542
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11396
(dp11397
g138
g8546
sbsg154
(lp11398
g11366
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11399
(dp11400
g138
g8558
sbsg59
g8568
sg38
Nsbag0
(g8
g2
Ntp11401
Rp11402
(dp11403
g12
g0
(g13
g2
Ntp11404
Rp11405
(dp11406
g17
(lp11407
g0
(g8
g2
Ntp11408
Rp11409
(dp11410
g12
g0
(g13
g2
Ntp11411
Rp11412
(dp11413
g17
(lp11414
g85
asg55
(itheano.gof.utils
scratchpad
p11415
(dp11416
g138
g8587
sbsg154
(lp11417
g11409
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11418
(dp11419
g138
g8599
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11420
(dp11421
g138
g8610
sbsg154
(lp11422
g11402
asg156
g8621
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11423
(dp11424
bsg59
g8630
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11425
(dp11426
g138
g8634
sbsg154
(lp11427
g11359
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11428
(dp11429
g138
g8646
sbsg59
g8656
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11430
(dp11431
g138
g8661
sbsg154
(lp11432
g11316
asg156
g8672
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11433
(dp11434
g138
g8677
sbsg59
g8687
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11435
(dp11436
g138
g8692
sbsg154
(lp11437
g11309
asg156
g8703
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11438
(dp11439
bsg59
g8708
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11440
(dp11441
g138
g8713
sbsg154
(lp11442
g11302
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11443
(dp11444
bsg59
g8726
sg38
Nsbag0
(g8
g2
Ntp11445
Rp11446
(dp11447
g12
g0
(g13
g2
Ntp11448
Rp11449
(dp11450
g17
(lp11451
g35
ag0
(g8
g2
Ntp11452
Rp11453
(dp11454
g12
g0
(g13
g2
Ntp11455
Rp11456
(dp11457
g17
(lp11458
g0
(g8
g2
Ntp11459
Rp11460
(dp11461
g12
g0
(g13
g2
Ntp11462
Rp11463
(dp11464
g17
(lp11465
g7899
asg55
(itheano.gof.utils
scratchpad
p11466
(dp11467
g138
g8753
sbsg154
(lp11468
g11460
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11469
(dp11470
g138
g8765
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11471
(dp11472
g138
g8776
sbsg154
(lp11473
g11453
asg156
g8787
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11474
(dp11475
bsg59
g8798
sg38
Nsbag0
(g8
g2
Ntp11476
Rp11477
(dp11478
g12
g0
(g13
g2
Ntp11479
Rp11480
(dp11481
g17
(lp11482
g0
(g8
g2
Ntp11483
Rp11484
(dp11485
g12
g0
(g13
g2
Ntp11486
Rp11487
(dp11488
g17
(lp11489
g85
asg55
(itheano.gof.utils
scratchpad
p11490
(dp11491
g138
g8817
sbsg154
(lp11492
g11484
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11493
(dp11494
g138
g8829
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11495
(dp11496
g138
g8840
sbsg154
(lp11497
g11477
asg156
g8851
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11498
(dp11499
bsg59
g8862
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11500
(dp11501
g138
g8867
sbsg154
(lp11502
g11446
asg156
g1492
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11503
(dp11504
bsg59
g8880
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11505
(dp11506
g138
g8886
sbsg154
(lp11507
g11295
asg156
g8897
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11508
(dp11509
bsg59
g8902
sg38
Nsbag0
(g8
g2
Ntp11510
Rp11511
(dp11512
g12
g0
(g13
g2
Ntp11513
Rp11514
(dp11515
g17
(lp11516
g1682
asg55
(itheano.gof.utils
scratchpad
p11517
(dp11518
g138
(lp11519
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11520
tp11521
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11522
tp11523
a(g148
I533
g149
S'inplace=False)(input))'
p11524
tp11525
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11526
tp11527
asbsg154
(lp11528
g11511
asg156
g0
(g157
g2
Ntp11529
Rp11530
(dp11531
g161
(lp11532
sg163
(lp11533
sg165
(lp11534
I0
aI1
aI2
aI3
asg167
(tsg168
I00
sg169
(g170
g170
g170
g170
tp11535
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11536
(dp11537
bsg59
g0
(g60
g2
Ntp11538
Rp11539
(dp11540
g64
(I01
I01
I01
I01
tp11541
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11542
(dp11543
g138
(lp11544
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p11545
tp11546
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p11547
tp11548
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11549
tp11550
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11551
tp11552
asbsg154
(lp11553
g11288
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11554
(dp11555
g138
(lp11556
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11557
tp11558
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11559
tp11560
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11561
tp11562
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p11563
tp11564
asbsg59
g0
(g60
g2
Ntp11565
Rp11566
(dp11567
g64
(I00
I00
I00
I00
tp11568
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11569
Rp11570
(dp11571
g12
g0
(g13
g2
Ntp11572
Rp11573
(dp11574
g17
(lp11575
g0
(g8
g2
Ntp11576
Rp11577
(dp11578
g12
g0
(g13
g2
Ntp11579
Rp11580
(dp11581
g17
(lp11582
g0
(g8
g2
Ntp11583
Rp11584
(dp11585
g12
g0
(g13
g2
Ntp11586
Rp11587
(dp11588
g17
(lp11589
g11295
asg55
(itheano.gof.utils
scratchpad
p11590
(dp11591
g138
g8907
sbsg154
(lp11592
g11584
asg156
g8918
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11593
(dp11594
bsg59
g8929
sg38
Nsbag0
(g8
g2
Ntp11595
Rp11596
(dp11597
g12
g0
(g13
g2
Ntp11598
Rp11599
(dp11600
g17
(lp11601
g1682
asg55
(itheano.gof.utils
scratchpad
p11602
(dp11603
g138
(lp11604
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11605
tp11606
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11607
tp11608
a(g148
I533
g149
S'inplace=False)(input))'
p11609
tp11610
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11611
tp11612
asbsg154
(lp11613
g11596
asg156
g0
(g157
g2
Ntp11614
Rp11615
(dp11616
g161
(lp11617
sg163
(lp11618
sg165
(lp11619
I0
aI1
aI2
aI3
asg167
(tsg168
I00
sg169
(g170
g170
g170
g170
tp11620
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11621
(dp11622
bsg59
g0
(g60
g2
Ntp11623
Rp11624
(dp11625
g64
(I01
I01
I01
I01
tp11626
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11627
(dp11628
g138
(lp11629
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p11630
tp11631
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p11632
tp11633
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11634
tp11635
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11636
tp11637
asbsg154
(lp11638
g11577
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11639
(dp11640
g138
(lp11641
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p11642
tp11643
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11644
tp11645
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11646
tp11647
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p11648
tp11649
asbsg59
g0
(g60
g2
Ntp11650
Rp11651
(dp11652
g64
(I00
I00
I00
I00
tp11653
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11654
Rp11655
(dp11656
g12
g0
(g13
g2
Ntp11657
Rp11658
(dp11659
g17
(lp11660
g0
(g8
g2
Ntp11661
Rp11662
(dp11663
g12
g0
(g13
g2
Ntp11664
Rp11665
(dp11666
g17
(lp11667
g0
(g8
g2
Ntp11668
Rp11669
(dp11670
g12
g0
(g13
g2
Ntp11671
Rp11672
(dp11673
g17
(lp11674
g0
(g8
g2
Ntp11675
Rp11676
(dp11677
g12
g0
(g13
g2
Ntp11678
Rp11679
(dp11680
g17
(lp11681
g0
(g8
g2
Ntp11682
Rp11683
(dp11684
g12
g0
(g13
g2
Ntp11685
Rp11686
(dp11687
g17
(lp11688
g0
(g8
g2
Ntp11689
Rp11690
(dp11691
g12
g0
(g13
g2
Ntp11692
Rp11693
(dp11694
g17
(lp11695
g0
(g8
g2
Ntp11696
Rp11697
(dp11698
g12
g0
(g13
g2
Ntp11699
Rp11700
(dp11701
g17
(lp11702
g11584
asg55
(itheano.gof.utils
scratchpad
p11703
(dp11704
g138
g8934
sbsg154
(lp11705
g11697
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11706
(dp11707
g138
g8946
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11708
(dp11709
g138
g8957
sbsg154
(lp11710
g11690
asg156
g8968
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11711
(dp11712
bsg59
g8977
sg38
Nsbag0
(g8
g2
Ntp11713
Rp11714
(dp11715
g12
g0
(g13
g2
Ntp11716
Rp11717
(dp11718
g17
(lp11719
g11584
ag0
(g1605
g2
Ntp11720
Rp11721
(dp11722
g12
g0
(g13
g2
Ntp11723
Rp11724
(dp11725
g17
(lp11726
g11690
asg55
(itheano.gof.utils
scratchpad
p11727
(dp11728
g138
g8995
sbsg154
(lp11729
g11721
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11730
(dp11731
bsg59
g9008
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11732
(dp11733
g138
g9012
sbsg154
(lp11734
g11714
asg156
g9023
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11735
(dp11736
bsg59
g9034
sg38
Nsbag11690
asg55
(itheano.gof.utils
scratchpad
p11737
(dp11738
g138
(lp11739
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p11740
tp11741
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11742
tp11743
a(g3778
I1400
g3128
S'outs = self(*inputs)'
p11744
tp11745
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11746
tp11747
asbsg154
(lp11748
g11683
asg156
g9050
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11749
(dp11750
g138
(lp11751
(g3778
I1400
g3128
S'outs = self(*inputs)'
p11752
tp11753
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11754
tp11755
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p11756
tp11757
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p11758
tp11759
asbsg59
g10174
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11760
(dp11761
g138
(lp11762
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11763
tp11764
a(g3778
I1410
g3128
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p11765
tp11766
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p11767
tp11768
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11769
tp11770
asbsg154
(lp11771
g11676
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11772
(dp11773
g138
(lp11774
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p11775
tp11776
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p11777
tp11778
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p11779
tp11780
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p11781
tp11782
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11783
(dp11784
g138
(lp11785
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11786
tp11787
a(g3778
I1410
g3128
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p11788
tp11789
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p11790
tp11791
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11792
tp11793
asbsg154
(lp11794
g11669
asg156
g0
(g762
g2
Ntp11795
Rp11796
(dp11797
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p11798
tp11799
Rp11800
tp11801
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11802
(dp11803
bsg59
g0
(g60
g2
Ntp11804
Rp11805
(dp11806
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11807
Rp11808
(dp11809
g12
g0
(g13
g2
Ntp11810
Rp11811
(dp11812
g17
(lp11813
g11714
asg55
(itheano.gof.utils
scratchpad
p11814
(dp11815
g138
(lp11816
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11817
tp11818
a(g3778
I1563
g3128
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p11819
tp11820
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p11821
tp11822
a(g144
I401
g145
S'self.add_tag_trace(node)'
p11823
tp11824
asbsg154
(lp11825
g11808
asg156
g0
(g762
g2
Ntp11826
Rp11827
(dp11828
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p11829
tp11830
Rp11831
tp11832
Rp11833
tp11834
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11835
(dp11836
bsg59
g0
(g60
g2
Ntp11837
Rp11838
(dp11839
g64
(I00
I00
I00
I00
tp11840
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp11841
Rp11842
(dp11843
g12
g0
(g13
g2
Ntp11844
Rp11845
(dp11846
g17
(lp11847
g0
(g8
g2
Ntp11848
Rp11849
(dp11850
g12
g0
(g13
g2
Ntp11851
Rp11852
(dp11853
g17
(lp11854
g0
(g8
g2
Ntp11855
Rp11856
(dp11857
g12
g0
(g13
g2
Ntp11858
Rp11859
(dp11860
g17
(lp11861
g0
(g8
g2
Ntp11862
Rp11863
(dp11864
g12
g0
(g13
g2
Ntp11865
Rp11866
(dp11867
g17
(lp11868
g0
(g8
g2
Ntp11869
Rp11870
(dp11871
g12
g0
(g13
g2
Ntp11872
Rp11873
(dp11874
g17
(lp11875
g0
(g8
g2
Ntp11876
Rp11877
(dp11878
g12
g0
(g13
g2
Ntp11879
Rp11880
(dp11881
g17
(lp11882
g0
(g8
g2
Ntp11883
Rp11884
(dp11885
g12
g0
(g13
g2
Ntp11886
Rp11887
(dp11888
g17
(lp11889
g0
(g8
g2
Ntp11890
Rp11891
(dp11892
g12
g0
(g13
g2
Ntp11893
Rp11894
(dp11895
g17
(lp11896
g0
(g8
g2
Ntp11897
Rp11898
(dp11899
g12
g0
(g13
g2
Ntp11900
Rp11901
(dp11902
g17
(lp11903
g0
(g8
g2
Ntp11904
Rp11905
(dp11906
g12
g0
(g13
g2
Ntp11907
Rp11908
(dp11909
g17
(lp11910
g0
(g8
g2
Ntp11911
Rp11912
(dp11913
g12
g0
(g13
g2
Ntp11914
Rp11915
(dp11916
g17
(lp11917
g0
(g8
g2
Ntp11918
Rp11919
(dp11920
g12
g0
(g13
g2
Ntp11921
Rp11922
(dp11923
g17
(lp11924
g0
(g8
g2
Ntp11925
Rp11926
(dp11927
g12
g0
(g13
g2
Ntp11928
Rp11929
(dp11930
g17
(lp11931
g7924
ag0
(g8
g2
Ntp11932
Rp11933
(dp11934
g12
g0
(g13
g2
Ntp11935
Rp11936
(dp11937
g17
(lp11938
g0
(g8
g2
Ntp11939
Rp11940
(dp11941
g12
g0
(g13
g2
Ntp11942
Rp11943
(dp11944
g17
(lp11945
g0
(g8
g2
Ntp11946
Rp11947
(dp11948
g12
g0
(g13
g2
Ntp11949
Rp11950
(dp11951
g17
(lp11952
g0
(g8
g2
Ntp11953
Rp11954
(dp11955
g12
g0
(g13
g2
Ntp11956
Rp11957
(dp11958
g17
(lp11959
g11690
ag11714
ag11690
asg55
(itheano.gof.utils
scratchpad
p11960
(dp11961
g138
g9039
sbsg154
(lp11962
g11954
asg156
g9050
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11963
(dp11964
g138
g10179
sbsg59
g10174
sg38
Nsbag331
asg55
(itheano.gof.utils
scratchpad
p11965
(dp11966
g138
g10190
sbsg154
(lp11967
g11947
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11968
(dp11969
bsg59
g10203
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11970
(dp11971
g138
g10209
sbsg154
(lp11972
g11940
asg156
g2380
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11973
(dp11974
g138
g10221
sbsg59
g10231
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11975
(dp11976
g138
g10292
sbsg154
(lp11977
g11933
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11978
(dp11979
g138
g10304
sbsg59
g10314
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p11980
(dp11981
g138
g10320
sbsg154
(lp11982
g11926
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p11983
(dp11984
g138
g10332
sbsg59
g10342
sg38
Nsbag0
(g8
g2
Ntp11985
Rp11986
(dp11987
g12
g0
(g13
g2
Ntp11988
Rp11989
(dp11990
g17
(lp11991
g0
(g8
g2
Ntp11992
Rp11993
(dp11994
g12
g0
(g13
g2
Ntp11995
Rp11996
(dp11997
g17
(lp11998
g0
(g8
g2
Ntp11999
Rp12000
(dp12001
g12
g0
(g13
g2
Ntp12002
Rp12003
(dp12004
g17
(lp12005
g2530
asg55
(itheano.gof.utils
scratchpad
p12006
(dp12007
g138
g10369
sbsg154
(lp12008
g12000
asg156
g10380
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12009
(dp12010
bsg59
g10389
sg38
Nsbag7924
asg55
(itheano.gof.utils
scratchpad
p12011
(dp12012
g138
g10394
sbsg154
(lp12013
g11993
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12014
(dp12015
g138
g10406
sbsg59
g10416
sg38
Nsbag0
(g8
g2
Ntp12016
Rp12017
(dp12018
g12
g0
(g13
g2
Ntp12019
Rp12020
(dp12021
g17
(lp12022
g0
(g8
g2
Ntp12023
Rp12024
(dp12025
g12
g0
(g13
g2
Ntp12026
Rp12027
(dp12028
g17
(lp12029
g0
(g8
g2
Ntp12030
Rp12031
(dp12032
g12
g0
(g13
g2
Ntp12033
Rp12034
(dp12035
g17
(lp12036
g2530
asg55
(itheano.gof.utils
scratchpad
p12037
(dp12038
g138
g10443
sbsg154
(lp12039
g12031
asg156
g10454
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12040
(dp12041
bsg59
g10463
sg38
Nsbag11940
asg55
(itheano.gof.utils
scratchpad
p12042
(dp12043
g138
g10468
sbsg154
(lp12044
g12024
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12045
(dp12046
g138
g10480
sbsg59
g10490
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12047
(dp12048
g138
g10496
sbsg154
(lp12049
g12017
asg156
g2461
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12050
(dp12051
g138
g10508
sbsg59
g10518
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12052
(dp12053
g138
g10524
sbsg154
(lp12054
g11986
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12055
(dp12056
g138
g10536
sbsg59
g10546
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12057
(dp12058
g138
g10552
sbsg154
(lp12059
g11919
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12060
(dp12061
g138
g10564
sbsg59
g10574
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12062
(dp12063
g138
g10580
sbsg154
(lp12064
g11912
asg156
g2728
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12065
(dp12066
g138
g10592
sbsg59
g10602
sg38
Nsbag0
(g8
g2
Ntp12067
Rp12068
(dp12069
g12
g0
(g13
g2
Ntp12070
Rp12071
(dp12072
g17
(lp12073
g0
(g8
g2
Ntp12074
Rp12075
(dp12076
g12
g0
(g13
g2
Ntp12077
Rp12078
(dp12079
g17
(lp12080
g0
(g8
g2
Ntp12081
Rp12082
(dp12083
g12
g0
(g13
g2
Ntp12084
Rp12085
(dp12086
g17
(lp12087
g0
(g8
g2
Ntp12088
Rp12089
(dp12090
g12
g0
(g13
g2
Ntp12091
Rp12092
(dp12093
g17
(lp12094
g0
(g8
g2
Ntp12095
Rp12096
(dp12097
g12
g0
(g13
g2
Ntp12098
Rp12099
(dp12100
g17
(lp12101
g0
(g8
g2
Ntp12102
Rp12103
(dp12104
g12
g0
(g13
g2
Ntp12105
Rp12106
(dp12107
g17
(lp12108
g11912
asg55
(itheano.gof.utils
scratchpad
p12109
(dp12110
g138
g10607
sbsg154
(lp12111
g12103
asg156
g10621
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12112
(dp12113
g138
g10625
sbsg59
g10635
sg38
Nsbag0
(g8
g2
Ntp12114
Rp12115
(dp12116
g12
g0
(g13
g2
Ntp12117
Rp12118
(dp12119
g17
(lp12120
g0
(g8
g2
Ntp12121
Rp12122
(dp12123
g12
g0
(g13
g2
Ntp12124
Rp12125
(dp12126
g17
(lp12127
g0
(g8
g2
Ntp12128
Rp12129
(dp12130
g12
g0
(g13
g2
Ntp12131
Rp12132
(dp12133
g17
(lp12134
g11912
asg55
(itheano.gof.utils
scratchpad
p12135
(dp12136
g138
g10660
sbsg154
(lp12137
g12129
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12138
(dp12139
g138
g10672
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12140
(dp12141
g138
g10683
sbsg154
(lp12142
g12122
asg156
g10696
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12143
(dp12144
g138
g10723
sbsg59
g10733
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12145
(dp12146
g138
g10738
sbsg154
(lp12147
g12115
asg156
g10749
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12148
(dp12149
bsg59
g10758
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12150
(dp12151
g138
g10762
sbsg154
(lp12152
g12096
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12153
(dp12154
g138
g10774
sbsg59
g10784
sg38
Nsbag0
(g8
g2
Ntp12155
Rp12156
(dp12157
g12
g0
(g13
g2
Ntp12158
Rp12159
(dp12160
g17
(lp12161
g0
(g8
g2
Ntp12162
Rp12163
(dp12164
g12
g0
(g13
g2
Ntp12165
Rp12166
(dp12167
g17
(lp12168
g0
(g8
g2
Ntp12169
Rp12170
(dp12171
g12
g0
(g13
g2
Ntp12172
Rp12173
(dp12174
g17
(lp12175
g35
ag0
(g8
g2
Ntp12176
Rp12177
(dp12178
g12
g0
(g13
g2
Ntp12179
Rp12180
(dp12181
g17
(lp12182
g0
(g8
g2
Ntp12183
Rp12184
(dp12185
g12
g0
(g13
g2
Ntp12186
Rp12187
(dp12188
g17
(lp12189
g85
ag0
(g8
g2
Ntp12190
Rp12191
(dp12192
g12
g0
(g13
g2
Ntp12193
Rp12194
(dp12195
g17
(lp12196
g123
asg55
(itheano.gof.utils
scratchpad
p12197
(dp12198
g138
g139
sbsg154
(lp12199
g12191
asg156
g159
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12200
(dp12201
bsg59
g177
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12202
(dp12203
g138
g182
sbsg154
(lp12204
g12184
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12205
(dp12206
g138
g222
sbsg59
g233
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12207
(dp12208
g138
g239
sbsg154
(lp12209
g12177
asg156
g254
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12210
(dp12211
g138
g265
sbsg59
g277
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12212
(dp12213
g138
g281
sbsg154
(lp12214
g12170
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12215
(dp12216
g138
g303
sbsg59
g313
sg38
Nsbag0
(g8
g2
Ntp12217
Rp12218
(dp12219
g12
g0
(g13
g2
Ntp12220
Rp12221
(dp12222
g17
(lp12223
g0
(g8
g2
Ntp12224
Rp12225
(dp12226
g12
g0
(g13
g2
Ntp12227
Rp12228
(dp12229
g17
(lp12230
g331
ag0
(g8
g2
Ntp12231
Rp12232
(dp12233
g12
g0
(g13
g2
Ntp12234
Rp12235
(dp12236
g17
(lp12237
g123
asg55
(itheano.gof.utils
scratchpad
p12238
(dp12239
g138
g359
sbsg154
(lp12240
g12232
asg156
g370
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12241
(dp12242
bsg59
g379
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12243
(dp12244
g138
g384
sbsg154
(lp12245
g12225
asg156
g198
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12246
(dp12247
g138
g396
sbsg59
g406
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12248
(dp12249
g138
g412
sbsg154
(lp12250
g12218
asg156
g423
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12251
(dp12252
g138
g427
sbsg59
g437
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12253
(dp12254
g138
g441
sbsg154
(lp12255
g12163
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12256
(dp12257
g138
g455
sbsg59
g465
sg38
Nsbag469
asg55
(itheano.gof.utils
scratchpad
p12258
(dp12259
g138
g484
sbsg154
(lp12260
g12156
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12261
(dp12262
g138
g512
sbsg59
g522
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12263
(dp12264
g138
g10897
sbsg154
(lp12265
g12089
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12266
(dp12267
g138
g10909
sbsg59
g10919
sg38
Nsbag4414
asg55
(itheano.gof.utils
scratchpad
p12268
(dp12269
g138
(lp12270
(g4430
I450
g3128
S'g_cost = _float_ones_like(cost)'
p12271
tp12272
a(g4433
I1124
g4434
S'rval = tensor.ones_like(x)'
p12273
tp12274
a(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p12275
tp12276
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12277
tp12278
asbsg154
(lp12279
g12082
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12280
(dp12281
g138
(lp12282
(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p12283
tp12284
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12285
tp12286
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12287
tp12288
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12289
tp12290
asbsg59
g0
(g60
g2
Ntp12291
Rp12292
(dp12293
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12115
asg55
(itheano.gof.utils
scratchpad
p12294
(dp12295
g138
(lp12296
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12297
tp12298
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12299
tp12300
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12301
tp12302
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12303
tp12304
asbsg154
(lp12305
g12075
asg156
g0
(g196
g2
Ntp12306
Rp12307
(dp12308
g38
Nsg202
g4543
sg211
(dp12309
sg213
Nsg216
(dp12310
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12311
(dp12312
g138
(lp12313
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12314
tp12315
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12316
tp12317
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12318
tp12319
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12320
tp12321
asbsg59
g0
(g60
g2
Ntp12322
Rp12323
(dp12324
g64
(tsg65
S'float64'
p12325
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12326
(dp12327
g138
(lp12328
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p12329
tp12330
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12331
tp12332
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p12334
tp12335
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12336
tp12337
asbsg154
(lp12338
g12068
asg156
g0
(g157
g2
Ntp12339
Rp12340
(dp12341
g161
(lp12342
sg163
(lp12343
sg165
(lp12344
I0
asg167
(tsg168
I00
sg169
(g170
tp12345
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12346
(dp12347
bsg59
g0
(g60
g2
Ntp12348
Rp12349
(dp12350
g64
(I01
tp12351
sg65
g12325
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12352
(dp12353
g138
(lp12354
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p12355
tp12356
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12357
tp12358
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p12359
tp12360
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12361
tp12362
asbsg154
(lp12363
g11905
asg156
g0
(g196
g2
Ntp12364
Rp12365
(dp12366
g38
Nsg202
g3444
sg211
(dp12367
sg213
Nsg216
(dp12368
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12369
(dp12370
g138
(lp12371
(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p12372
tp12373
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12374
tp12375
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12376
tp12377
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12378
tp12379
asbsg59
g0
(g60
g2
Ntp12380
Rp12381
(dp12382
g64
(I00
tp12383
sg65
g12325
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12384
(dp12385
g138
(lp12386
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12387
tp12388
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12389
tp12390
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12391
tp12392
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12393
tp12394
asbsg154
(lp12395
g11898
asg156
g0
(g196
g2
Ntp12396
Rp12397
(dp12398
g38
Nsg202
g2732
sg211
(dp12399
sg213
Nsg216
(dp12400
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12401
(dp12402
g138
(lp12403
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12404
tp12405
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12406
tp12407
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12408
tp12409
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12410
tp12411
asbsg59
g0
(g60
g2
Ntp12412
Rp12413
(dp12414
g64
(I00
tp12415
sg65
g12325
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag7924
asg55
(itheano.gof.utils
scratchpad
p12416
(dp12417
g138
(lp12418
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12419
tp12420
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12421
tp12422
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12423
tp12424
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12425
tp12426
asbsg154
(lp12427
g11891
asg156
g0
(g196
g2
Ntp12428
Rp12429
(dp12430
g38
Nsg202
g501
sg211
(dp12431
sg213
Nsg216
(dp12432
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12433
(dp12434
g138
(lp12435
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12436
tp12437
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12438
tp12439
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12440
tp12441
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12442
tp12443
asbsg59
g0
(g60
g2
Ntp12444
Rp12445
(dp12446
g64
(I00
tp12447
sg65
S'float64'
p12448
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag11940
asg55
(itheano.gof.utils
scratchpad
p12449
(dp12450
g138
(lp12451
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12452
tp12453
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12454
tp12455
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12456
tp12457
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12458
tp12459
asbsg154
(lp12460
g11884
asg156
g0
(g196
g2
Ntp12461
Rp12462
(dp12463
g38
Nsg202
g4543
sg211
(dp12464
sg213
Nsg216
(dp12465
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12466
(dp12467
g138
(lp12468
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12469
tp12470
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12471
tp12472
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12473
tp12474
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12475
tp12476
asbsg59
g0
(g60
g2
Ntp12477
Rp12478
(dp12479
g64
(I00
tp12480
sg65
S'float64'
p12481
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12482
Rp12483
(dp12484
g12
g0
(g13
g2
Ntp12485
Rp12486
(dp12487
g17
(lp12488
g0
(g8
g2
Ntp12489
Rp12490
(dp12491
g12
g0
(g13
g2
Ntp12492
Rp12493
(dp12494
g17
(lp12495
g0
(g8
g2
Ntp12496
Rp12497
(dp12498
g12
g0
(g13
g2
Ntp12499
Rp12500
(dp12501
g17
(lp12502
g11898
ag11993
asg55
(itheano.gof.utils
scratchpad
p12503
(dp12504
g138
(lp12505
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12506
tp12507
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12508
tp12509
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12510
tp12511
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12512
tp12513
asbsg154
(lp12514
g12497
asg156
g0
(g196
g2
Ntp12515
Rp12516
(dp12517
g38
Nsg202
g501
sg211
(dp12518
sg213
Nsg216
(dp12519
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12520
(dp12521
g138
(lp12522
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12523
tp12524
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12525
tp12526
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12527
tp12528
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12529
tp12530
asbsg59
g0
(g60
g2
Ntp12531
Rp12532
(dp12533
g64
(I00
tp12534
sg65
S'float64'
p12535
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12024
asg55
(itheano.gof.utils
scratchpad
p12536
(dp12537
g138
(lp12538
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12539
tp12540
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12541
tp12542
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12543
tp12544
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12545
tp12546
asbsg154
(lp12547
g12490
asg156
g0
(g196
g2
Ntp12548
Rp12549
(dp12550
g38
Nsg202
g4543
sg211
(dp12551
sg213
Nsg216
(dp12552
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12553
(dp12554
g138
(lp12555
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12556
tp12557
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12558
tp12559
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12560
tp12561
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12562
tp12563
asbsg59
g0
(g60
g2
Ntp12564
Rp12565
(dp12566
g64
(I00
tp12567
sg65
S'float64'
p12568
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12569
(dp12570
g138
(lp12571
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12572
tp12573
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12574
tp12575
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12576
tp12577
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12578
tp12579
asbsg154
(lp12580
g12483
asg156
g0
(g196
g2
Ntp12581
Rp12582
(dp12583
g38
Nsg202
g2732
sg211
(dp12584
sg213
Nsg216
(dp12585
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12586
(dp12587
g138
(lp12588
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12589
tp12590
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12591
tp12592
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12593
tp12594
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12595
tp12596
asbsg59
g0
(g60
g2
Ntp12597
Rp12598
(dp12599
g64
(I00
tp12600
sg65
g12568
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12601
(dp12602
g138
(lp12603
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p12604
tp12605
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p12606
tp12607
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p12608
tp12609
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12610
tp12611
asbsg154
(lp12612
g11877
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12613
(dp12614
g138
(lp12615
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p12616
tp12617
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12618
tp12619
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12620
tp12621
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12622
tp12623
asbsg59
g0
(g60
g2
Ntp12624
Rp12625
(dp12626
g64
(I00
tp12627
sg65
S'float64'
p12628
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12629
Rp12630
(dp12631
g12
g0
(g13
g2
Ntp12632
Rp12633
(dp12634
g17
(lp12635
g11947
asg55
(itheano.gof.utils
scratchpad
p12636
(dp12637
g138
(lp12638
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12639
tp12640
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12641
tp12642
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12643
tp12644
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12645
tp12646
asbsg154
(lp12647
g12630
asg156
g0
(g196
g2
Ntp12648
Rp12649
(dp12650
g38
Nsg202
g2385
sg211
(dp12651
sg213
Nsg216
(dp12652
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12653
(dp12654
g138
(lp12655
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12656
tp12657
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12658
tp12659
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12660
tp12661
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12662
tp12663
asbsg59
g0
(g60
g2
Ntp12664
Rp12665
(dp12666
g64
(I00
tp12667
sg65
S'float64'
p12668
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12669
(dp12670
g138
(lp12671
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12672
tp12673
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12674
tp12675
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12676
tp12677
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12678
tp12679
asbsg154
(lp12680
g11870
asg156
g0
(g196
g2
Ntp12681
Rp12682
(dp12683
g38
Nsg202
g501
sg211
(dp12684
sg213
Nsg216
(dp12685
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12686
(dp12687
g138
(lp12688
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12689
tp12690
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12691
tp12692
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12693
tp12694
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12695
tp12696
asbsg59
g0
(g60
g2
Ntp12697
Rp12698
(dp12699
g64
(I00
tp12700
sg65
S'float64'
p12701
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12702
Rp12703
(dp12704
g12
g0
(g13
g2
Ntp12705
Rp12706
(dp12707
g17
(lp12708
g0
(g8
g2
Ntp12709
Rp12710
(dp12711
g12
g0
(g13
g2
Ntp12712
Rp12713
(dp12714
g17
(lp12715
g2530
asg55
(itheano.gof.utils
scratchpad
p12716
(dp12717
g138
(lp12718
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12719
tp12720
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12721
tp12722
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p12723
tp12724
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12725
tp12726
asbsg154
(lp12727
g12710
asg156
g0
(g157
g2
Ntp12728
Rp12729
(dp12730
g161
(lp12731
sg163
(lp12732
sg165
(lp12733
I0
asg167
(tsg168
I00
sg169
(g170
tp12734
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12735
(dp12736
bsg59
g0
(g60
g2
Ntp12737
Rp12738
(dp12739
g64
(I01
tp12740
sg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12741
Rp12742
(dp12743
g12
g0
(g13
g2
Ntp12744
Rp12745
(dp12746
g17
(lp12747
g11947
asg55
(itheano.gof.utils
scratchpad
p12748
(dp12749
g138
(lp12750
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12751
tp12752
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12753
tp12754
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12755
tp12756
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12757
tp12758
asbsg154
(lp12759
g12742
asg156
g0
(g196
g2
Ntp12760
Rp12761
(dp12762
g38
Nsg202
g2385
sg211
(dp12763
sg213
Nsg216
(dp12764
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12765
(dp12766
g138
(lp12767
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12768
tp12769
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12770
tp12771
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12772
tp12773
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12774
tp12775
asbsg59
g0
(g60
g2
Ntp12776
Rp12777
(dp12778
g64
(I00
tp12779
sg65
S'float64'
p12780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12781
(dp12782
g138
(lp12783
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12784
tp12785
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12786
tp12787
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12788
tp12789
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12790
tp12791
asbsg154
(lp12792
g12703
asg156
g0
(g196
g2
Ntp12793
Rp12794
(dp12795
g38
Nsg202
g2567
sg211
(dp12796
sg213
Nsg216
(dp12797
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12798
(dp12799
g138
(lp12800
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12801
tp12802
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12803
tp12804
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12805
tp12806
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12807
tp12808
asbsg59
g0
(g60
g2
Ntp12809
Rp12810
(dp12811
g64
(I00
tp12812
sg65
S'float64'
p12813
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12814
(dp12815
g138
(lp12816
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p12817
tp12818
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p12819
tp12820
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12821
tp12822
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12823
tp12824
asbsg154
(lp12825
g11863
asg156
g0
(g196
g2
Ntp12826
Rp12827
(dp12828
g38
Nsg202
g501
sg211
(dp12829
sg213
Nsg216
(dp12830
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12831
(dp12832
g138
(lp12833
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p12834
tp12835
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p12836
tp12837
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12838
tp12839
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p12840
tp12841
asbsg59
g0
(g60
g2
Ntp12842
Rp12843
(dp12844
g64
(I00
tp12845
sg65
S'float64'
p12846
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12847
(dp12848
g138
(lp12849
(g3127
I4572
g3128
S'xgrad = outer(gz, y.T)'
p12850
tp12851
a(g5328
I4937
g5329
S"x.dimshuffle(0, 'x'),"
p12852
tp12853
a(g5332
I324
g5333
S'return op(self)'
p12854
tp12855
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12856
tp12857
asbsg154
(lp12858
g11856
asg156
g0
(g157
g2
Ntp12859
Rp12860
(dp12861
g161
(lp12862
sg163
(lp12863
I0
asg165
(lp12864
I1
asg167
(I00
tp12865
sg168
I00
sg169
(I0
g170
tp12866
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12867
(dp12868
bsg59
g0
(g60
g2
Ntp12869
Rp12870
(dp12871
g64
(I00
I01
tp12872
sg65
g12846
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12873
Rp12874
(dp12875
g12
g0
(g13
g2
Ntp12876
Rp12877
(dp12878
g17
(lp12879
g0
(g8
g2
Ntp12880
Rp12881
(dp12882
g12
g0
(g13
g2
Ntp12883
Rp12884
(dp12885
g17
(lp12886
g331
asg55
(itheano.gof.utils
scratchpad
p12887
(dp12888
g138
(lp12889
(g3127
I4572
g3128
S'xgrad = outer(gz, y.T)'
p12890
tp12891
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p12892
tp12893
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p12894
tp12895
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12896
tp12897
asbsg154
(lp12898
g12881
asg156
g0
(g157
g2
Ntp12899
Rp12900
(dp12901
g161
(lp12902
sg163
(lp12903
I0
asg165
(lp12904
sg167
g346
sg168
I00
sg169
(I0
tp12905
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12906
(dp12907
bsg59
g0
(g60
g2
Ntp12908
Rp12909
(dp12910
g64
(I00
tp12911
sg65
g347
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12912
(dp12913
g138
(lp12914
(g3127
I4572
g3128
S'xgrad = outer(gz, y.T)'
p12915
tp12916
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p12917
tp12918
a(g5332
I324
g5333
S'return op(self)'
p12919
tp12920
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12921
tp12922
asbsg154
(lp12923
g12874
asg156
g0
(g157
g2
Ntp12924
Rp12925
(dp12926
g161
(lp12927
sg163
(lp12928
I0
asg165
(lp12929
I0
asg167
(I00
tp12930
sg168
I00
sg169
(g170
I0
tp12931
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12932
(dp12933
bsg59
g0
(g60
g2
Ntp12934
Rp12935
(dp12936
g64
(I01
I00
tp12937
sg65
g347
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12938
(dp12939
g138
(lp12940
(g3127
I4572
g3128
S'xgrad = outer(gz, y.T)'
p12941
tp12942
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p12943
tp12944
a(g2162
I4732
g2155
S'return _dot(a, b)'
p12945
tp12946
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12947
tp12948
asbsg154
(lp12949
g11849
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12950
(dp12951
bsg59
g0
(g60
g2
Ntp12952
Rp12953
(dp12954
g64
(I00
I00
tp12955
sg65
S'float64'
p12956
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p12957
(dp12958
g138
(lp12959
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12960
tp12961
a(g3778
I1582
g3128
S'outer_inp_seqs.append(x[::-1])'
p12962
tp12963
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p12964
tp12965
a(g144
I401
g145
S'self.add_tag_trace(node)'
p12966
tp12967
asbsg154
(lp12968
g11842
asg156
g0
(g762
g2
Ntp12969
Rp12970
(dp12971
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p12972
tp12973
Rp12974
tp12975
Rp12976
tp12977
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p12978
(dp12979
bsg59
g0
(g60
g2
Ntp12980
Rp12981
(dp12982
g64
(I00
I00
tp12983
sg65
g12956
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp12984
Rp12985
(dp12986
g12
g0
(g13
g2
Ntp12987
Rp12988
(dp12989
g17
(lp12990
g11683
asg55
(itheano.gof.utils
scratchpad
p12991
(dp12992
g138
(lp12993
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12994
tp12995
a(g3778
I1608
g3128
S'outer_inp_seqs += [x[::-1] for x in self.outer_nitsot_outs(outs)]'
p12996
tp12997
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p12998
tp12999
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13000
tp13001
asbsg154
(lp13002
g12985
asg156
g0
(g762
g2
Ntp13003
Rp13004
(dp13005
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13006
tp13007
Rp13008
tp13009
Rp13010
tp13011
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13012
(dp13013
bsg59
g0
(g60
g2
Ntp13014
Rp13015
(dp13016
g64
(I00
I00
tp13017
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag11690
asg55
(itheano.gof.utils
scratchpad
p13018
(dp13019
g138
(lp13020
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p13021
tp13022
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13023
tp13024
a(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p13025
tp13026
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13027
tp13028
asbsg154
(lp13029
g11662
asg156
g0
(g2057
g2
Ntp13030
Rp13031
(dp13032
g529
I00
sg17
(lp13033
g0
(g8
g2
Ntp13034
Rp13035
(dp13036
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p13037
(dp13038
g138
(lp13039
(g3778
I1420
g3128
S'self.outputs)'
p13040
tp13041
a(g5099
I793
g5100
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p13042
tp13043
a(g2090
I75
g2091
S'nw_x = x.type()'
p13044
tp13045
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13046
tp13047
asbsg59
g9068
sg38
Nsbag0
(g8
g2
Ntp13048
Rp13049
(dp13050
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p13051
(dp13052
g138
(lp13053
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13054
tp13055
a(g3778
I1525
g3128
S'dC_dXt = safe_new(dC_douts[idx][0])'
p13056
tp13057
a(g2090
I75
g2091
S'nw_x = x.type()'
p13058
tp13059
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13060
tp13061
asbsg59
g0
(g60
g2
Ntp13062
Rp13063
(dp13064
g64
(I00
tp13065
sg65
g12956
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13066
Rp13067
(dp13068
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p13069
(dp13070
g138
(lp13071
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13072
tp13073
a(g3778
I1497
g3128
S'Xt_placeholder = safe_new(Xt)'
p13074
tp13075
a(g2090
I75
g2091
S'nw_x = x.type()'
p13076
tp13077
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13078
tp13079
asbsg59
g9987
sg38
Nsbasg2101
(lp13080
sg2105
I-151695392037351152
sg154
(lp13081
g0
(g8
g2
Ntp13082
Rp13083
(dp13084
g12
g0
(g13
g2
Ntp13085
Rp13086
(dp13087
g17
(lp13088
g0
(g8
g2
Ntp13089
Rp13090
(dp13091
g12
g0
(g13
g2
Ntp13092
Rp13093
(dp13094
g17
(lp13095
g13035
ag0
(g8
g2
Ntp13096
Rp13097
(dp13098
g12
g0
(g13
g2
Ntp13099
Rp13100
(dp13101
g17
(lp13102
g1682
asg55
(itheano.gof.utils
scratchpad
p13103
(dp13104
g138
(lp13105
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13106
tp13107
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13108
tp13109
a(g148
I533
g149
S'inplace=False)(input))'
p13110
tp13111
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13112
tp13113
asbsg154
(lp13114
g13097
asg156
g0
(g157
g2
Ntp13115
Rp13116
(dp13117
g161
(lp13118
sg163
(lp13119
sg165
(lp13120
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp13121
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13122
(dp13123
bsg59
g0
(g60
g2
Ntp13124
Rp13125
(dp13126
g64
(I01
I01
I01
tp13127
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13128
(dp13129
g138
(lp13130
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13131
tp13132
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p13133
tp13134
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13135
tp13136
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13137
tp13138
asbsg154
(lp13139
g13090
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13140
(dp13141
g138
(lp13142
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13143
tp13144
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13145
tp13146
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13147
tp13148
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13149
tp13150
asbsg59
g0
(g60
g2
Ntp13151
Rp13152
(dp13153
g64
(I00
I00
I00
tp13154
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13155
Rp13156
(dp13157
g12
g0
(g13
g2
Ntp13158
Rp13159
(dp13160
g17
(lp13161
g0
(g8
g2
Ntp13162
Rp13163
(dp13164
g12
g0
(g13
g2
Ntp13165
Rp13166
(dp13167
g17
(lp13168
g0
(g8
g2
Ntp13169
Rp13170
(dp13171
g12
g0
(g13
g2
Ntp13172
Rp13173
(dp13174
g17
(lp13175
g13035
asg55
(itheano.gof.utils
scratchpad
p13176
(dp13177
g138
g9117
sbsg154
(lp13178
g13170
asg156
g9130
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13179
(dp13180
bsg59
g9141
sg38
Nsbag0
(g8
g2
Ntp13181
Rp13182
(dp13183
g12
g0
(g13
g2
Ntp13184
Rp13185
(dp13186
g17
(lp13187
g1682
asg55
(itheano.gof.utils
scratchpad
p13188
(dp13189
g138
(lp13190
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13191
tp13192
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13193
tp13194
a(g148
I533
g149
S'inplace=False)(input))'
p13195
tp13196
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13197
tp13198
asbsg154
(lp13199
g13182
asg156
g0
(g157
g2
Ntp13200
Rp13201
(dp13202
g161
(lp13203
sg163
(lp13204
sg165
(lp13205
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp13206
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13207
(dp13208
bsg59
g0
(g60
g2
Ntp13209
Rp13210
(dp13211
g64
(I01
I01
I01
tp13212
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13213
(dp13214
g138
(lp13215
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13216
tp13217
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p13218
tp13219
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13220
tp13221
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13222
tp13223
asbsg154
(lp13224
g13163
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13225
(dp13226
g138
(lp13227
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13228
tp13229
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13230
tp13231
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13232
tp13233
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13234
tp13235
asbsg59
g0
(g60
g2
Ntp13236
Rp13237
(dp13238
g64
(I00
I00
I00
tp13239
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13240
Rp13241
(dp13242
g12
g0
(g13
g2
Ntp13243
Rp13244
(dp13245
g17
(lp13246
g0
(g8
g2
Ntp13247
Rp13248
(dp13249
g12
g0
(g13
g2
Ntp13250
Rp13251
(dp13252
g17
(lp13253
g0
(g8
g2
Ntp13254
Rp13255
(dp13256
g12
g0
(g13
g2
Ntp13257
Rp13258
(dp13259
g17
(lp13260
g0
(g8
g2
Ntp13261
Rp13262
(dp13263
g12
g0
(g13
g2
Ntp13264
Rp13265
(dp13266
g17
(lp13267
g0
(g8
g2
Ntp13268
Rp13269
(dp13270
g12
g0
(g13
g2
Ntp13271
Rp13272
(dp13273
g17
(lp13274
g0
(g8
g2
Ntp13275
Rp13276
(dp13277
g12
g0
(g13
g2
Ntp13278
Rp13279
(dp13280
g17
(lp13281
g0
(g8
g2
Ntp13282
Rp13283
(dp13284
g12
g0
(g13
g2
Ntp13285
Rp13286
(dp13287
g17
(lp13288
g0
(g8
g2
Ntp13289
Rp13290
(dp13291
g12
g0
(g13
g2
Ntp13292
Rp13293
(dp13294
g17
(lp13295
g13170
asg55
(itheano.gof.utils
scratchpad
p13296
(dp13297
g138
g9146
sbsg154
(lp13298
g13290
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13299
(dp13300
g138
g9158
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13301
(dp13302
g138
g9169
sbsg154
(lp13303
g13283
asg156
g9180
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13304
(dp13305
bsg59
g9189
sg38
Nsbag0
(g8
g2
Ntp13306
Rp13307
(dp13308
g12
g0
(g13
g2
Ntp13309
Rp13310
(dp13311
g17
(lp13312
g13170
ag0
(g1605
g2
Ntp13313
Rp13314
(dp13315
g12
g0
(g13
g2
Ntp13316
Rp13317
(dp13318
g17
(lp13319
g13283
asg55
(itheano.gof.utils
scratchpad
p13320
(dp13321
g138
g9207
sbsg154
(lp13322
g13314
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13323
(dp13324
bsg59
g9220
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13325
(dp13326
g138
g9224
sbsg154
(lp13327
g13307
asg156
g9235
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13328
(dp13329
bsg59
g9246
sg38
Nsbag0
(g8
g2
Ntp13330
Rp13331
(dp13332
g12
g0
(g13
g2
Ntp13333
Rp13334
(dp13335
g17
(lp13336
g0
(g8
g2
Ntp13337
Rp13338
(dp13339
g12
g0
(g13
g2
Ntp13340
Rp13341
(dp13342
g17
(lp13343
g0
(g33
g2
Ntp13344
Rp13345
(dp13346
g37
Nsg55
(itheano.gof.utils
scratchpad
p13347
(dp13348
g58
Nsbsg59
g1692
sg38
Nsg40
g1686
sbag0
(g8
g2
Ntp13349
Rp13350
(dp13351
g12
g0
(g13
g2
Ntp13352
Rp13353
(dp13354
g17
(lp13355
g13283
ag0
(g8
g2
Ntp13356
Rp13357
(dp13358
g12
g0
(g13
g2
Ntp13359
Rp13360
(dp13361
g17
(lp13362
g0
(g8
g2
Ntp13363
Rp13364
(dp13365
g12
g0
(g13
g2
Ntp13366
Rp13367
(dp13368
g17
(lp13369
g0
(g8
g2
Ntp13370
Rp13371
(dp13372
g12
g0
(g13
g2
Ntp13373
Rp13374
(dp13375
g17
(lp13376
g0
(g8
g2
Ntp13377
Rp13378
(dp13379
g12
g0
(g13
g2
Ntp13380
Rp13381
(dp13382
g17
(lp13383
g0
(g33
g2
Ntp13384
Rp13385
(dp13386
g37
Nsg55
(itheano.gof.utils
scratchpad
p13387
(dp13388
g58
Nsbsg59
g9304
sg38
Nsg40
g9310
sbasg55
(itheano.gof.utils
scratchpad
p13389
(dp13390
g138
g9316
sbsg154
(lp13391
g13378
asg156
g9327
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13392
(dp13393
bsg59
g9336
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13394
(dp13395
g138
g9341
sbsg154
(lp13396
g13371
asg156
g9352
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13397
(dp13398
g138
g9357
sbsg59
g9367
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13399
(dp13400
g138
g9372
sbsg154
(lp13401
g13364
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13402
(dp13403
g138
g9384
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13404
(dp13405
g138
g9395
sbsg154
(lp13406
g13357
asg156
g9406
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13407
(dp13408
bsg59
g9415
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13409
(dp13410
g138
g9419
sbsg154
(lp13411
g13350
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13412
(dp13413
g138
g9431
sbsg59
g9441
sg38
Nsbag0
(g8
g2
Ntp13414
Rp13415
(dp13416
g12
g0
(g13
g2
Ntp13417
Rp13418
(dp13419
g17
(lp13420
g0
(g8
g2
Ntp13421
Rp13422
(dp13423
g12
g0
(g13
g2
Ntp13424
Rp13425
(dp13426
g17
(lp13427
g13371
asg55
(itheano.gof.utils
scratchpad
p13428
(dp13429
g138
g9460
sbsg154
(lp13430
g13422
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13431
(dp13432
g138
g9472
sbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13433
(dp13434
g138
g9483
sbsg154
(lp13435
g13415
asg156
g9494
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13436
(dp13437
bsg59
g9503
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13438
(dp13439
g138
g9507
sbsg154
(lp13440
g13338
asg156
g1962
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13441
(dp13442
g138
g9519
sbsg59
g9529
sg38
Nsbag13371
ag0
(g1605
g2
Ntp13443
Rp13444
(dp13445
g12
g0
(g13
g2
Ntp13446
Rp13447
(dp13448
g17
(lp13449
g13357
asg55
(itheano.gof.utils
scratchpad
p13450
(dp13451
g138
g9541
sbsg154
(lp13452
g13444
asg156
g1632
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13453
(dp13454
bsg59
g9554
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13455
(dp13456
g138
g9558
sbsg154
(lp13457
g13331
asg156
g9569
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13458
(dp13459
g138
g9580
sbsg59
g9529
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13460
(dp13461
g138
(lp13462
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p13463
tp13464
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13465
tp13466
a(g3778
I1400
g3128
S'outs = self(*inputs)'
p13467
tp13468
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13469
tp13470
asbsg154
(lp13471
g13276
asg156
g9602
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13472
(dp13473
g138
(lp13474
(g3778
I1400
g3128
S'outs = self(*inputs)'
p13475
tp13476
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13477
tp13478
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p13479
tp13480
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13481
tp13482
asbsg59
g9924
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13483
(dp13484
g138
(lp13485
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13486
tp13487
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p13488
tp13489
a(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13490
tp13491
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13492
tp13493
asbsg154
(lp13494
g13269
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13495
(dp13496
g138
(lp13497
(g715
I255
g716
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13498
tp13499
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13500
tp13501
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p13502
tp13503
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13504
tp13505
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13506
(dp13507
g138
(lp13508
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13509
tp13510
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p13511
tp13512
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13513
tp13514
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13515
tp13516
asbsg154
(lp13517
g13262
asg156
g0
(g762
g2
Ntp13518
Rp13519
(dp13520
g766
(g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p13521
tp13522
Rp13523
tp13524
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13525
(dp13526
bsg59
g0
(g60
g2
Ntp13527
Rp13528
(dp13529
g64
(tsg65
g742
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag469
asg55
(itheano.gof.utils
scratchpad
p13530
(dp13531
g138
(lp13532
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13533
tp13534
a(g3778
I1412
g3128
S'grad_steps = self.outer_sitsot_outs(outs)[0].shape[0] - 1'
p13535
tp13536
a(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p13537
tp13538
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13539
tp13540
asbsg154
(lp13541
g13255
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13542
(dp13543
g138
(lp13544
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p13545
tp13546
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13547
tp13548
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13549
tp13550
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13551
tp13552
asbsg59
g0
(g60
g2
Ntp13553
Rp13554
(dp13555
g64
(tsg65
S'int64'
p13556
sg67
g745
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13557
Rp13558
(dp13559
g12
g0
(g13
g2
Ntp13560
Rp13561
(dp13562
g17
(lp13563
g13307
asg55
(itheano.gof.utils
scratchpad
p13564
(dp13565
g138
(lp13566
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13567
tp13568
a(g3778
I1563
g3128
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p13569
tp13570
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13571
tp13572
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13573
tp13574
asbsg154
(lp13575
g13558
asg156
g0
(g762
g2
Ntp13576
Rp13577
(dp13578
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13579
tp13580
Rp13581
tp13582
Rp13583
tp13584
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13585
(dp13586
bsg59
g0
(g60
g2
Ntp13587
Rp13588
(dp13589
g64
(I00
I00
I00
tp13590
sg65
g8729
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13591
Rp13592
(dp13593
g12
g0
(g13
g2
Ntp13594
Rp13595
(dp13596
g17
(lp13597
g0
(g8
g2
Ntp13598
Rp13599
(dp13600
g12
g0
(g13
g2
Ntp13601
Rp13602
(dp13603
g17
(lp13604
g13276
asg55
(itheano.gof.utils
scratchpad
p13605
(dp13606
g138
(lp13607
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13608
tp13609
a(g3778
I1579
g3128
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p13610
tp13611
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13612
tp13613
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13614
tp13615
asbsg154
(lp13616
g13599
asg156
g0
(g762
g2
Ntp13617
Rp13618
(dp13619
g766
(g1399
(Ng767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13620
tp13621
Rp13622
Ntp13623
Rp13624
tp13625
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13626
(dp13627
bsg59
g0
(g60
g2
Ntp13628
Rp13629
(dp13630
g64
(I00
I00
tp13631
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13632
(dp13633
g138
(lp13634
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13635
tp13636
a(g3778
I1579
g3128
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p13637
tp13638
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13639
tp13640
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13641
tp13642
asbsg154
(lp13643
g13592
asg156
g0
(g762
g2
Ntp13644
Rp13645
(dp13646
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13647
tp13648
Rp13649
tp13650
Rp13651
tp13652
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13653
(dp13654
bsg59
g0
(g60
g2
Ntp13655
Rp13656
(dp13657
g64
(I00
I00
tp13658
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13659
Rp13660
(dp13661
g12
g0
(g13
g2
Ntp13662
Rp13663
(dp13664
g17
(lp13665
g0
(g8
g2
Ntp13666
Rp13667
(dp13668
g12
g0
(g13
g2
Ntp13669
Rp13670
(dp13671
g17
(lp13672
g13276
asg55
(itheano.gof.utils
scratchpad
p13673
(dp13674
g138
(lp13675
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13676
tp13677
a(g3778
I1607
g3128
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p13678
tp13679
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13680
tp13681
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13682
tp13683
asbsg154
(lp13684
g13667
asg156
g0
(g762
g2
Ntp13685
Rp13686
(dp13687
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13688
tp13689
Rp13690
tp13691
Rp13692
tp13693
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13694
(dp13695
bsg59
g0
(g60
g2
Ntp13696
Rp13697
(dp13698
g64
(I00
I00
tp13699
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13700
(dp13701
g138
(lp13702
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13703
tp13704
a(g3778
I1607
g3128
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p13705
tp13706
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13707
tp13708
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13709
tp13710
asbsg154
(lp13711
g13660
asg156
g0
(g762
g2
Ntp13712
Rp13713
(dp13714
g766
(g1399
(Ng767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13715
tp13716
Rp13717
Ntp13718
Rp13719
tp13720
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13721
(dp13722
bsg59
g0
(g60
g2
Ntp13723
Rp13724
(dp13725
g64
(I00
I00
tp13726
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13727
Rp13728
(dp13729
g12
g0
(g13
g2
Ntp13730
Rp13731
(dp13732
g17
(lp13733
g0
(g8
g2
Ntp13734
Rp13735
(dp13736
g12
g0
(g13
g2
Ntp13737
Rp13738
(dp13739
g17
(lp13740
g0
(g8
g2
Ntp13741
Rp13742
(dp13743
g12
g0
(g13
g2
Ntp13744
Rp13745
(dp13746
g17
(lp13747
g0
(g8
g2
Ntp13748
Rp13749
(dp13750
g12
g0
(g13
g2
Ntp13751
Rp13752
(dp13753
g17
(lp13754
g13283
ag13307
ag13331
asg55
(itheano.gof.utils
scratchpad
p13755
(dp13756
g138
g9591
sbsg154
(lp13757
g13749
asg156
g9602
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13758
(dp13759
g138
g9929
sbsg59
g9924
sg38
Nsbag0
(g8
g2
Ntp13760
Rp13761
(dp13762
g12
g0
(g13
g2
Ntp13763
Rp13764
(dp13765
g17
(lp13766
g1682
asg55
(itheano.gof.utils
scratchpad
p13767
(dp13768
g138
(lp13769
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13770
tp13771
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13772
tp13773
a(g148
I533
g149
S'inplace=False)(input))'
p13774
tp13775
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13776
tp13777
asbsg154
(lp13778
g13761
asg156
g0
(g157
g2
Ntp13779
Rp13780
(dp13781
g161
(lp13782
sg163
(lp13783
sg165
(lp13784
I0
aI1
asg167
(tsg168
I00
sg169
(g170
g170
tp13785
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13786
(dp13787
bsg59
g0
(g60
g2
Ntp13788
Rp13789
(dp13790
g64
(I01
I01
tp13791
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13792
(dp13793
g138
(lp13794
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13795
tp13796
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p13797
tp13798
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13799
tp13800
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13801
tp13802
asbsg154
(lp13803
g13742
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13804
(dp13805
g138
(lp13806
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13807
tp13808
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13809
tp13810
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13811
tp13812
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13813
tp13814
asbsg59
g0
(g60
g2
Ntp13815
Rp13816
(dp13817
g64
(I00
I00
tp13818
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp13819
Rp13820
(dp13821
g12
g0
(g13
g2
Ntp13822
Rp13823
(dp13824
g17
(lp13825
g0
(g8
g2
Ntp13826
Rp13827
(dp13828
g12
g0
(g13
g2
Ntp13829
Rp13830
(dp13831
g17
(lp13832
g0
(g8
g2
Ntp13833
Rp13834
(dp13835
g12
g0
(g13
g2
Ntp13836
Rp13837
(dp13838
g17
(lp13839
g13749
asg55
(itheano.gof.utils
scratchpad
p13840
(dp13841
g138
g9940
sbsg154
(lp13842
g13834
asg156
g9951
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13843
(dp13844
bsg59
g9962
sg38
Nsbag0
(g8
g2
Ntp13845
Rp13846
(dp13847
g12
g0
(g13
g2
Ntp13848
Rp13849
(dp13850
g17
(lp13851
g1682
asg55
(itheano.gof.utils
scratchpad
p13852
(dp13853
g138
(lp13854
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13855
tp13856
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13857
tp13858
a(g148
I533
g149
S'inplace=False)(input))'
p13859
tp13860
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13861
tp13862
asbsg154
(lp13863
g13846
asg156
g0
(g157
g2
Ntp13864
Rp13865
(dp13866
g161
(lp13867
sg163
(lp13868
sg165
(lp13869
I0
aI1
asg167
(tsg168
I00
sg169
(g170
g170
tp13870
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13871
(dp13872
bsg59
g0
(g60
g2
Ntp13873
Rp13874
(dp13875
g64
(I01
I01
tp13876
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13877
(dp13878
g138
(lp13879
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13880
tp13881
a(g3431
I548
g3402
S'return theano.tensor.basic.zeros_like(model, dtype=dtype)'
p13882
tp13883
a(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13884
tp13885
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13886
tp13887
asbsg154
(lp13888
g13827
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13889
(dp13890
g138
(lp13891
(g3401
I2079
g3402
S'return fill(model, constant(0.0, dtype=dtype))'
p13892
tp13893
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13894
tp13895
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13896
tp13897
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13898
tp13899
asbsg59
g0
(g60
g2
Ntp13900
Rp13901
(dp13902
g64
(I00
I00
tp13903
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag13049
asg55
(itheano.gof.utils
scratchpad
p13904
(dp13905
g138
(lp13906
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p13907
tp13908
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13909
tp13910
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13911
tp13912
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13913
tp13914
asbsg154
(lp13915
g13820
asg156
g0
(g2020
g2
Ntp13916
Rp13917
(dp13918
g766
(lp13919
g9982
asg2030
(lp13920
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13921
(dp13922
g138
(lp13923
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13924
tp13925
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13926
tp13927
a(g2040
I1109
g149
S'[x.type()])'
p13928
tp13929
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13930
tp13931
asbsg59
g13901
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13932
(dp13933
g138
(lp13934
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p13935
tp13936
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13937
tp13938
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13939
tp13940
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13941
tp13942
asbsg154
(lp13943
g13735
asg156
g0
(g2020
g2
Ntp13944
Rp13945
(dp13946
g766
(lp13947
g1399
(g9955
NNtp13948
Rp13949
asg2030
(lp13950
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13951
(dp13952
g138
(lp13953
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p13954
tp13955
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p13956
tp13957
a(g2040
I1109
g149
S'[x.type()])'
p13958
tp13959
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p13960
tp13961
asbsg59
g13816
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p13962
(dp13963
g138
(lp13964
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13965
tp13966
a(g3778
I1707
g3128
S'outer_inp_mitmot.append(dC_douts[idx + offset][::-1])'
p13967
tp13968
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p13969
tp13970
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13971
tp13972
asbsg154
(lp13973
g13728
asg156
g0
(g762
g2
Ntp13974
Rp13975
(dp13976
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13977
tp13978
Rp13979
tp13980
Rp13981
tp13982
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p13983
(dp13984
bsg59
g0
(g60
g2
Ntp13985
Rp13986
(dp13987
g64
(I00
I00
tp13988
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag13283
asg55
(itheano.gof.utils
scratchpad
p13989
(dp13990
g138
(lp13991
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p13992
tp13993
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13994
tp13995
a(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p13996
tp13997
a(g144
I401
g145
S'self.add_tag_trace(node)'
p13998
tp13999
asbsg154
(lp14000
g0
(g8
g2
Ntp14001
Rp14002
(dp14003
g12
g13251
sg37
I0
sg55
(itheano.gof.utils
scratchpad
p14004
(dp14005
g138
(lp14006
(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p14007
tp14008
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14009
tp14010
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p14011
tp14012
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14013
tp14014
asbsg59
g0
(g60
g2
Ntp14015
Rp14016
(dp14017
g64
(I00
I00
tp14018
sg65
S'float64'
p14019
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag13248
asg156
g0
(g2057
g2
Ntp14020
Rp14021
(dp14022
g529
I00
sg17
(lp14023
g0
(g8
g2
Ntp14024
Rp14025
(dp14026
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p14027
(dp14028
g138
(lp14029
(g3778
I1420
g3128
S'self.outputs)'
p14030
tp14031
a(g5099
I793
g5100
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p14032
tp14033
a(g2090
I75
g2091
S'nw_x = x.type()'
p14034
tp14035
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14036
tp14037
asbsg59
g9620
sg38
Nsbag0
(g8
g2
Ntp14038
Rp14039
(dp14040
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p14041
(dp14042
g138
(lp14043
(g3778
I1420
g3128
S'self.outputs)'
p14044
tp14045
a(g5099
I793
g5100
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p14046
tp14047
a(g2090
I75
g2091
S'nw_x = x.type()'
p14048
tp14049
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14050
tp14051
asbsg59
g9638
sg38
Nsbag0
(g8
g2
Ntp14052
Rp14053
(dp14054
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p14055
(dp14056
g138
(lp14057
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14058
tp14059
a(g3778
I1497
g3128
S'Xt_placeholder = safe_new(Xt)'
p14060
tp14061
a(g2090
I75
g2091
S'nw_x = x.type()'
p14062
tp14063
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14064
tp14065
asbsg59
g9777
sg38
Nsbag0
(g8
g2
Ntp14066
Rp14067
(dp14068
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p14069
(dp14070
g138
(lp14071
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14072
tp14073
a(g3778
I1521
g3128
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p14074
tp14075
a(g2090
I75
g2091
S'nw_x = x.type()'
p14076
tp14077
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14078
tp14079
asbsg59
g9777
sg38
Nsbag0
(g8
g2
Ntp14080
Rp14081
(dp14082
g12
Nsg37
Nsg55
(itheano.gof.utils
scratchpad
p14083
(dp14084
g138
(lp14085
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14086
tp14087
a(g3778
I1553
g3128
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p14088
tp14089
a(g2090
I75
g2091
S'nw_x = x.type()'
p14090
tp14091
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14092
tp14093
asbsg59
g9777
sg38
Nsbasg2101
(lp14094
(lp14095
I0
aI1
aasg2105
I1993279163587130911
sg154
(lp14096
g0
(g8
g2
Ntp14097
Rp14098
(dp14099
g12
g0
(g13
g2
Ntp14100
Rp14101
(dp14102
g17
(lp14103
g0
(g8
g2
Ntp14104
Rp14105
(dp14106
g12
g0
(g13
g2
Ntp14107
Rp14108
(dp14109
g17
(lp14110
g14067
ag0
(g8
g2
Ntp14111
Rp14112
(dp14113
g12
g0
(g13
g2
Ntp14114
Rp14115
(dp14116
g17
(lp14117
g0
(g8
g2
Ntp14118
Rp14119
(dp14120
g12
g0
(g13
g2
Ntp14121
Rp14122
(dp14123
g17
(lp14124
g14025
ag0
(g8
g2
Ntp14125
Rp14126
(dp14127
g12
g0
(g13
g2
Ntp14128
Rp14129
(dp14130
g17
(lp14131
g0
(g8
g2
Ntp14132
Rp14133
(dp14134
g12
g0
(g13
g2
Ntp14135
Rp14136
(dp14137
g17
(lp14138
g14025
asg55
(itheano.gof.utils
scratchpad
p14139
(dp14140
g138
g9675
sbsg154
(lp14141
g14133
asg156
g9687
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14142
(dp14143
g138
g9692
sbsg59
g9702
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14144
(dp14145
g138
g9707
sbsg154
(lp14146
g14126
asg156
g9720
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14147
(dp14148
bsg59
g9729
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14149
(dp14150
g138
g9734
sbsg154
(lp14151
g14119
asg156
g6026
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14152
(dp14153
g138
g9748
sbsg59
g9758
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14154
(dp14155
g138
(lp14156
(g3127
I4567
g3128
S'xgrad = dot(gz, y.T)'
p14157
tp14158
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p14159
tp14160
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p14161
tp14162
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14163
tp14164
asbsg154
(lp14165
g14112
asg156
g0
(g157
g2
Ntp14166
Rp14167
(dp14168
g161
(lp14169
sg163
(lp14170
I1
aI0
asg165
(lp14171
sg167
g9760
sg168
I00
sg169
(I1
I0
tp14172
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14173
(dp14174
bsg59
g0
(g60
g2
Ntp14175
Rp14176
(dp14177
g64
(I00
I00
tp14178
sg65
g9761
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14179
(dp14180
g138
(lp14181
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14182
tp14183
a(g3127
I4567
g3128
S'xgrad = dot(gz, y.T)'
p14184
tp14185
a(g2162
I4732
g2155
S'return _dot(a, b)'
p14186
tp14187
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14188
tp14189
asbsg154
(lp14190
g14105
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14191
(dp14192
bsg59
g0
(g60
g2
Ntp14193
Rp14194
(dp14195
g64
(I00
tp14196
sg65
S'float64'
p14197
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag14081
asg55
(itheano.gof.utils
scratchpad
p14198
(dp14199
g138
(lp14200
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14201
tp14202
a(g3778
I1560
g3128
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p14203
tp14204
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p14205
tp14206
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14207
tp14208
asbsg154
(lp14209
g14098
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14210
(dp14211
g138
(lp14212
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p14213
tp14214
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14215
tp14216
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14217
tp14218
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14219
tp14220
asbsg59
g0
(g60
g2
Ntp14221
Rp14222
(dp14223
g64
(I00
tp14224
sg65
g14019
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp14225
Rp14226
(dp14227
g12
g0
(g13
g2
Ntp14228
Rp14229
(dp14230
g17
(lp14231
g0
(g8
g2
Ntp14232
Rp14233
(dp14234
g12
g0
(g13
g2
Ntp14235
Rp14236
(dp14237
g17
(lp14238
g0
(g8
g2
Ntp14239
Rp14240
(dp14241
g12
g0
(g13
g2
Ntp14242
Rp14243
(dp14244
g17
(lp14245
g0
(g8
g2
Ntp14246
Rp14247
(dp14248
g12
g0
(g13
g2
Ntp14249
Rp14250
(dp14251
g17
(lp14252
g0
(g8
g2
Ntp14253
Rp14254
(dp14255
g12
g0
(g13
g2
Ntp14256
Rp14257
(dp14258
g17
(lp14259
g14039
asg55
(itheano.gof.utils
scratchpad
p14260
(dp14261
g138
(lp14262
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p14263
tp14264
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p14265
tp14266
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p14267
tp14268
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14269
tp14270
asbsg154
(lp14271
g14254
asg156
g0
(g157
g2
Ntp14272
Rp14273
(dp14274
g161
(lp14275
sg163
(lp14276
I0
asg165
(lp14277
sg167
g9640
sg168
I00
sg169
(I0
tp14278
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14279
(dp14280
bsg59
g0
(g60
g2
Ntp14281
Rp14282
(dp14283
g64
(I00
tp14284
sg65
g9641
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14285
(dp14286
g138
(lp14287
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p14288
tp14289
a(g5328
I4937
g5329
S"x.dimshuffle(0, 'x'),"
p14290
tp14291
a(g5332
I324
g5333
S'return op(self)'
p14292
tp14293
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14294
tp14295
asbsg154
(lp14296
g14247
asg156
g0
(g157
g2
Ntp14297
Rp14298
(dp14299
g161
(lp14300
sg163
(lp14301
I0
asg165
(lp14302
I1
asg167
(I00
tp14303
sg168
I00
sg169
(I0
g170
tp14304
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14305
(dp14306
bsg59
g0
(g60
g2
Ntp14307
Rp14308
(dp14309
g64
(I00
I01
tp14310
sg65
g9641
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp14311
Rp14312
(dp14313
g12
g0
(g13
g2
Ntp14314
Rp14315
(dp14316
g17
(lp14317
g14067
asg55
(itheano.gof.utils
scratchpad
p14318
(dp14319
g138
(lp14320
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p14321
tp14322
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p14323
tp14324
a(g5332
I324
g5333
S'return op(self)'
p14325
tp14326
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14327
tp14328
asbsg154
(lp14329
g14312
asg156
g0
(g157
g2
Ntp14330
Rp14331
(dp14332
g161
(lp14333
sg163
(lp14334
I0
asg165
(lp14335
I0
asg167
(I00
tp14336
sg168
I00
sg169
(g170
I0
tp14337
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14338
(dp14339
bsg59
g0
(g60
g2
Ntp14340
Rp14341
(dp14342
g64
(I01
I00
tp14343
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14344
(dp14345
g138
(lp14346
(g3127
I4568
g3128
S'ygrad = outer(x.T, gz)'
p14347
tp14348
a(g5328
I4938
g5329
S"y.dimshuffle('x', 0))"
p14349
tp14350
a(g2162
I4732
g2155
S'return _dot(a, b)'
p14351
tp14352
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14353
tp14354
asbsg154
(lp14355
g14240
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14356
(dp14357
bsg59
g0
(g60
g2
Ntp14358
Rp14359
(dp14360
g64
(I00
I00
tp14361
sg65
S'float64'
p14362
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp14363
Rp14364
(dp14365
g12
g0
(g13
g2
Ntp14366
Rp14367
(dp14368
g17
(lp14369
g0
(g8
g2
Ntp14370
Rp14371
(dp14372
g12
g0
(g13
g2
Ntp14373
Rp14374
(dp14375
g17
(lp14376
g14025
asg55
(itheano.gof.utils
scratchpad
p14377
(dp14378
g138
g9675
sbsg154
(lp14379
g14371
asg156
g9687
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14380
(dp14381
g138
g9692
sbsg59
g9702
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14382
(dp14383
g138
g9707
sbsg154
(lp14384
g14364
asg156
g9720
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14385
(dp14386
bsg59
g9729
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14387
(dp14388
g138
(lp14389
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p14390
tp14391
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p14392
tp14393
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14394
tp14395
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14396
tp14397
asbsg154
(lp14398
g14233
asg156
g0
(g196
g2
Ntp14399
Rp14400
(dp14401
g38
Nsg202
g4543
sg211
(dp14402
sg213
Nsg216
(dp14403
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14404
(dp14405
g138
(lp14406
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14407
tp14408
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14409
tp14410
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14411
tp14412
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14413
tp14414
asbsg59
g0
(g60
g2
Ntp14415
Rp14416
(dp14417
g64
(I00
I00
tp14418
sg65
S'float64'
p14419
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp14420
Rp14421
(dp14422
g12
g0
(g13
g2
Ntp14423
Rp14424
(dp14425
g17
(lp14426
g14025
ag0
(g8
g2
Ntp14427
Rp14428
(dp14429
g12
g0
(g13
g2
Ntp14430
Rp14431
(dp14432
g17
(lp14433
g0
(g8
g2
Ntp14434
Rp14435
(dp14436
g12
g0
(g13
g2
Ntp14437
Rp14438
(dp14439
g17
(lp14440
g0
(g8
g2
Ntp14441
Rp14442
(dp14443
g12
g0
(g13
g2
Ntp14444
Rp14445
(dp14446
g17
(lp14447
g0
(g8
g2
Ntp14448
Rp14449
(dp14450
g12
g0
(g13
g2
Ntp14451
Rp14452
(dp14453
g17
(lp14454
g0
(g8
g2
Ntp14455
Rp14456
(dp14457
g12
g0
(g13
g2
Ntp14458
Rp14459
(dp14460
g17
(lp14461
g0
(g8
g2
Ntp14462
Rp14463
(dp14464
g12
g0
(g13
g2
Ntp14465
Rp14466
(dp14467
g17
(lp14468
g0
(g8
g2
Ntp14469
Rp14470
(dp14471
g12
g0
(g13
g2
Ntp14472
Rp14473
(dp14474
g17
(lp14475
g0
(g8
g2
Ntp14476
Rp14477
(dp14478
g12
g0
(g13
g2
Ntp14479
Rp14480
(dp14481
g17
(lp14482
g14240
ag14025
asg55
(itheano.gof.utils
scratchpad
p14483
(dp14484
g138
(lp14485
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14486
tp14487
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14488
tp14489
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14490
tp14491
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14492
tp14493
asbsg154
(lp14494
g14477
asg156
g0
(g196
g2
Ntp14495
Rp14496
(dp14497
g38
Nsg202
g501
sg211
(dp14498
sg213
Nsg216
(dp14499
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14500
(dp14501
g138
(lp14502
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14503
tp14504
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14505
tp14506
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14507
tp14508
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14509
tp14510
asbsg59
g0
(g60
g2
Ntp14511
Rp14512
(dp14513
g64
(I00
I00
tp14514
sg65
S'float64'
p14515
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14516
(dp14517
g138
(lp14518
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p14519
tp14520
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14521
tp14522
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14523
tp14524
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14525
tp14526
asbsg154
(lp14527
g14470
asg156
g0
(g196
g2
Ntp14528
Rp14529
(dp14530
g38
Nsg202
g2732
sg211
(dp14531
sg213
Nsg216
(dp14532
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14533
(dp14534
g138
(lp14535
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14536
tp14537
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14538
tp14539
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14540
tp14541
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14542
tp14543
asbsg59
g0
(g60
g2
Ntp14544
Rp14545
(dp14546
g64
(I00
I00
tp14547
sg65
g14515
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp14548
Rp14549
(dp14550
g12
g0
(g13
g2
Ntp14551
Rp14552
(dp14553
g17
(lp14554
g14364
ag14364
asg55
(itheano.gof.utils
scratchpad
p14555
(dp14556
g138
(lp14557
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p14558
tp14559
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14560
tp14561
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14562
tp14563
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14564
tp14565
asbsg154
(lp14566
g14549
asg156
g0
(g196
g2
Ntp14567
Rp14568
(dp14569
g38
Nsg202
g501
sg211
(dp14570
sg213
Nsg216
(dp14571
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14572
(dp14573
g138
(lp14574
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14575
tp14576
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14577
tp14578
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14579
tp14580
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14581
tp14582
asbsg59
g0
(g60
g2
Ntp14583
Rp14584
(dp14585
g64
(I00
I01
tp14586
sg65
S'float64'
p14587
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14588
(dp14589
g138
(lp14590
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p14591
tp14592
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p14593
tp14594
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14595
tp14596
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14597
tp14598
asbsg154
(lp14599
g14463
asg156
g0
(g196
g2
Ntp14600
Rp14601
(dp14602
g38
Nsg202
g4543
sg211
(dp14603
sg213
Nsg216
(dp14604
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14605
(dp14606
g138
(lp14607
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p14608
tp14609
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14610
tp14611
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14612
tp14613
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14614
tp14615
asbsg59
g0
(g60
g2
Ntp14616
Rp14617
(dp14618
g64
(I00
I00
tp14619
sg65
S'float64'
p14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14621
(dp14622
g138
(lp14623
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p14624
tp14625
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14626
tp14627
a(g4461
I700
g3128
S'sr = Sum(axis=to_sum)(rval[i])'
p14628
tp14629
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14630
tp14631
asbsg154
(lp14632
g14456
asg156
g0
(g252
g2
Ntp14633
Rp14634
(dp14635
g256
g14620
sg65
g14620
sg172
g173
sg202
g259
sg262
(I1
tp14636
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14637
(dp14638
g138
(lp14639
(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14640
tp14641
a(g268
I1797
g149
S'return CAReduce.make_node(op, input)'
p14642
tp14643
a(g271
I1299
g149
S'broadcastable=broadcastable)()'
p14644
tp14645
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14646
tp14647
asbsg59
g0
(g60
g2
Ntp14648
Rp14649
(dp14650
g64
(I00
tp14651
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14652
(dp14653
g138
(lp14654
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14655
tp14656
a(g4461
I701
g3128
S'sr = sr.dimshuffle(shuffle)'
p14657
tp14658
a(g5332
I324
g5333
S'return op(self)'
p14659
tp14660
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14661
tp14662
asbsg154
(lp14663
g14449
asg156
g0
(g157
g2
Ntp14664
Rp14665
(dp14666
g161
(lp14667
sg163
(lp14668
I0
asg165
(lp14669
I1
asg167
(I00
tp14670
sg168
I00
sg169
(I0
g170
tp14671
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14672
(dp14673
bsg59
g0
(g60
g2
Ntp14674
Rp14675
(dp14676
g64
(I00
I01
tp14677
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14678
(dp14679
g138
(lp14680
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p14681
tp14682
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14683
tp14684
a(S'/usr/local/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p14685
I389
g3128
S'Elemwise(scalar.identity)(gz))]'
p14686
tp14687
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14688
tp14689
asbsg154
(lp14690
g14442
asg156
g0
(g196
g2
Ntp14691
Rp14692
(dp14693
g38
Nsg202
g0
(ctheano.scalar.basic
Identity
p14694
g2
Ntp14695
Rp14696
(dp14697
g207
g2734
sg172
g173
sg38
S'identity'
p14698
sbsg211
(dp14699
sg213
Nsg216
(dp14700
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14701
(dp14702
g138
(lp14703
(g14685
I389
g3128
S'Elemwise(scalar.identity)(gz))]'
p14704
tp14705
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14706
tp14707
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14708
tp14709
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14710
tp14711
asbsg59
g0
(g60
g2
Ntp14712
Rp14713
(dp14714
g64
(I00
I01
tp14715
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14716
(dp14717
g138
(lp14718
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p14719
tp14720
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14721
tp14722
a(g14685
I389
g3128
S'Elemwise(scalar.identity)(gz))]'
p14723
tp14724
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14725
tp14726
asbsg154
(lp14727
g14435
asg156
g0
(g157
g2
Ntp14728
Rp14729
(dp14730
g161
(lp14731
I1
asg163
(lp14732
I0
asg165
(lp14733
sg167
g14677
sg168
I00
sg169
(I0
tp14734
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14735
(dp14736
bsg59
g0
(g60
g2
Ntp14737
Rp14738
(dp14739
g64
(I00
tp14740
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14741
(dp14742
g138
(lp14743
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p14744
tp14745
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14746
tp14747
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14748
tp14749
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14750
tp14751
asbsg154
(lp14752
g14428
asg156
g0
(g157
g2
Ntp14753
Rp14754
(dp14755
g161
(lp14756
sg163
(lp14757
I0
asg165
(lp14758
I1
asg167
g14740
sg168
I00
sg169
(I0
g170
tp14759
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14760
(dp14761
bsg59
g0
(g60
g2
Ntp14762
Rp14763
(dp14764
g64
(I00
I01
tp14765
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14766
(dp14767
g138
(lp14768
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p14769
tp14770
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14771
tp14772
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14773
tp14774
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14775
tp14776
asbsg154
(lp14777
g14421
asg156
g0
(g196
g2
Ntp14778
Rp14779
(dp14780
g38
Nsg202
g3444
sg211
(dp14781
sg213
Nsg216
(dp14782
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14783
(dp14784
g138
(lp14785
(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14786
tp14787
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14788
tp14789
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14790
tp14791
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14792
tp14793
asbsg59
g0
(g60
g2
Ntp14794
Rp14795
(dp14796
g64
(I00
I00
tp14797
sg65
g14620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p14798
(dp14799
g138
(lp14800
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p14801
tp14802
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p14803
tp14804
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p14805
tp14806
a(g144
I401
g145
S'self.add_tag_trace(node)'
p14807
tp14808
asbsg154
(lp14809
g14226
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p14810
(dp14811
g138
(lp14812
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p14813
tp14814
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p14815
tp14816
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14817
tp14818
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p14819
tp14820
asbsg59
g0
(g60
g2
Ntp14821
Rp14822
(dp14823
g64
(I00
I00
tp14824
sg65
S'float64'
p14825
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg2175
I4
sg2176
(lp14826
I00
aI00
aI00
asg2245
I00
sg211
g2178
((lp14827
tp14828
Rp14829
sg2182
I1
sg2183
I1
sg2184
(lp14830
g767
(g745
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p14831
tp14832
Rp14833
aI0
asg2104
I1
sg2190
I5
sg2191
I00
sg2192
I-1
sg2193
I3
sg38
S'grad_of_scan_fn'
p14834
sg2195
g2198
sg2223
g2178
((lp14835
(lp14836
g2193
aI3
aa(lp14837
g2234
aI0
aa(lp14838
g2101
ag14094
aa(lp14839
g2245
aI00
aa(lp14840
g2104
aI1
aa(lp14841
g2229
aI1
aa(lp14842
g2231
a(lp14843
(lp14844
I1
aaaa(lp14845
g2192
aI-1
aa(lp14846
g2189
aI0
aa(lp14847
g2237
aI0
aa(lp14848
g2182
aI1
aa(lp14849
g2191
aI00
aa(lp14850
g529
aI00
aa(lp14851
g211
ag14829
aa(lp14852
g38
ag14834
aa(lp14853
g2242
aNaatp14854
Rp14855
sg2250
((t(g2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p14856
S'md5:f52f5718bd2358862745753c2c77eac4'
p14857
(g9687
((g9620
((I-1
I0
tp14858
I00
tp14859
tp14860
tp14861
(I1
(I00
tp14862
tp14863
tp14864
(g9687
((g9620
(g14858
I00
tp14865
tp14866
tp14867
(I1
(I00
tp14868
tp14869
tp14870
(g14331
((g9777
((I-1
I3
tp14871
I00
tp14872
tp14873
tp14874
(I1
(I00
tp14875
tp14876
tp14877
(g14273
((g9638
((I-1
I1
tp14878
I00
tp14879
tp14880
tp14881
(I1
(I00
tp14882
tp14883
tp14884
(g9720
((g9702
((I0
I0
tp14885
I00
tp14886
tp14887
tp14888
(I1
(I00
tp14889
tp14890
tp14891
(g9720
((g9702
((I1
I0
tp14892
I00
tp14893
tp14894
tp14895
(I1
(I00
tp14896
tp14897
tp14898
(g14298
((g14282
((I3
I0
tp14899
I00
tp14900
tp14901
tp14902
(I1
(I00
tp14903
tp14904
tp14905
(g14568
((g9729
((I4
I0
tp14906
I00
tp14907
tp14908
(g9729
((I4
I0
tp14909
I00
tp14910
tp14911
tp14912
(I1
(I00
tp14913
tp14914
tp14915
(g6026
((g9620
(g14858
I00
tp14916
tp14917
(g9729
((I5
I0
tp14918
I00
tp14919
tp14920
tp14921
(I1
(I00
tp14922
tp14923
tp14924
(g1331
((g14308
((I6
I0
tp14925
I00
tp14926
tp14927
(g14341
((I2
I0
tp14928
I00
tp14929
tp14930
tp14931
(I1
(I00
tp14932
tp14933
tp14934
(g14167
((g9758
((I8
I0
tp14935
I00
tp14936
tp14937
tp14938
(I1
(I00
tp14939
tp14940
tp14941
(g14496
((g14359
((I9
I0
tp14942
I00
tp14943
tp14944
(g9620
(g14858
I00
tp14945
tp14946
tp14947
(I1
(I00
tp14948
tp14949
tp14950
(g14400
((g14359
((I9
I0
tp14951
I00
tp14952
tp14953
(g9729
((I4
I0
tp14954
I00
tp14955
tp14956
tp14957
(I1
(I00
tp14958
tp14959
tp14960
(g1331
((g9777
(g14871
I00
tp14961
tp14962
(g14176
((I10
I0
tp14963
I00
tp14964
tp14965
tp14966
(I1
(I00
tp14967
tp14968
tp14969
(g14529
((g14512
((I11
I0
tp14970
I00
tp14971
tp14972
tp14973
(I1
(I00
tp14974
tp14975
tp14976
(g294
((g14194
((I13
I0
tp14977
I00
tp14978
tp14979
(g9777
((I-1
I4
tp14980
I00
tp14981
tp14982
tp14983
(I1
(I00
tp14984
tp14985
tp14986
(g14601
((g14545
((I14
I0
tp14987
I00
tp14988
tp14989
(g14584
((I7
I0
tp14990
I00
tp14991
tp14992
tp14993
(I1
(I00
tp14994
tp14995
tp14996
(g14634
((g14617
((I16
I0
tp14997
I00
tp14998
tp14999
tp15000
(I1
(I00
tp15001
tp15002
tp15003
(g14665
((g14649
((I17
I0
tp15004
I00
tp15005
tp15006
tp15007
(I1
(I00
tp15008
tp15009
tp15010
(g14692
((g14675
((I18
I0
tp15011
I00
tp15012
tp15013
tp15014
(I1
(I00
tp15015
tp15016
tp15017
(g14729
((g14713
((I19
I0
tp15018
I00
tp15019
tp15020
tp15021
(I1
(I00
tp15022
tp15023
tp15024
(g14754
((g14738
((I20
I0
tp15025
I00
tp15026
tp15027
tp15028
(I1
(I00
tp15029
tp15030
tp15031
(g14779
((g9620
(g14858
I00
tp15032
tp15033
(g14763
((I21
I0
tp15034
I00
tp15035
tp15036
tp15037
(I1
(I00
tp15038
tp15039
tp15040
(g294
((g14416
((I12
I0
tp15041
I00
tp15042
tp15043
(g14795
((I22
I0
tp15044
I00
tp15045
tp15046
tp15047
(I1
(I00
tp15048
tp15049
tp15050
tp15051
tp15052
sg2234
I0
sg2273
(lp15053
I00
aI00
asg2275
I1
sg2237
I0
sg2242
Nsg2276
(lp15054
g14016
ag0
(g60
g2
Ntp15055
Rp15056
(dp15057
g64
(I00
I00
I00
tp15058
sg65
g14825
sg67
g100
sg68
I00
sg38
Nsbasg2189
I0
sg2229
I1
sg2282
I5
sg2231
g14843
sbsbsg37
I1
sg55
(itheano.gof.utils
scratchpad
p15059
(dp15060
g138
(lp15061
(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p15062
tp15063
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15064
tp15065
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p15066
tp15067
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15068
tp15069
asbsg59
g15056
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15070
(dp15071
g138
(lp15072
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15073
tp15074
a(g3778
I1832
g3128
S'gradients.append(x[::-1])'
p15075
tp15076
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p15077
tp15078
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15079
tp15080
asbsg154
(lp15081
g13241
asg156
g0
(g762
g2
Ntp15082
Rp15083
(dp15084
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p15085
tp15086
Rp15087
tp15088
Rp15089
tp15090
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15091
(dp15092
bsg59
g0
(g60
g2
Ntp15093
Rp15094
(dp15095
g64
(I00
I00
I00
tp15096
sg65
g14825
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag13314
asg55
(itheano.gof.utils
scratchpad
p15097
(dp15098
g138
(lp15099
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15100
tp15101
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15102
tp15103
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15104
tp15105
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15106
tp15107
asbsg154
(lp15108
g13156
asg156
g0
(g2020
g2
Ntp15109
Rp15110
(dp15111
g766
(lp15112
g1399
(Ng9238
Ntp15113
Rp15114
asg2030
(lp15115
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15116
(dp15117
g138
(lp15118
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15119
tp15120
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15121
tp15122
a(g2040
I1109
g149
S'[x.type()])'
p15123
tp15124
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15125
tp15126
asbsg59
g13237
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15127
(dp15128
g138
(lp15129
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15130
tp15131
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15132
tp15133
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15134
tp15135
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15136
tp15137
asbsg154
(lp15138
g13083
asg156
g0
(g2020
g2
Ntp15139
Rp15140
(dp15141
g766
(lp15142
g1399
(g9134
NNtp15143
Rp15144
asg2030
(lp15145
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15146
(dp15147
g138
(lp15148
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15149
tp15150
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15151
tp15152
a(g2040
I1109
g149
S'[x.type()])'
p15153
tp15154
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15155
tp15156
asbsg59
g13152
sg38
Nsbasg2175
I4
sg2176
(lp15157
I00
aI00
aI00
asg2245
I00
sg211
g2178
((lp15158
tp15159
Rp15160
sg2182
I1
sg2183
I0
sg2184
(lp15161
I0
asg2104
I0
sg2190
I4
sg2191
I00
sg2192
I-1
sg2193
I3
sg38
S'grad_of_scan_fn'
p15162
sg2195
g2198
sg2223
g2178
((lp15163
(lp15164
g2193
aI3
aa(lp15165
g2234
aI0
aa(lp15166
g2101
ag13080
aa(lp15167
g2245
aI00
aa(lp15168
g2104
aI0
aa(lp15169
g2229
aI0
aa(lp15170
g2231
a(lp15171
aa(lp15172
g2192
aI-1
aa(lp15173
g2189
aI0
aa(lp15174
g2237
aI0
aa(lp15175
g2182
aI1
aa(lp15176
g2191
aI00
aa(lp15177
g529
aI00
aa(lp15178
g211
ag15160
aa(lp15179
g38
ag15162
aa(lp15180
g2242
aNaatp15181
Rp15182
sg2250
((t(g2251
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p15183
S'md5:f52f5718bd2358862745753c2c77eac4'
p15184
(g9130
((g9068
((I-1
I0
tp15185
I00
tp15186
tp15187
tp15188
(I1
(I00
tp15189
tp15190
tp15191
(g13865
((g1692
((S'cadb96a860b013000395892128a8c55c'
p15192
I1
I0
tp15193
I00
tp15194
tp15195
tp15196
(I1
(I00
tp15197
tp15198
tp15199
(g13780
((g1692
(g15193
I00
tp15200
tp15201
tp15202
(I1
(I00
tp15203
tp15204
tp15205
(g13201
((g1692
(g15193
I00
tp15206
tp15207
tp15208
(I1
(I00
tp15209
tp15210
tp15211
(g13116
((g1692
(g15193
I00
tp15212
tp15213
tp15214
(I1
(I00
tp15215
tp15216
tp15217
(g9327
((g9304
((S'fbd04d8dd670512e8deec742bc5d4e68'
p15218
I5
I0
tp15219
I00
tp15220
tp15221
tp15222
(I1
(I00
tp15223
tp15224
tp15225
(g724
((g9141
((I0
I0
tp15226
I00
tp15227
tp15228
tp15229
(I1
(I00
tp15230
tp15231
tp15232
(g3440
((g9141
((I0
I0
tp15233
I00
tp15234
tp15235
(g13210
((I3
I0
tp15236
I00
tp15237
tp15238
tp15239
(I1
(I00
tp15240
tp15241
tp15242
(g3440
((g9068
(g15185
I00
tp15243
tp15244
(g13125
((I4
I0
tp15245
I00
tp15246
tp15247
tp15248
(I1
(I00
tp15249
tp15250
tp15251
(g9352
((g9336
((I5
I0
tp15252
I00
tp15253
tp15254
tp15255
(I1
(I00
tp15256
tp15257
tp15258
(g9180
((g739
((I6
I0
tp15259
I00
tp15260
tp15261
tp15262
(I1
(I00
tp15263
tp15264
tp15265
(g724
((g9367
((I9
I0
tp15266
I00
tp15267
tp15268
tp15269
(I1
(I00
tp15270
tp15271
tp15272
(g724
((g9367
((I9
I0
tp15273
I00
tp15274
tp15275
tp15276
(I1
(I00
tp15277
tp15278
tp15279
(g1632
((g9189
((I10
I0
tp15280
I00
tp15281
tp15282
tp15283
(I1
(I00
tp15284
tp15285
tp15286
(g9406
((g739
((I11
I0
tp15287
I00
tp15288
tp15289
tp15290
(I1
(I00
tp15291
tp15292
tp15293
(g9494
((g739
((I12
I0
tp15294
I00
tp15295
tp15296
tp15297
(I1
(I00
tp15298
tp15299
tp15300
(g9235
((g9141
((I0
I0
tp15301
I00
tp15302
tp15303
(g9220
((I13
I0
tp15304
I00
tp15305
tp15306
tp15307
(I1
(I00
tp15308
tp15309
tp15310
(g1632
((g9415
((I14
I0
tp15311
I00
tp15312
tp15313
tp15314
(I1
(I00
tp15315
tp15316
tp15317
(g294
((g9189
((I10
I0
tp15318
I00
tp15319
tp15320
(g9415
((I14
I0
tp15321
I00
tp15322
tp15323
tp15324
(I1
(I00
tp15325
tp15326
tp15327
(g13577
((g9246
((I16
I0
tp15328
I00
tp15329
tp15330
tp15331
(I1
(I00
tp15332
tp15333
tp15334
(g1962
((g1692
((S'cadb96a860b013000395892128a8c55c'
p15335
I20
I0
tp15336
I00
tp15337
tp15338
(g9441
((I18
I0
tp15339
I00
tp15340
tp15341
(g9503
((I15
I0
tp15342
I00
tp15343
tp15344
tp15345
(I1
(I00
tp15346
tp15347
tp15348
(g9569
((g9529
((I20
I0
tp15349
I00
tp15350
tp15351
(g9367
((I9
I0
tp15352
I00
tp15353
tp15354
(g9554
((I17
I0
tp15355
I00
tp15356
tp15357
tp15358
(I1
(I00
tp15359
tp15360
tp15361
(g9602
((g9189
((I10
I0
tp15362
I00
tp15363
tp15364
(g9246
((I16
I0
tp15365
I00
tp15366
tp15367
(g9529
((I21
I0
tp15368
I00
tp15369
tp15370
tp15371
(I1
(I00
tp15372
tp15373
tp15374
(g9602
((g9189
((I10
I0
tp15375
I00
tp15376
tp15377
(g9246
((I16
I0
tp15378
I00
tp15379
tp15380
(g9529
((I21
I0
tp15381
I00
tp15382
tp15383
tp15384
(I1
(I00
tp15385
tp15386
tp15387
(g9951
((g9924
((I22
I0
tp15388
I00
tp15389
tp15390
tp15391
(I1
(I00
tp15392
tp15393
tp15394
(g3440
((g9924
((I22
I0
tp15395
I00
tp15396
tp15397
(g13789
((I2
I0
tp15398
I00
tp15399
tp15400
tp15401
(I1
(I00
tp15402
tp15403
tp15404
(g13686
((g9924
((I23
I0
tp15405
I00
tp15406
tp15407
tp15408
(I1
(I00
tp15409
tp15410
tp15411
(g13618
((g9924
((I23
I0
tp15412
I00
tp15413
tp15414
tp15415
(I1
(I00
tp15416
tp15417
tp15418
(g724
((g9924
((I23
I0
tp15419
I00
tp15420
tp15421
tp15422
(I1
(I00
tp15423
tp15424
tp15425
(g3440
((g9962
((I24
I0
tp15426
I00
tp15427
tp15428
(g13874
((I1
I0
tp15429
I00
tp15430
tp15431
tp15432
(I1
(I00
tp15433
tp15434
tp15435
(g13713
((g13697
((I26
I0
tp15436
I00
tp15437
tp15438
tp15439
(I1
(I00
tp15440
tp15441
tp15442
(g13645
((g13629
((I27
I0
tp15443
I00
tp15444
tp15445
tp15446
(I1
(I00
tp15447
tp15448
tp15449
(g13519
((g739
((I28
I0
tp15450
I00
tp15451
tp15452
tp15453
(I1
(I00
tp15454
tp15455
tp15456
(g13917
((g13901
((I29
I0
tp15457
I00
tp15458
tp15459
(g13063
((I-1
I1
tp15460
I00
tp15461
tp15462
tp15463
(I1
(I00
tp15464
tp15465
tp15466
(g2563
((g13528
((I32
I0
tp15467
I00
tp15468
tp15469
(g479
((S'a173b056c810f5c9ee305c38ce680f38'
p15470
I34
I1
tp15471
I00
tp15472
tp15473
tp15474
(I1
(I00
tp15475
tp15476
tp15477
(g13945
((g13816
((I25
I0
tp15478
I00
tp15479
tp15480
(g13901
((I33
I0
tp15481
I00
tp15482
tp15483
tp15484
(I1
(I00
tp15485
tp15486
tp15487
(g13975
((g13816
((I35
I0
tp15488
I00
tp15489
tp15490
tp15491
(I1
(I00
tp15492
tp15493
tp15494
(g14021
((g13554
((I34
I0
tp15495
I00
tp15496
tp15497
(g13588
((I19
I0
tp15498
I00
tp15499
tp15500
(g13656
((I31
I0
tp15501
I00
tp15502
tp15503
(g13724
((I30
I0
tp15504
I00
tp15505
tp15506
(g13986
((I36
I0
tp15507
I00
tp15508
tp15509
(g9189
((I10
I0
tp15510
I00
tp15511
tp15512
tp15513
(I1
(I00
I00
tp15514
tp15515
tp15516
(g15083
((g15056
((I37
I1
tp15517
I00
tp15518
tp15519
tp15520
(I1
(I00
tp15521
tp15522
tp15523
(g15110
((g13237
((I7
I0
tp15524
I00
tp15525
tp15526
(g15094
((I38
I0
tp15527
I00
tp15528
tp15529
(g9220
((I13
I0
tp15530
I00
tp15531
tp15532
tp15533
(I1
(I00
tp15534
tp15535
tp15536
(g15140
((g13152
((I8
I0
tp15537
I00
tp15538
tp15539
(g13237
((I39
I0
tp15540
I00
tp15541
tp15542
tp15543
(I1
(I00
tp15544
tp15545
tp15546
tp15547
tp15548
sg2234
I0
sg2273
(lp15549
I00
asg2275
I0
sg2237
I0
sg2242
Nsg2276
(lp15550
g0
(g60
g2
Ntp15551
Rp15552
(dp15553
g64
(I00
I00
I00
I00
tp15554
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbasg2189
I0
sg2229
I0
sg2282
I4
sg2231
g15171
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15555
(dp15556
g138
(lp15557
(g3778
I1810
g3128
S'outputs = local_op(*outer_inputs)'
p15558
tp15559
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15560
tp15561
a(g2290
I440
g149
S'[t() for t in self.output_types])'
p15562
tp15563
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15564
tp15565
asbsg59
g15552
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15566
(dp15567
g138
(lp15568
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15569
tp15570
a(g3778
I1832
g3128
S'gradients.append(x[::-1])'
p15571
tp15572
a(g755
I407
g756
S'lambda entry: isinstance(entry, Variable)))'
p15573
tp15574
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15575
tp15576
asbsg154
(lp15577
g11655
asg156
g0
(g762
g2
Ntp15578
Rp15579
(dp15580
g766
(g1399
(NNg767
(g745
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p15581
tp15582
Rp15583
tp15584
Rp15585
tp15586
sg772
Nsg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15587
(dp15588
bsg59
g0
(g60
g2
Ntp15589
Rp15590
(dp15591
g64
(I00
I00
I00
I00
tp15592
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag11721
asg55
(itheano.gof.utils
scratchpad
p15593
(dp15594
g138
(lp15595
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15596
tp15597
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15598
tp15599
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15600
tp15601
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15602
tp15603
asbsg154
(lp15604
g11570
asg156
g0
(g2020
g2
Ntp15605
Rp15606
(dp15607
g766
(lp15608
g1399
(Ng9026
Ntp15609
Rp15610
asg2030
(lp15611
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15612
(dp15613
g138
(lp15614
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15615
tp15616
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15617
tp15618
a(g2040
I1109
g149
S'[x.type()])'
p15619
tp15620
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15621
tp15622
asbsg59
g11651
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15623
(dp15624
g138
(lp15625
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15626
tp15627
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15628
tp15629
a(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15630
tp15631
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15632
tp15633
asbsg154
(lp15634
g11281
asg156
g0
(g2020
g2
Ntp15635
Rp15636
(dp15637
g766
(lp15638
g1399
(g8922
NNtp15639
Rp15640
asg2030
(lp15641
sg172
g173
sg2032
I00
sg168
I00
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15642
(dp15643
g138
(lp15644
(g3428
I474
g3128
S'first = IncSubtensor(self.idx_list)(x.zeros_like(), gz, *rest)'
p15645
tp15646
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15647
tp15648
a(g2040
I1109
g149
S'[x.type()])'
p15649
tp15650
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15651
tp15652
asbsg59
g11566
sg38
Nsbag0
(g8
g2
Ntp15653
Rp15654
(dp15655
g12
g0
(g13
g2
Ntp15656
Rp15657
(dp15658
g17
(lp15659
g11302
asg55
(itheano.gof.utils
scratchpad
p15660
(dp15661
g138
(lp15662
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15663
tp15664
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15665
tp15666
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15667
tp15668
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15669
tp15670
asbsg154
(lp15671
g15654
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15672
(dp15673
g138
(lp15674
(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15675
tp15676
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15677
tp15678
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p15679
tp15680
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15681
tp15682
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15683
(dp15684
g138
(lp15685
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15686
tp15687
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15688
tp15689
a(g949
I3958
g946
S'rval = op(x, newshape)'
p15690
tp15691
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15692
tp15693
asbsg154
(lp15694
g11274
asg156
g0
(g955
g2
Ntp15695
Rp15696
(dp15697
g959
I2
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15698
(dp15699
bsg59
g0
(g60
g2
Ntp15700
Rp15701
(dp15702
g64
(I00
I00
tp15703
sg65
g1694
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15704
(dp15705
g138
(lp15706
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15707
tp15708
a(g3127
I4578
g3128
S'ygrad = dot(x.T, gz)'
p15709
tp15710
a(g2162
I4732
g2155
S'return _dot(a, b)'
p15711
tp15712
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15713
tp15714
asbsg154
(lp15715
g11103
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15716
(dp15717
bsg59
g0
(g60
g2
Ntp15718
Rp15719
(dp15720
g64
(I00
I00
tp15721
sg65
S'float64'
p15722
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp15723
Rp15724
(dp15725
g12
g0
(g13
g2
Ntp15726
Rp15727
(dp15728
g17
(lp15729
g85
asg55
(itheano.gof.utils
scratchpad
p15730
(dp15731
g138
(lp15732
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15733
tp15734
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15735
tp15736
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15737
tp15738
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15739
tp15740
asbsg154
(lp15741
g15724
asg156
g724
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15742
(dp15743
g138
(lp15744
(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15745
tp15746
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15747
tp15748
a(g733
I1140
g149
S'return Apply(self, [x], [lvector()])'
p15749
tp15750
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15751
tp15752
asbsg59
g739
sg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15753
(dp15754
g138
(lp15755
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15756
tp15757
a(g5686
I3842
g3128
S'return [reshape(g_out, shape(x), ndim=x.ndim),'
p15758
tp15759
a(g949
I3958
g946
S'rval = op(x, newshape)'
p15760
tp15761
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15762
tp15763
asbsg154
(lp15764
g11096
asg156
g0
(g955
g2
Ntp15765
Rp15766
(dp15767
g959
I3
sg172
g173
sg38
Nsbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15768
(dp15769
bsg59
g0
(g60
g2
Ntp15770
Rp15771
(dp15772
g64
(I00
I00
I00
tp15773
sg65
g15722
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp15774
Rp15775
(dp15776
g12
g0
(g13
g2
Ntp15777
Rp15778
(dp15779
g17
(lp15780
g0
(g8
g2
Ntp15781
Rp15782
(dp15783
g12
g0
(g13
g2
Ntp15784
Rp15785
(dp15786
g17
(lp15787
g0
(g8
g2
Ntp15788
Rp15789
(dp15790
g12
g0
(g13
g2
Ntp15791
Rp15792
(dp15793
g17
(lp15794
g12184
ag0
(g8
g2
Ntp15795
Rp15796
(dp15797
g12
g0
(g13
g2
Ntp15798
Rp15799
(dp15800
g17
(lp15801
g0
(g8
g2
Ntp15802
Rp15803
(dp15804
g12
g0
(g13
g2
Ntp15805
Rp15806
(dp15807
g17
(lp15808
g12082
ag469
asg55
(itheano.gof.utils
scratchpad
p15809
(dp15810
g138
(lp15811
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p15812
tp15813
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p15814
tp15815
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15816
tp15817
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15818
tp15819
asbsg154
(lp15820
g15803
asg156
g0
(g196
g2
Ntp15821
Rp15822
(dp15823
g38
Nsg202
g501
sg211
(dp15824
sg213
Nsg216
(dp15825
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15826
(dp15827
g138
(lp15828
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15829
tp15830
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15831
tp15832
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15833
tp15834
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15835
tp15836
asbsg59
g0
(g60
g2
Ntp15837
Rp15838
(dp15839
g64
(tsg65
S'float64'
p15840
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15841
(dp15842
g138
(lp15843
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15844
tp15845
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15846
tp15847
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p15848
tp15849
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15850
tp15851
asbsg154
(lp15852
g15796
asg156
g0
(g157
g2
Ntp15853
Rp15854
(dp15855
g161
(lp15856
sg163
(lp15857
sg165
(lp15858
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp15859
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15860
(dp15861
bsg59
g0
(g60
g2
Ntp15862
Rp15863
(dp15864
g64
(I01
I01
I01
tp15865
sg65
g15840
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15866
(dp15867
g138
(lp15868
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p15869
tp15870
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15871
tp15872
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p15873
tp15874
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15875
tp15876
asbsg154
(lp15877
g15789
asg156
g0
(g196
g2
Ntp15878
Rp15879
(dp15880
g38
Nsg202
g3444
sg211
(dp15881
sg213
Nsg216
(dp15882
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15883
(dp15884
g138
(lp15885
(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p15886
tp15887
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15888
tp15889
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15890
tp15891
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15892
tp15893
asbsg59
g0
(g60
g2
Ntp15894
Rp15895
(dp15896
g64
(I00
I00
I00
tp15897
sg65
g15840
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12191
asg55
(itheano.gof.utils
scratchpad
p15898
(dp15899
g138
(lp15900
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p15901
tp15902
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15903
tp15904
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15905
tp15906
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15907
tp15908
asbsg154
(lp15909
g15782
asg156
g0
(g196
g2
Ntp15910
Rp15911
(dp15912
g38
Nsg202
g501
sg211
(dp15913
sg213
Nsg216
(dp15914
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15915
(dp15916
g138
(lp15917
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15918
tp15919
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15920
tp15921
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15922
tp15923
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p15924
tp15925
asbsg59
g0
(g60
g2
Ntp15926
Rp15927
(dp15928
g64
(I00
I00
I00
tp15929
sg65
S'float64'
p15930
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp15931
Rp15932
(dp15933
g12
g0
(g13
g2
Ntp15934
Rp15935
(dp15936
g17
(lp15937
g85
ag0
(g8
g2
Ntp15938
Rp15939
(dp15940
g12
g0
(g13
g2
Ntp15941
Rp15942
(dp15943
g17
(lp15944
g12191
ag0
(g8
g2
Ntp15945
Rp15946
(dp15947
g12
g0
(g13
g2
Ntp15948
Rp15949
(dp15950
g17
(lp15951
g469
asg55
(itheano.gof.utils
scratchpad
p15952
(dp15953
g138
(lp15954
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15955
tp15956
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15957
tp15958
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p15959
tp15960
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15961
tp15962
asbsg154
(lp15963
g15946
asg156
g0
(g157
g2
Ntp15964
Rp15965
(dp15966
g161
(lp15967
sg163
(lp15968
sg165
(lp15969
I0
aI1
aI2
asg167
(tsg168
I00
sg169
(g170
g170
g170
tp15970
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15971
(dp15972
bsg59
g0
(g60
g2
Ntp15973
Rp15974
(dp15975
g64
(I01
I01
I01
tp15976
sg65
g481
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p15977
(dp15978
g138
(lp15979
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15980
tp15981
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15982
tp15983
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15984
tp15985
a(g144
I401
g145
S'self.add_tag_trace(node)'
p15986
tp15987
asbsg154
(lp15988
g15939
asg156
g0
(g196
g2
Ntp15989
Rp15990
(dp15991
g38
Nsg202
g2567
sg211
(dp15992
sg213
Nsg216
(dp15993
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p15994
(dp15995
g138
(lp15996
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p15997
tp15998
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p15999
tp16000
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16001
tp16002
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16003
tp16004
asbsg59
g0
(g60
g2
Ntp16005
Rp16006
(dp16007
g64
(I01
I01
I01
tp16008
sg65
S'int8'
p16009
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16010
(dp16011
g138
(lp16012
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16013
tp16014
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16015
tp16016
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16017
tp16018
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16019
tp16020
asbsg154
(lp16021
g15932
asg156
g0
(g196
g2
Ntp16022
Rp16023
(dp16024
g38
Nsg202
g205
sg211
(dp16025
sg213
Nsg216
(dp16026
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16027
(dp16028
g138
(lp16029
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16030
tp16031
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16032
tp16033
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16034
tp16035
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16036
tp16037
asbsg59
g0
(g60
g2
Ntp16038
Rp16039
(dp16040
g64
(I00
I00
I00
tp16041
sg65
S'float64'
p16042
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16043
(dp16044
g138
(lp16045
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16046
tp16047
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16048
tp16049
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16050
tp16051
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16052
tp16053
asbsg154
(lp16054
g15775
asg156
g0
(g196
g2
Ntp16055
Rp16056
(dp16057
g38
Nsg202
g501
sg211
(dp16058
sg213
Nsg216
(dp16059
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16060
(dp16061
g138
(lp16062
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16063
tp16064
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16065
tp16066
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16067
tp16068
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16069
tp16070
asbsg59
g0
(g60
g2
Ntp16071
Rp16072
(dp16073
g64
(I00
I00
I00
tp16074
sg65
S'float64'
p16075
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16076
(dp16077
g138
(lp16078
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p16079
tp16080
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p16081
tp16082
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16083
tp16084
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16085
tp16086
asbsg154
(lp16087
g11089
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16088
(dp16089
g138
(lp16090
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16091
tp16092
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16093
tp16094
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16095
tp16096
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16097
tp16098
asbsg59
g0
(g60
g2
Ntp16099
Rp16100
(dp16101
g64
(I00
I00
I00
tp16102
sg65
S'float64'
p16103
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16104
(dp16105
g138
(lp16106
(g187
I76
g188
S'self.functions_minibatch()'
p16107
tp16108
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p16109
tp16110
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16111
tp16112
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16113
tp16114
asbsg154
(lp16115
g11036
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16116
(dp16117
g138
(lp16118
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16119
tp16120
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16121
tp16122
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16123
tp16124
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16125
tp16126
asbsg59
g0
(g60
g2
Ntp16127
Rp16128
(dp16129
g64
(I00
I00
I00
tp16130
sg65
S'float64'
p16131
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16132
(dp16133
g138
(lp16134
(g187
I76
g188
S'self.functions_minibatch()'
p16135
tp16136
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p16137
tp16138
a(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p16139
tp16140
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16141
tp16142
asbsg154
(lp16143
g10962
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16144
(dp16145
g138
(lp16146
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p16147
tp16148
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16149
tp16150
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16151
tp16152
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16153
tp16154
asbsg59
g0
(g60
g2
Ntp16155
Rp16156
(dp16157
g64
(I00
I00
I00
tp16158
sg65
S'float64'
p16159
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16160
(dp16161
g138
(lp16162
(g187
I76
g188
S'self.functions_minibatch()'
p16163
tp16164
a(g7906
I144
g7907
S'updates.append((param, param + upd))'
p16165
tp16166
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16167
tp16168
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16169
tp16170
asbsg154
(lp16171
g10955
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16172
(dp16173
g138
(lp16174
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16175
tp16176
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16177
tp16178
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16179
tp16180
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16181
tp16182
asbsg59
g0
(g60
g2
Ntp16183
Rp16184
(dp16185
g64
(I00
I00
I00
tp16186
sg65
S'float64'
p16187
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg539
g90
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g85
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp16188
Rp16189
(dp16190
g38
Nsg538
g0
(g8
g2
Ntp16191
Rp16192
(dp16193
g12
g0
(g13
g2
Ntp16194
Rp16195
(dp16196
g17
(lp16197
g331
ag0
(g8
g2
Ntp16198
Rp16199
(dp16200
g12
g0
(g13
g2
Ntp16201
Rp16202
(dp16203
g17
(lp16204
g0
(g8
g2
Ntp16205
Rp16206
(dp16207
g12
g0
(g13
g2
Ntp16208
Rp16209
(dp16210
g17
(lp16211
g0
(g8
g2
Ntp16212
Rp16213
(dp16214
g12
g0
(g13
g2
Ntp16215
Rp16216
(dp16217
g17
(lp16218
g35
asg55
(itheano.gof.utils
scratchpad
p16219
(dp16220
g138
(lp16221
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16222
tp16223
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16224
tp16225
a(g148
I533
g149
S'inplace=False)(input))'
p16226
tp16227
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16228
tp16229
asbsg154
(lp16230
g16213
asg156
g0
(g157
g2
Ntp16231
Rp16232
(dp16233
g161
(lp16234
sg163
(lp16235
sg165
(lp16236
I0
asg167
(tsg168
I00
sg169
(g170
tp16237
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16238
(dp16239
bsg59
g0
(g60
g2
Ntp16240
Rp16241
(dp16242
g64
(I01
tp16243
sg65
g66
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbag6521
asg55
(itheano.gof.utils
scratchpad
p16244
(dp16245
g138
(lp16246
(g187
I76
g188
S'self.functions_minibatch()'
p16247
tp16248
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p16249
tp16250
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16251
tp16252
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16253
tp16254
asbsg154
(lp16255
g16206
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16256
(dp16257
g138
(lp16258
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16259
tp16260
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16261
tp16262
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16263
tp16264
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16265
tp16266
asbsg59
g0
(g60
g2
Ntp16267
Rp16268
(dp16269
g64
(I00
tp16270
sg65
S'float64'
p16271
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16272
Rp16273
(dp16274
g12
g0
(g13
g2
Ntp16275
Rp16276
(dp16277
g17
(lp16278
g0
(g8
g2
Ntp16279
Rp16280
(dp16281
g12
g0
(g13
g2
Ntp16282
Rp16283
(dp16284
g17
(lp16285
g0
(g33
g2
Ntp16286
Rp16287
(dp16288
g37
Nsg55
(itheano.gof.utils
scratchpad
p16289
(dp16290
g58
Nsbsg59
g0
(g60
g2
Ntp16291
Rp16292
(dp16293
g64
(tsg65
S'float64'
p16294
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsg40
g41
(g42
(I0
tp16295
g44
tp16296
Rp16297
(I1
(tg100
I00
S'{\x14\xaeG\xe1z\x84?'
p16298
tp16299
bsbasg55
(itheano.gof.utils
scratchpad
p16300
(dp16301
g138
(lp16302
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p16303
tp16304
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16305
tp16306
a(g148
I533
g149
S'inplace=False)(input))'
p16307
tp16308
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16309
tp16310
asbsg154
(lp16311
g16280
asg156
g0
(g157
g2
Ntp16312
Rp16313
(dp16314
g161
(lp16315
sg163
(lp16316
sg165
(lp16317
I0
asg167
(tsg168
I00
sg169
(g170
tp16318
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16319
(dp16320
bsg59
g0
(g60
g2
Ntp16321
Rp16322
(dp16323
g64
(I01
tp16324
sg65
g16294
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16325
Rp16326
(dp16327
g12
g0
(g13
g2
Ntp16328
Rp16329
(dp16330
g17
(lp16331
g0
(g8
g2
Ntp16332
Rp16333
(dp16334
g12
g0
(g13
g2
Ntp16335
Rp16336
(dp16337
g17
(lp16338
g0
(g8
g2
Ntp16339
Rp16340
(dp16341
g12
g0
(g13
g2
Ntp16342
Rp16343
(dp16344
g17
(lp16345
g11954
asg55
(itheano.gof.utils
scratchpad
p16346
(dp16347
g138
(lp16348
(g3127
I4573
g3128
S'ygrad = dot(x.T, gz)'
p16349
tp16350
a(g3131
I231
g716
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16351
tp16352
a(g3134
I3084
g3135
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16353
tp16354
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16355
tp16356
asbsg154
(lp16357
g16340
asg156
g0
(g157
g2
Ntp16358
Rp16359
(dp16360
g161
(lp16361
sg163
(lp16362
I1
aI0
asg165
(lp16363
sg167
g10176
sg168
I00
sg169
(I1
I0
tp16364
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16365
(dp16366
bsg59
g0
(g60
g2
Ntp16367
Rp16368
(dp16369
g64
(I00
I00
tp16370
sg65
g9780
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16371
Rp16372
(dp16373
g12
g0
(g13
g2
Ntp16374
Rp16375
(dp16376
g17
(lp16377
g0
(g8
g2
Ntp16378
Rp16379
(dp16380
g12
g0
(g13
g2
Ntp16381
Rp16382
(dp16383
g17
(lp16384
g0
(g8
g2
Ntp16385
Rp16386
(dp16387
g12
g0
(g13
g2
Ntp16388
Rp16389
(dp16390
g17
(lp16391
g0
(g8
g2
Ntp16392
Rp16393
(dp16394
g12
g0
(g13
g2
Ntp16395
Rp16396
(dp16397
g17
(lp16398
g0
(g8
g2
Ntp16399
Rp16400
(dp16401
g12
g0
(g13
g2
Ntp16402
Rp16403
(dp16404
g17
(lp16405
g0
(g8
g2
Ntp16406
Rp16407
(dp16408
g12
g0
(g13
g2
Ntp16409
Rp16410
(dp16411
g17
(lp16412
g0
(g8
g2
Ntp16413
Rp16414
(dp16415
g12
g0
(g13
g2
Ntp16416
Rp16417
(dp16418
g17
(lp16419
g11912
ag0
(g8
g2
Ntp16420
Rp16421
(dp16422
g12
g0
(g13
g2
Ntp16423
Rp16424
(dp16425
g17
(lp16426
g0
(g8
g2
Ntp16427
Rp16428
(dp16429
g12
g0
(g13
g2
Ntp16430
Rp16431
(dp16432
g17
(lp16433
g0
(g8
g2
Ntp16434
Rp16435
(dp16436
g12
g0
(g13
g2
Ntp16437
Rp16438
(dp16439
g17
(lp16440
g12089
ag4414
asg55
(itheano.gof.utils
scratchpad
p16441
(dp16442
g138
(lp16443
(g4430
I450
g3128
S'g_cost = _float_ones_like(cost)'
p16444
tp16445
a(g4433
I1124
g4434
S'rval = tensor.ones_like(x)'
p16446
tp16447
a(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p16448
tp16449
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16450
tp16451
asbsg154
(lp16452
g16435
asg156
g3440
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16453
(dp16454
g138
(lp16455
(g4437
I2070
g4438
S'ret = fill(model, constant(1.0, dtype=dtype))'
p16456
tp16457
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16458
tp16459
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16460
tp16461
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16462
tp16463
asbsg59
g0
(g60
g2
Ntp16464
Rp16465
(dp16466
g64
(tsg65
g4426
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12115
asg55
(itheano.gof.utils
scratchpad
p16467
(dp16468
g138
(lp16469
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16470
tp16471
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16472
tp16473
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16474
tp16475
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16476
tp16477
asbsg154
(lp16478
g16428
asg156
g0
(g196
g2
Ntp16479
Rp16480
(dp16481
g38
Nsg202
g4543
sg211
(dp16482
sg213
Nsg216
(dp16483
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16484
(dp16485
g138
(lp16486
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16487
tp16488
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16489
tp16490
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16491
tp16492
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16493
tp16494
asbsg59
g0
(g60
g2
Ntp16495
Rp16496
(dp16497
g64
(tsg65
S'float64'
p16498
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16499
(dp16500
g138
(lp16501
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p16502
tp16503
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16504
tp16505
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p16506
tp16507
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16508
tp16509
asbsg154
(lp16510
g16421
asg156
g0
(g157
g2
Ntp16511
Rp16512
(dp16513
g161
(lp16514
sg163
(lp16515
sg165
(lp16516
I0
asg167
(tsg168
I00
sg169
(g170
tp16517
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16518
(dp16519
bsg59
g0
(g60
g2
Ntp16520
Rp16521
(dp16522
g64
(I01
tp16523
sg65
g16498
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16524
(dp16525
g138
(lp16526
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p16527
tp16528
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16529
tp16530
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p16531
tp16532
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16533
tp16534
asbsg154
(lp16535
g16414
asg156
g0
(g196
g2
Ntp16536
Rp16537
(dp16538
g38
Nsg202
g3444
sg211
(dp16539
sg213
Nsg216
(dp16540
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16541
(dp16542
g138
(lp16543
(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p16544
tp16545
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16546
tp16547
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16548
tp16549
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16550
tp16551
asbsg59
g0
(g60
g2
Ntp16552
Rp16553
(dp16554
g64
(I00
tp16555
sg65
g16498
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16556
(dp16557
g138
(lp16558
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16559
tp16560
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16561
tp16562
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16563
tp16564
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16565
tp16566
asbsg154
(lp16567
g16407
asg156
g0
(g196
g2
Ntp16568
Rp16569
(dp16570
g38
Nsg202
g2732
sg211
(dp16571
sg213
Nsg216
(dp16572
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16573
(dp16574
g138
(lp16575
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16576
tp16577
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16578
tp16579
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16580
tp16581
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16582
tp16583
asbsg59
g0
(g60
g2
Ntp16584
Rp16585
(dp16586
g64
(I00
tp16587
sg65
g16498
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag7924
asg55
(itheano.gof.utils
scratchpad
p16588
(dp16589
g138
(lp16590
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16591
tp16592
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16593
tp16594
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16595
tp16596
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16597
tp16598
asbsg154
(lp16599
g16400
asg156
g0
(g196
g2
Ntp16600
Rp16601
(dp16602
g38
Nsg202
g501
sg211
(dp16603
sg213
Nsg216
(dp16604
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16605
(dp16606
g138
(lp16607
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16608
tp16609
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16610
tp16611
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16612
tp16613
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16614
tp16615
asbsg59
g0
(g60
g2
Ntp16616
Rp16617
(dp16618
g64
(I00
tp16619
sg65
S'float64'
p16620
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag11940
asg55
(itheano.gof.utils
scratchpad
p16621
(dp16622
g138
(lp16623
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16624
tp16625
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16626
tp16627
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16628
tp16629
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16630
tp16631
asbsg154
(lp16632
g16393
asg156
g0
(g196
g2
Ntp16633
Rp16634
(dp16635
g38
Nsg202
g4543
sg211
(dp16636
sg213
Nsg216
(dp16637
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16638
(dp16639
g138
(lp16640
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16641
tp16642
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16643
tp16644
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16645
tp16646
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16647
tp16648
asbsg59
g0
(g60
g2
Ntp16649
Rp16650
(dp16651
g64
(I00
tp16652
sg65
S'float64'
p16653
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16654
Rp16655
(dp16656
g12
g0
(g13
g2
Ntp16657
Rp16658
(dp16659
g17
(lp16660
g0
(g8
g2
Ntp16661
Rp16662
(dp16663
g12
g0
(g13
g2
Ntp16664
Rp16665
(dp16666
g17
(lp16667
g0
(g8
g2
Ntp16668
Rp16669
(dp16670
g12
g0
(g13
g2
Ntp16671
Rp16672
(dp16673
g17
(lp16674
g16407
ag11993
asg55
(itheano.gof.utils
scratchpad
p16675
(dp16676
g138
(lp16677
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16678
tp16679
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16680
tp16681
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16682
tp16683
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16684
tp16685
asbsg154
(lp16686
g16669
asg156
g0
(g196
g2
Ntp16687
Rp16688
(dp16689
g38
Nsg202
g501
sg211
(dp16690
sg213
Nsg216
(dp16691
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16692
(dp16693
g138
(lp16694
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16695
tp16696
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16697
tp16698
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16699
tp16700
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16701
tp16702
asbsg59
g0
(g60
g2
Ntp16703
Rp16704
(dp16705
g64
(I00
tp16706
sg65
S'float64'
p16707
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12024
asg55
(itheano.gof.utils
scratchpad
p16708
(dp16709
g138
(lp16710
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16711
tp16712
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16713
tp16714
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16715
tp16716
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16717
tp16718
asbsg154
(lp16719
g16662
asg156
g0
(g196
g2
Ntp16720
Rp16721
(dp16722
g38
Nsg202
g4543
sg211
(dp16723
sg213
Nsg216
(dp16724
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16725
(dp16726
g138
(lp16727
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16728
tp16729
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16730
tp16731
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16732
tp16733
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16734
tp16735
asbsg59
g0
(g60
g2
Ntp16736
Rp16737
(dp16738
g64
(I00
tp16739
sg65
S'float64'
p16740
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16741
(dp16742
g138
(lp16743
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16744
tp16745
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16746
tp16747
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16748
tp16749
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16750
tp16751
asbsg154
(lp16752
g16655
asg156
g0
(g196
g2
Ntp16753
Rp16754
(dp16755
g38
Nsg202
g2732
sg211
(dp16756
sg213
Nsg216
(dp16757
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16758
(dp16759
g138
(lp16760
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16761
tp16762
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16763
tp16764
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16765
tp16766
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16767
tp16768
asbsg59
g0
(g60
g2
Ntp16769
Rp16770
(dp16771
g64
(I00
tp16772
sg65
g16740
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16773
(dp16774
g138
(lp16775
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p16776
tp16777
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p16778
tp16779
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16780
tp16781
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16782
tp16783
asbsg154
(lp16784
g16386
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16785
(dp16786
g138
(lp16787
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p16788
tp16789
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16790
tp16791
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16792
tp16793
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16794
tp16795
asbsg59
g0
(g60
g2
Ntp16796
Rp16797
(dp16798
g64
(I00
tp16799
sg65
S'float64'
p16800
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16801
Rp16802
(dp16803
g12
g0
(g13
g2
Ntp16804
Rp16805
(dp16806
g17
(lp16807
g11947
asg55
(itheano.gof.utils
scratchpad
p16808
(dp16809
g138
(lp16810
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16811
tp16812
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16813
tp16814
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16815
tp16816
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16817
tp16818
asbsg154
(lp16819
g16802
asg156
g0
(g196
g2
Ntp16820
Rp16821
(dp16822
g38
Nsg202
g2385
sg211
(dp16823
sg213
Nsg216
(dp16824
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16825
(dp16826
g138
(lp16827
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16828
tp16829
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16830
tp16831
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16832
tp16833
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16834
tp16835
asbsg59
g0
(g60
g2
Ntp16836
Rp16837
(dp16838
g64
(I00
tp16839
sg65
S'float64'
p16840
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16841
(dp16842
g138
(lp16843
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16844
tp16845
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16846
tp16847
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16848
tp16849
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16850
tp16851
asbsg154
(lp16852
g16379
asg156
g0
(g196
g2
Ntp16853
Rp16854
(dp16855
g38
Nsg202
g501
sg211
(dp16856
sg213
Nsg216
(dp16857
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16858
(dp16859
g138
(lp16860
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16861
tp16862
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16863
tp16864
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16865
tp16866
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16867
tp16868
asbsg59
g0
(g60
g2
Ntp16869
Rp16870
(dp16871
g64
(I00
tp16872
sg65
S'float64'
p16873
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16874
Rp16875
(dp16876
g12
g0
(g13
g2
Ntp16877
Rp16878
(dp16879
g17
(lp16880
g0
(g8
g2
Ntp16881
Rp16882
(dp16883
g12
g0
(g13
g2
Ntp16884
Rp16885
(dp16886
g17
(lp16887
g2530
asg55
(itheano.gof.utils
scratchpad
p16888
(dp16889
g138
(lp16890
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16891
tp16892
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16893
tp16894
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p16895
tp16896
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16897
tp16898
asbsg154
(lp16899
g16882
asg156
g0
(g157
g2
Ntp16900
Rp16901
(dp16902
g161
(lp16903
sg163
(lp16904
sg165
(lp16905
I0
asg167
(tsg168
I00
sg169
(g170
tp16906
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16907
(dp16908
bsg59
g0
(g60
g2
Ntp16909
Rp16910
(dp16911
g64
(I01
tp16912
sg65
g2547
sg67
g2537
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp16913
Rp16914
(dp16915
g12
g0
(g13
g2
Ntp16916
Rp16917
(dp16918
g17
(lp16919
g11947
asg55
(itheano.gof.utils
scratchpad
p16920
(dp16921
g138
(lp16922
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16923
tp16924
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16925
tp16926
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16927
tp16928
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16929
tp16930
asbsg154
(lp16931
g16914
asg156
g0
(g196
g2
Ntp16932
Rp16933
(dp16934
g38
Nsg202
g2385
sg211
(dp16935
sg213
Nsg216
(dp16936
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16937
(dp16938
g138
(lp16939
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16940
tp16941
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16942
tp16943
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16944
tp16945
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16946
tp16947
asbsg59
g0
(g60
g2
Ntp16948
Rp16949
(dp16950
g64
(I00
tp16951
sg65
S'float64'
p16952
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16953
(dp16954
g138
(lp16955
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16956
tp16957
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16958
tp16959
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16960
tp16961
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16962
tp16963
asbsg154
(lp16964
g16875
asg156
g0
(g196
g2
Ntp16965
Rp16966
(dp16967
g38
Nsg202
g2567
sg211
(dp16968
sg213
Nsg216
(dp16969
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p16970
(dp16971
g138
(lp16972
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16973
tp16974
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p16975
tp16976
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16977
tp16978
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p16979
tp16980
asbsg59
g0
(g60
g2
Ntp16981
Rp16982
(dp16983
g64
(I00
tp16984
sg65
S'float64'
p16985
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p16986
(dp16987
g138
(lp16988
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p16989
tp16990
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p16991
tp16992
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p16993
tp16994
a(g144
I401
g145
S'self.add_tag_trace(node)'
p16995
tp16996
asbsg154
(lp16997
g16372
asg156
g0
(g196
g2
Ntp16998
Rp16999
(dp17000
g38
Nsg202
g501
sg211
(dp17001
sg213
Nsg216
(dp17002
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17003
(dp17004
g138
(lp17005
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17006
tp17007
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17008
tp17009
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17010
tp17011
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17012
tp17013
asbsg59
g0
(g60
g2
Ntp17014
Rp17015
(dp17016
g64
(I00
tp17017
sg65
S'float64'
p17018
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17019
(dp17020
g138
(lp17021
(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17022
tp17023
a(g3127
I4573
g3128
S'ygrad = dot(x.T, gz)'
p17024
tp17025
a(g2162
I4732
g2155
S'return _dot(a, b)'
p17026
tp17027
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17028
tp17029
asbsg154
(lp17030
g16333
asg156
g1331
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17031
(dp17032
bsg59
g0
(g60
g2
Ntp17033
Rp17034
(dp17035
g64
(I00
tp17036
sg65
S'float64'
p17037
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp17038
Rp17039
(dp17040
g12
g0
(g13
g2
Ntp17041
Rp17042
(dp17043
g17
(lp17044
g0
(g8
g2
Ntp17045
Rp17046
(dp17047
g12
g0
(g13
g2
Ntp17048
Rp17049
(dp17050
g17
(lp17051
g0
(g8
g2
Ntp17052
Rp17053
(dp17054
g12
g0
(g13
g2
Ntp17055
Rp17056
(dp17057
g17
(lp17058
g12225
ag0
(g8
g2
Ntp17059
Rp17060
(dp17061
g12
g0
(g13
g2
Ntp17062
Rp17063
(dp17064
g17
(lp17065
g0
(g8
g2
Ntp17066
Rp17067
(dp17068
g12
g0
(g13
g2
Ntp17069
Rp17070
(dp17071
g17
(lp17072
g16435
ag469
asg55
(itheano.gof.utils
scratchpad
p17073
(dp17074
g138
(lp17075
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p17076
tp17077
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p17078
tp17079
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17080
tp17081
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17082
tp17083
asbsg154
(lp17084
g17067
asg156
g0
(g196
g2
Ntp17085
Rp17086
(dp17087
g38
Nsg202
g501
sg211
(dp17088
sg213
Nsg216
(dp17089
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17090
(dp17091
g138
(lp17092
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17093
tp17094
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17095
tp17096
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17097
tp17098
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17099
tp17100
asbsg59
g0
(g60
g2
Ntp17101
Rp17102
(dp17103
g64
(tsg65
S'float64'
p17104
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17105
(dp17106
g138
(lp17107
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p17108
tp17109
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17110
tp17111
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p17112
tp17113
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17114
tp17115
asbsg154
(lp17116
g17060
asg156
g0
(g157
g2
Ntp17117
Rp17118
(dp17119
g161
(lp17120
sg163
(lp17121
sg165
(lp17122
I0
asg167
(tsg168
I00
sg169
(g170
tp17123
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17124
(dp17125
bsg59
g0
(g60
g2
Ntp17126
Rp17127
(dp17128
g64
(I01
tp17129
sg65
g17104
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17130
(dp17131
g138
(lp17132
(g3770
I1063
g3771
S'term = access_term_cache(node)[idx]'
p17133
tp17134
a(g3774
I924
g3775
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17135
tp17136
a(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p17137
tp17138
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17139
tp17140
asbsg154
(lp17141
g17053
asg156
g0
(g196
g2
Ntp17142
Rp17143
(dp17144
g38
Nsg202
g3444
sg211
(dp17145
sg213
Nsg216
(dp17146
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17147
(dp17148
g138
(lp17149
(g12333
I1861
g3128
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p17150
tp17151
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17152
tp17153
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17154
tp17155
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17156
tp17157
asbsg59
g0
(g60
g2
Ntp17158
Rp17159
(dp17160
g64
(I00
tp17161
sg65
g17104
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag12232
asg55
(itheano.gof.utils
scratchpad
p17162
(dp17163
g138
(lp17164
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p17165
tp17166
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17167
tp17168
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17169
tp17170
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17171
tp17172
asbsg154
(lp17173
g17046
asg156
g0
(g196
g2
Ntp17174
Rp17175
(dp17176
g38
Nsg202
g501
sg211
(dp17177
sg213
Nsg216
(dp17178
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17179
(dp17180
g138
(lp17181
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17182
tp17183
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17184
tp17185
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17186
tp17187
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17188
tp17189
asbsg59
g0
(g60
g2
Ntp17190
Rp17191
(dp17192
g64
(I00
tp17193
sg65
S'float64'
p17194
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbag0
(g8
g2
Ntp17195
Rp17196
(dp17197
g12
g0
(g13
g2
Ntp17198
Rp17199
(dp17200
g17
(lp17201
g331
ag0
(g8
g2
Ntp17202
Rp17203
(dp17204
g12
g0
(g13
g2
Ntp17205
Rp17206
(dp17207
g17
(lp17208
g12232
ag0
(g8
g2
Ntp17209
Rp17210
(dp17211
g12
g0
(g13
g2
Ntp17212
Rp17213
(dp17214
g17
(lp17215
g469
asg55
(itheano.gof.utils
scratchpad
p17216
(dp17217
g138
(lp17218
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17219
tp17220
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17221
tp17222
a(g4468
I753
g4469
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p17223
tp17224
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17225
tp17226
asbsg154
(lp17227
g17210
asg156
g0
(g157
g2
Ntp17228
Rp17229
(dp17230
g161
(lp17231
sg163
(lp17232
sg165
(lp17233
I0
asg167
(tsg168
I00
sg169
(g170
tp17234
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17235
(dp17236
bsg59
g0
(g60
g2
Ntp17237
Rp17238
(dp17239
g64
(I01
tp17240
sg65
g481
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17241
(dp17242
g138
(lp17243
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17244
tp17245
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17246
tp17247
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17248
tp17249
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17250
tp17251
asbsg154
(lp17252
g17203
asg156
g0
(g196
g2
Ntp17253
Rp17254
(dp17255
g38
Nsg202
g2567
sg211
(dp17256
sg213
Nsg216
(dp17257
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17258
(dp17259
g138
(lp17260
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17261
tp17262
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17263
tp17264
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17265
tp17266
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17267
tp17268
asbsg59
g0
(g60
g2
Ntp17269
Rp17270
(dp17271
g64
(I01
tp17272
sg65
S'int8'
p17273
sg67
g50
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17274
(dp17275
g138
(lp17276
(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p17277
tp17278
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17279
tp17280
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17281
tp17282
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17283
tp17284
asbsg154
(lp17285
g17196
asg156
g0
(g196
g2
Ntp17286
Rp17287
(dp17288
g38
Nsg202
g205
sg211
(dp17289
sg213
Nsg216
(dp17290
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17291
(dp17292
g138
(lp17293
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17294
tp17295
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17296
tp17297
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17298
tp17299
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17300
tp17301
asbsg59
g0
(g60
g2
Ntp17302
Rp17303
(dp17304
g64
(I00
tp17305
sg65
S'float64'
p17306
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17307
(dp17308
g138
(lp17309
(g4461
I650
g3128
S'rval = self._bgrad(inputs, ograds)'
p17310
tp17311
a(g4464
I763
g4465
S'ret.append(transform(scalar_igrad))'
p17312
tp17313
a(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17314
tp17315
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17316
tp17317
asbsg154
(lp17318
g17039
asg156
g0
(g196
g2
Ntp17319
Rp17320
(dp17321
g38
Nsg202
g501
sg211
(dp17322
sg213
Nsg216
(dp17323
sg172
g173
sbsbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17324
(dp17325
g138
(lp17326
(g4468
I755
g4469
S'*[transform(ipt) for ipt in node.inputs])'
p17327
tp17328
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17329
tp17330
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17331
tp17332
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17333
tp17334
asbsg59
g0
(g60
g2
Ntp17335
Rp17336
(dp17337
g64
(I00
tp17338
sg65
S'float64'
p17339
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17340
(dp17341
g138
(lp17342
(g3770
I1090
g3771
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p17343
tp17344
a(g4684
I1090
g716
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p17345
tp17346
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p17347
tp17348
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17349
tp17350
asbsg154
(lp17351
g16326
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17352
(dp17353
g138
(lp17354
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p17355
tp17356
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17357
tp17358
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17359
tp17360
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17361
tp17362
asbsg59
g0
(g60
g2
Ntp17363
Rp17364
(dp17365
g64
(I00
tp17366
sg65
S'float64'
p17367
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17368
(dp17369
g138
(lp17370
(g187
I76
g188
S'self.functions_minibatch()'
p17371
tp17372
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p17373
tp17374
a(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p17375
tp17376
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17377
tp17378
asbsg154
(lp17379
g16273
asg156
g497
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17380
(dp17381
g138
(lp17382
(g785
I219
g786
S'return theano.tensor.basic.mul(other, self)'
p17383
tp17384
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17385
tp17386
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17387
tp17388
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17389
tp17390
asbsg59
g0
(g60
g2
Ntp17391
Rp17392
(dp17393
g64
(I00
tp17394
sg65
S'float64'
p17395
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17396
(dp17397
g138
(lp17398
(g187
I76
g188
S'self.functions_minibatch()'
p17399
tp17400
a(g7906
I142
g7907
S'upd = self.momentum * weight_update - self.lr * gparam'
p17401
tp17402
a(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p17403
tp17404
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17405
tp17406
asbsg154
(lp17407
g16199
asg156
g2563
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17408
(dp17409
g138
(lp17410
(g3849
I136
g3850
S'return theano.tensor.basic.sub(self, other)'
p17411
tp17412
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17413
tp17414
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17415
tp17416
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17417
tp17418
asbsg59
g0
(g60
g2
Ntp17419
Rp17420
(dp17421
g64
(I00
tp17422
sg65
S'float64'
p17423
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbasg55
(itheano.gof.utils
scratchpad
p17424
(dp17425
g138
(lp17426
(g187
I76
g188
S'self.functions_minibatch()'
p17427
tp17428
a(g7906
I144
g7907
S'updates.append((param, param + upd))'
p17429
tp17430
a(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p17431
tp17432
a(g144
I401
g145
S'self.add_tag_trace(node)'
p17433
tp17434
asbsg154
(lp17435
g16192
asg156
g294
sbsg37
I0
sg55
(itheano.gof.utils
scratchpad
p17436
(dp17437
g138
(lp17438
(g446
I117
g447
S'return theano.tensor.basic.add(self, other)'
p17439
tp17440
a(g144
I399
g145
S'node = self.make_node(*inputs, **kwargs)'
p17441
tp17442
a(g148
I567
g149
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17443
tp17444
a(g229
I317
g145
S'return utils.add_tag_trace(self.make_variable(name))'
p17445
tp17446
asbsg59
g0
(g60
g2
Ntp17447
Rp17448
(dp17449
g64
(I00
tp17450
sg65
S'float64'
p17451
sg67
g100
sg68
I00
sg38
Nsbsg38
Nsbsg539
g334
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g331
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp17452
Rp17453
(dp17454
g38
Nsg538
g10962
sg539
g2847
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g2844
sg567
I01
sg112
Nsbag0
(g534
g2
Ntp17455
Rp17456
(dp17457
g38
Nsg538
g16199
sg539
g6524
sg540
I01
sg105
I00
sg541
I01
sg542
I01
sg543
g6521
sg567
I01
sg112
Nsbasg154
(lp17458
g0
(g597
g2
Ntp17459
Rp17460
(dp17461
g543
g11940
sg540
I00
sbag0
(g597
g2
Ntp17462
Rp17463
(dp17464
g543
g11954
sg540
I00
sbag0
(g597
g2
Ntp17465
Rp17466
(dp17467
g543
g11295
sg540
I00
sbag0
(g597
g2
Ntp17468
Rp17469
(dp17470
g543
g12089
sg540
I00
sbasg2242
g2198
stp17471
Rp17472
(lp17473
g0
(g88
g2
Ntp17474
Rp17475
(dp17476
g2762
I1
sg38
Nsg2763
I01
sg92
(lp17477
Nasg541
I00
sg105
I00
sg106
I00
sg59
g7917
sg112
Nsbag0
(g88
g2
Ntp17478
Rp17479
(dp17480
g2762
I1
sg38
Nsg2763
I01
sg92
(lp17481
Nasg541
I00
sg105
I00
sg106
I00
sg59
g7940
sg112
Nsbag0
(g88
g2
Ntp17482
Rp17483
(dp17484
g2762
I0
sg38
Nsg2763
I00
sg92
g93
sg541
I01
sg105
I00
sg106
I00
sg59
g108
sg112
Nsbag0
(g88
g2
Ntp17485
Rp17486
(dp17487
g2762
I0
sg38
Nsg2763
I00
sg92
g336
sg541
I01
sg105
I00
sg106
I00
sg59
g344
sg112
Nsbag0
(g88
g2
Ntp17488
Rp17489
(dp17490
g2762
I0
sg38
Nsg2763
I00
sg92
g2849
sg541
I01
sg105
I00
sg106
I00
sg59
g2857
sg112
Nsbag0
(g88
g2
Ntp17491
Rp17492
(dp17493
g2762
I0
sg38
Nsg2763
I00
sg92
g6526
sg541
I01
sg105
I00
sg106
I00
sg59
g6534
sg112
Nsba(lp17494
NaNag96
ag339
ag2852
ag6529
atp17495
Rp17496
sS'WT'
p17497
g85
sS'params'
p17498
(lp17499
g85
ag331
asS'updates'
p17500
(dp17501
g85
g2844
sg331
g6521
ssS'num_states'
p17502
I15
sS'lr'
p17503
F0.01
sS'clip_threshold'
p17504
I2
sS'state_definition'
p17505
g331
sS'momentum'
p17506
I0
sb.